{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"parse-blocks.js","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/asserters.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/parse-blocks.ts"],"sourcesContent":["import type {TypedObject} from '@sanity/types'\n\nexport function isTypedObject(object: unknown): object is TypedObject {\n  return isRecord(object) && typeof object._type === 'string'\n}\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return !!value && (typeof value === 'object' || typeof value === 'function')\n}\n","import type {\n  PortableTextBlock,\n  PortableTextObject,\n  PortableTextSpan,\n  PortableTextTextBlock,\n  TypedObject,\n} from '@sanity/types'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isTypedObject} from './asserters'\n\nexport function parseBlocks({\n  context,\n  blocks,\n  options,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  blocks: unknown\n  options: {\n    refreshKeys: boolean\n  }\n}): Array<PortableTextBlock> {\n  if (!Array.isArray(blocks)) {\n    return []\n  }\n\n  return blocks.flatMap((block) => {\n    const parsedBlock = parseBlock({context, block, options})\n\n    return parsedBlock ? [parsedBlock] : []\n  })\n}\n\nexport function parseBlock({\n  context,\n  block,\n  options,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  block: unknown\n  options: {\n    refreshKeys: boolean\n  }\n}): PortableTextBlock | undefined {\n  return (\n    parseTextBlock({block, context, options}) ??\n    parseBlockObject({blockObject: block, context, options})\n  )\n}\n\nfunction parseBlockObject({\n  blockObject,\n  context,\n  options,\n}: {\n  blockObject: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(blockObject)) {\n    return undefined\n  }\n\n  const schemaType = context.schema.blockObjects.find(\n    ({name}) => name === blockObject._type,\n  )\n\n  if (!schemaType) {\n    return undefined\n  }\n\n  return parseObject({\n    object: blockObject,\n    context: {\n      keyGenerator: context.keyGenerator,\n      schemaType,\n    },\n    options,\n  })\n}\n\nexport function isTextBlock(\n  schema: EditorSchema,\n  block: unknown,\n): block is PortableTextTextBlock {\n  return (\n    parseTextBlock({\n      block,\n      context: {schema, keyGenerator: () => ''},\n      options: {refreshKeys: false},\n    }) !== undefined\n  )\n}\n\nfunction parseTextBlock({\n  block,\n  context,\n  options,\n}: {\n  block: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean}\n}): PortableTextTextBlock | undefined {\n  if (!isTypedObject(block)) {\n    return undefined\n  }\n\n  if (block._type !== context.schema.block.name) {\n    return undefined\n  }\n\n  const _key = options.refreshKeys\n    ? context.keyGenerator()\n    : typeof block._key === 'string'\n      ? block._key\n      : context.keyGenerator()\n\n  const unparsedMarkDefs: Array<unknown> = Array.isArray(block.markDefs)\n    ? block.markDefs\n    : []\n  const markDefKeyMap = new Map<string, string>()\n  const markDefs = unparsedMarkDefs.flatMap((markDef) => {\n    if (!isTypedObject(markDef)) {\n      return []\n    }\n\n    const schemaType = context.schema.annotations.find(\n      ({name}) => name === markDef._type,\n    )\n\n    if (!schemaType) {\n      return []\n    }\n\n    if (typeof markDef._key !== 'string') {\n      // If the `markDef` doesn't have a `_key` then we don't know what spans\n      // it belongs to and therefore we have to discard it.\n      return []\n    }\n\n    const parsedAnnotation = parseObject({\n      object: markDef,\n      context: {\n        schemaType,\n        keyGenerator: context.keyGenerator,\n      },\n      options,\n    })\n\n    if (!parsedAnnotation) {\n      return []\n    }\n\n    markDefKeyMap.set(markDef._key, parsedAnnotation._key)\n\n    return [parsedAnnotation]\n  })\n\n  const unparsedChildren: Array<unknown> = Array.isArray(block.children)\n    ? block.children\n    : []\n\n  const children = unparsedChildren\n    .map(\n      (child) =>\n        parseSpan({span: child, context, markDefKeyMap, options}) ??\n        parseInlineObject({inlineObject: child, context, options}),\n    )\n    .filter((child) => child !== undefined)\n\n  const parsedBlock: PortableTextTextBlock = {\n    _type: context.schema.block.name,\n    _key,\n    children:\n      children.length > 0\n        ? children\n        : [\n            {\n              _key: context.keyGenerator(),\n              _type: context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n    markDefs,\n  }\n\n  if (\n    typeof block.style === 'string' &&\n    context.schema.styles.find((style) => style.name === block.style)\n  ) {\n    parsedBlock.style = block.style\n  } else {\n    const defaultStyle = context.schema.styles.at(0)?.name\n\n    if (defaultStyle !== undefined) {\n      parsedBlock.style = defaultStyle\n    } else {\n      console.error('Expected default style')\n    }\n  }\n\n  if (\n    typeof block.listItem === 'string' &&\n    context.schema.lists.find((list) => list.name === block.listItem)\n  ) {\n    parsedBlock.listItem = block.listItem\n  }\n\n  if (typeof block.level === 'number') {\n    parsedBlock.level = block.level\n  }\n\n  return parsedBlock\n}\n\nexport function isSpan(\n  schema: EditorSchema,\n  child: PortableTextSpan | PortableTextObject,\n): child is PortableTextSpan {\n  return (\n    parseSpan({\n      span: child,\n      markDefKeyMap: new Map(),\n      context: {schema, keyGenerator: () => ''},\n      options: {refreshKeys: false},\n    }) !== undefined\n  )\n}\n\nexport function parseSpan({\n  span,\n  context,\n  markDefKeyMap,\n  options,\n}: {\n  span: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  markDefKeyMap: Map<string, string>\n  options: {refreshKeys: boolean}\n}): PortableTextSpan | undefined {\n  if (!isTypedObject(span)) {\n    return undefined\n  }\n\n  // In reality, the span schema name is always 'span', but we only the check here anyway\n  if (span._type !== context.schema.span.name || span._type !== 'span') {\n    return undefined\n  }\n\n  const unparsedMarks: Array<unknown> = Array.isArray(span.marks)\n    ? span.marks\n    : []\n  const marks = unparsedMarks.flatMap((mark) => {\n    if (typeof mark !== 'string') {\n      return []\n    }\n\n    const markDefKey = markDefKeyMap.get(mark)\n\n    if (markDefKey !== undefined) {\n      return [markDefKey]\n    }\n\n    if (\n      context.schema.decorators.some((decorator) => decorator.name === mark)\n    ) {\n      return [mark]\n    }\n\n    return []\n  })\n\n  return {\n    _type: 'span',\n    _key: options.refreshKeys\n      ? context.keyGenerator()\n      : typeof span._key === 'string'\n        ? span._key\n        : context.keyGenerator(),\n    text: typeof span.text === 'string' ? span.text : '',\n    marks,\n  }\n}\n\nexport function parseInlineObject({\n  inlineObject,\n  context,\n  options,\n}: {\n  inlineObject: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(inlineObject)) {\n    return undefined\n  }\n\n  const schemaType = context.schema.inlineObjects.find(\n    ({name}) => name === inlineObject._type,\n  )\n\n  if (!schemaType) {\n    return undefined\n  }\n\n  return parseObject({\n    object: inlineObject,\n    context: {\n      keyGenerator: context.keyGenerator,\n      schemaType,\n    },\n    options,\n  })\n}\n\nexport function parseAnnotation({\n  annotation,\n  context,\n  options,\n}: {\n  annotation: TypedObject\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(annotation)) {\n    return undefined\n  }\n\n  const schemaType = context.schema.annotations.find(\n    ({name}) => name === annotation._type,\n  )\n\n  if (!schemaType) {\n    return undefined\n  }\n\n  return parseObject({\n    object: annotation,\n    context: {\n      keyGenerator: context.keyGenerator,\n      schemaType,\n    },\n    options,\n  })\n}\n\nfunction parseObject({\n  object,\n  context,\n  options,\n}: {\n  object: TypedObject\n  context: Pick<EditorContext, 'keyGenerator'> & {\n    schemaType: EditorSchema['blockObjects'][0]\n  }\n  options: {refreshKeys: boolean}\n}): PortableTextObject {\n  // Validates all props on the object and only takes those that match\n  // the name of a field\n  const values = context.schemaType.fields.reduce<Record<string, unknown>>(\n    (fieldValues, field) => {\n      const fieldValue = object[field.name]\n\n      if (fieldValue !== undefined) {\n        fieldValues[field.name] = fieldValue\n      }\n\n      return fieldValues\n    },\n    {},\n  )\n\n  return {\n    _type: context.schemaType.name,\n    _key: options.refreshKeys\n      ? context.keyGenerator()\n      : typeof object._key === 'string'\n        ? object._key\n        : context.keyGenerator(),\n    ...values,\n  }\n}\n"],"names":["isTypedObject","object","isRecord","_type","value","parseBlocks","context","blocks","options","Array","isArray","flatMap","block","parsedBlock","parseBlock","parseTextBlock","parseBlockObject","blockObject","schemaType","schema","blockObjects","find","name","parseObject","keyGenerator","isTextBlock","refreshKeys","undefined","_key","unparsedMarkDefs","markDefs","markDefKeyMap","Map","markDef","annotations","parsedAnnotation","set","children","map","child","parseSpan","span","parseInlineObject","inlineObject","filter","length","text","marks","style","styles","defaultStyle","at","console","error","listItem","lists","list","level","mark","markDefKey","get","decorators","some","decorator","inlineObjects","parseAnnotation","annotation","values","fields","reduce","fieldValues","field","fieldValue"],"mappings":"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","ignoreList":[0,1],"debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"file":"util.slice-blocks.js","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.is-keyed-segment.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.block-offset.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.get-block-end-point.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.get-block-start-point.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.get-text-block-text.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.is-empty-text-block.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.is-equal-selection-points.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.is-span.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.reverse-selection.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.slice-blocks.ts"],"sourcesContent":["import type {KeyedSegment} from '@sanity/types'\n\n/**\n * @public\n */\nexport function isKeyedSegment(segment: unknown): segment is KeyedSegment {\n  return typeof segment === 'object' && segment !== null && '_key' in segment\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {isKeyedSegment} from './util.is-keyed-segment'\n\n/**\n * @public\n */\nexport function blockOffsetToSpanSelectionPoint({\n  value,\n  blockOffset,\n  direction,\n}: {\n  value: Array<PortableTextBlock>\n  blockOffset: BlockOffset\n  direction: 'forward' | 'backward'\n}) {\n  let offsetLeft = blockOffset.offset\n  let selectionPoint:\n    | {path: [KeyedSegment, 'children', KeyedSegment]; offset: number}\n    | undefined\n  let skippedInlineObject = false\n\n  for (const block of value) {\n    if (block._key !== blockOffset.path[0]._key) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (direction === 'forward') {\n        if (!isPortableTextSpan(child)) {\n          continue\n        }\n\n        if (offsetLeft <= child.text.length) {\n          selectionPoint = {\n            path: [...blockOffset.path, 'children', {_key: child._key}],\n            offset: offsetLeft,\n          }\n          break\n        }\n\n        offsetLeft -= child.text.length\n\n        continue\n      }\n\n      if (!isPortableTextSpan(child)) {\n        skippedInlineObject = true\n        continue\n      }\n\n      if (offsetLeft === 0 && selectionPoint && !skippedInlineObject) {\n        if (skippedInlineObject) {\n          selectionPoint = {\n            path: [...blockOffset.path, 'children', {_key: child._key}],\n            offset: 0,\n          }\n        }\n        break\n      }\n\n      if (offsetLeft > child.text.length) {\n        offsetLeft -= child.text.length\n        continue\n      }\n\n      if (offsetLeft <= child.text.length) {\n        selectionPoint = {\n          path: [...blockOffset.path, 'children', {_key: child._key}],\n          offset: offsetLeft,\n        }\n\n        offsetLeft -= child.text.length\n\n        if (offsetLeft !== 0) {\n          break\n        }\n      }\n    }\n  }\n\n  return selectionPoint\n}\n\n/**\n * @public\n */\nexport function spanSelectionPointToBlockOffset({\n  value,\n  selectionPoint,\n}: {\n  value: Array<PortableTextBlock>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  let offset = 0\n\n  const blockKey = isKeyedSegment(selectionPoint.path[0])\n    ? selectionPoint.path[0]._key\n    : undefined\n  const spanKey = isKeyedSegment(selectionPoint.path[2])\n    ? selectionPoint.path[2]._key\n    : undefined\n\n  if (!blockKey || !spanKey) {\n    return undefined\n  }\n\n  for (const block of value) {\n    if (block._key !== blockKey) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (!isPortableTextSpan(child)) {\n        continue\n      }\n\n      if (child._key === spanKey) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      offset += child.text.length\n    }\n  }\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function getBlockEndPoint({\n  node,\n  path,\n}: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelectionPoint {\n  if (isPortableTextTextBlock(node)) {\n    const lastChild = node.children[node.children.length - 1]\n\n    if (lastChild) {\n      return {\n        path: [...path, 'children', {_key: lastChild._key}],\n        offset: isPortableTextSpan(lastChild) ? lastChild.text.length : 0,\n      }\n    }\n  }\n\n  return {\n    path,\n    offset: 0,\n  }\n}\n","import {\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function getBlockStartPoint({\n  node,\n  path,\n}: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelectionPoint {\n  if (isPortableTextTextBlock(node)) {\n    return {\n      path: [...path, 'children', {_key: node.children[0]._key}],\n      offset: 0,\n    }\n  }\n\n  return {\n    path,\n    offset: 0,\n  }\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\n\n/**\n * @public\n */\nexport function getTextBlockText(block: PortableTextTextBlock) {\n  return block.children.map((child) => child.text ?? '').join('')\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport {getTextBlockText} from './util.get-text-block-text'\n\n/**\n * @public\n */\nexport function isEmptyTextBlock(block: PortableTextBlock) {\n  if (!isPortableTextTextBlock(block)) {\n    return false\n  }\n\n  const onlyText = block.children.every(isPortableTextSpan)\n  const blockText = getTextBlockText(block)\n\n  return onlyText && blockText === ''\n}\n","import type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function isEqualSelectionPoints(\n  a: EditorSelectionPoint,\n  b: EditorSelectionPoint,\n) {\n  return (\n    a.offset === b.offset && JSON.stringify(a.path) === JSON.stringify(b.path)\n  )\n}\n","import type {PortableTextChild, PortableTextSpan} from '@sanity/types'\nimport type {EditorContext} from '..'\n\n/**\n * @public\n */\nexport function isSpan(\n  context: Pick<EditorContext, 'schema'>,\n  child: PortableTextChild,\n): child is PortableTextSpan {\n  return child._type === context.schema.span.name\n}\n","import type {EditorSelection} from '../types/editor'\n\n/**\n * @public\n */\nexport function reverseSelection<\n  TEditorSelection extends NonNullable<EditorSelection> | null,\n>(selection: TEditorSelection): TEditorSelection {\n  if (!selection) {\n    return selection\n  }\n\n  if (selection.backward) {\n    return {\n      anchor: selection.focus,\n      focus: selection.anchor,\n      backward: false,\n    } as TEditorSelection\n  }\n\n  return {\n    anchor: selection.focus,\n    focus: selection.anchor,\n    backward: true,\n  } as TEditorSelection\n}\n","import {\n  isKeySegment,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {EditorSelection} from '..'\n\n/**\n * @public\n */\nexport function sliceBlocks({\n  blocks,\n  selection,\n}: {\n  blocks: Array<PortableTextBlock>\n  selection: EditorSelection\n}): Array<PortableTextBlock> {\n  const slice: Array<PortableTextBlock> = []\n\n  if (!selection) {\n    return slice\n  }\n\n  let startBlock: PortableTextBlock | undefined\n  const middleBlocks: PortableTextBlock[] = []\n  let endBlock: PortableTextBlock | undefined\n\n  const startPoint = selection.backward ? selection.focus : selection.anchor\n  const endPoint = selection.backward ? selection.anchor : selection.focus\n\n  const startBlockKey = isKeySegment(startPoint.path[0])\n    ? startPoint.path[0]._key\n    : undefined\n  const endBlockKey = isKeySegment(endPoint.path[0])\n    ? endPoint.path[0]._key\n    : undefined\n  const startChildKey = isKeySegment(startPoint.path[2])\n    ? startPoint.path[2]._key\n    : undefined\n  const endChildKey = isKeySegment(endPoint.path[2])\n    ? endPoint.path[2]._key\n    : undefined\n\n  if (!startBlockKey || !endBlockKey) {\n    return slice\n  }\n\n  for (const block of blocks) {\n    if (!isPortableTextTextBlock(block)) {\n      if (block._key === startBlockKey && block._key === endBlockKey) {\n        startBlock = block\n        break\n      }\n    }\n\n    if (block._key === startBlockKey) {\n      if (!isPortableTextTextBlock(block)) {\n        startBlock = block\n        continue\n      }\n\n      if (startChildKey) {\n        for (const child of block.children) {\n          if (child._key === startChildKey) {\n            if (isPortableTextSpan(child)) {\n              const text =\n                child._key === endChildKey\n                  ? child.text.slice(startPoint.offset, endPoint.offset)\n                  : child.text.slice(startPoint.offset)\n\n              startBlock = {\n                ...block,\n                children: [\n                  {\n                    ...child,\n                    text,\n                  },\n                ],\n              }\n            } else {\n              startBlock = {\n                ...block,\n                children: [child],\n              }\n            }\n\n            if (startChildKey === endChildKey) {\n              break\n            }\n            continue\n          }\n\n          if (startBlock && isPortableTextTextBlock(startBlock)) {\n            if (\n              endChildKey &&\n              child._key === endChildKey &&\n              isPortableTextSpan(child)\n            ) {\n              startBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset),\n              })\n            } else {\n              startBlock.children.push(child)\n            }\n\n            if (\n              block._key === endBlockKey &&\n              endChildKey &&\n              child._key === endChildKey\n            ) {\n              break\n            }\n          }\n        }\n\n        if (startBlockKey === endBlockKey) {\n          break\n        }\n\n        continue\n      }\n\n      startBlock = block\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n    }\n\n    if (block._key === endBlockKey) {\n      if (!isPortableTextTextBlock(block)) {\n        endBlock = block\n        break\n      }\n\n      if (endChildKey) {\n        endBlock = {\n          ...block,\n          children: [],\n        }\n\n        for (const child of block.children) {\n          if (endBlock && isPortableTextTextBlock(endBlock)) {\n            if (child._key === endChildKey && isPortableTextSpan(child)) {\n              endBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset),\n              })\n\n              break\n            }\n\n            endBlock.children.push(child)\n\n            if (endChildKey && child._key === endChildKey) {\n              break\n            }\n          }\n        }\n\n        break\n      }\n\n      endBlock = block\n\n      break\n    }\n\n    if (startBlock) {\n      middleBlocks.push(block)\n    }\n  }\n\n  return [\n    ...(startBlock ? [startBlock] : []),\n    ...middleBlocks,\n    ...(endBlock ? [endBlock] : []),\n  ]\n}\n"],"names":["isKeyedSegment","segment","blockOffsetToSpanSelectionPoint","value","blockOffset","direction","offsetLeft","offset","selectionPoint","skippedInlineObject","block","_key","path","isPortableTextTextBlock","child","children","isPortableTextSpan","text","length","spanSelectionPointToBlockOffset","blockKey","undefined","spanKey","getBlockEndPoint","node","lastChild","getBlockStartPoint","getTextBlockText","map","join","isEmptyTextBlock","onlyText","every","blockText","isEqualSelectionPoints","a","b","JSON","stringify","isSpan","context","_type","schema","span","name","reverseSelection","selection","backward","anchor","focus","sliceBlocks","blocks","slice","startBlock","middleBlocks","endBlock","startPoint","endPoint","startBlockKey","isKeySegment","endBlockKey","startChildKey","endChildKey","push"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9],"debugId":null}},
    {"offset": {"line": 423, "column": 0}, "map": {"version":3,"file":"util.selection-point-to-block-offset.js","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.block-offset-to-block-selection-point.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.block-offset-to-selection-point.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.block-offsets-to-selection.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.child-selection-point-to-block-offset.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.selection-point-to-block-offset.ts"],"sourcesContent":["import type {PortableTextBlock} from '@sanity/types'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function blockOffsetToBlockSelectionPoint({\n  value,\n  blockOffset,\n}: {\n  value: Array<PortableTextBlock>\n  blockOffset: BlockOffset\n}): EditorSelectionPoint | undefined {\n  let selectionPoint: EditorSelectionPoint | undefined\n\n  for (const block of value) {\n    if (block._key === blockOffset.path[0]._key) {\n      selectionPoint = {\n        path: [{_key: block._key}],\n        offset: blockOffset.offset,\n      }\n      break\n    }\n  }\n\n  return selectionPoint\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {blockOffsetToSpanSelectionPoint} from './util.block-offset'\nimport {blockOffsetToBlockSelectionPoint} from './util.block-offset-to-block-selection-point'\n\n/**\n * @public\n */\nexport function blockOffsetToSelectionPoint({\n  value,\n  blockOffset,\n  direction,\n}: {\n  value: Array<PortableTextBlock>\n  blockOffset: BlockOffset\n  direction: 'forward' | 'backward'\n}): EditorSelectionPoint | undefined {\n  const spanSelectionPoint = blockOffsetToSpanSelectionPoint({\n    value,\n    blockOffset,\n    direction,\n  })\n\n  if (!spanSelectionPoint) {\n    return blockOffsetToBlockSelectionPoint({\n      value,\n      blockOffset,\n    })\n  }\n\n  return spanSelectionPoint\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelection} from '..'\nimport type {BlockOffset} from '../types/block-offset'\nimport {blockOffsetToSelectionPoint} from './util.block-offset-to-selection-point'\n\n/**\n * @public\n */\nexport function blockOffsetsToSelection({\n  value,\n  offsets,\n  backward,\n}: {\n  value: Array<PortableTextBlock>\n  offsets: {anchor: BlockOffset; focus: BlockOffset}\n  backward?: boolean\n}): EditorSelection {\n  const anchor = blockOffsetToSelectionPoint({\n    value,\n    blockOffset: offsets.anchor,\n    direction: backward ? 'backward' : 'forward',\n  })\n  const focus = blockOffsetToSelectionPoint({\n    value,\n    blockOffset: offsets.focus,\n    direction: backward ? 'forward' : 'backward',\n  })\n\n  if (!anchor || !focus) {\n    return null\n  }\n\n  return {\n    anchor,\n    focus,\n    backward,\n  }\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {isKeyedSegment} from './util.is-keyed-segment'\n\n/**\n * @public\n */\nexport function childSelectionPointToBlockOffset({\n  value,\n  selectionPoint,\n}: {\n  value: Array<PortableTextBlock>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  let offset = 0\n\n  const blockKey = isKeyedSegment(selectionPoint.path[0])\n    ? selectionPoint.path[0]._key\n    : undefined\n  const childKey = isKeyedSegment(selectionPoint.path[2])\n    ? selectionPoint.path[2]._key\n    : undefined\n\n  if (!blockKey || !childKey) {\n    return undefined\n  }\n\n  for (const block of value) {\n    if (block._key !== blockKey) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (child._key === childKey) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      if (isPortableTextSpan(child)) {\n        offset += child.text.length\n      }\n    }\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {childSelectionPointToBlockOffset} from './util.child-selection-point-to-block-offset'\nimport {isKeyedSegment} from './util.is-keyed-segment'\n\n/**\n * @public\n */\nexport function selectionPointToBlockOffset({\n  value,\n  selectionPoint,\n}: {\n  value: Array<PortableTextBlock>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  if (\n    selectionPoint.path.length === 1 &&\n    isKeyedSegment(selectionPoint.path[0])\n  ) {\n    return {\n      path: [{_key: selectionPoint.path[0]._key}],\n      offset: selectionPoint.offset,\n    }\n  }\n\n  return childSelectionPointToBlockOffset({\n    value,\n    selectionPoint,\n  })\n}\n"],"names":["blockOffsetToBlockSelectionPoint","value","blockOffset","selectionPoint","block","_key","path","offset","blockOffsetToSelectionPoint","direction","blockOffsetToSpanSelectionPoint","blockOffsetsToSelection","offsets","backward","anchor","focus","childSelectionPointToBlockOffset","blockKey","isKeyedSegment","undefined","childKey","isPortableTextTextBlock","child","children","isPortableTextSpan","text","length","selectionPointToBlockOffset"],"mappings":";;;;;;;;;;;AAOO,SAASA,iCAAiC,EAC/CC,KAAAA,EACAC,WAAAA,EAIF,EAAqC;IAC/BC,IAAAA;IAEJ,KAAA,MAAWC,SAASH,MAClB,IAAIG,MAAMC,IAAAA,KAASH,YAAYI,IAAAA,CAAK,CAAC,CAAA,CAAED,IAAAA,EAAM;QAC1B,iBAAA;YACfC,MAAM;gBAAC;oBAACD,MAAMD,MAAMC,IAAAA;gBAAAA,CAAK;aAAA;YACzBE,QAAQL,YAAYK,MAAAA;QACtB;QACA;IAAA;IAIGJ,OAAAA;AACT;AClBO,SAASK,4BAA4B,EAC1CP,KAAAA,EACAC,WAAAA,EACAO,SAAAA,EAKF,EAAqC;IAOnC,uMAN2BC,kCAAAA,EAAgC;QACzDT;QACAC;QACAO;IAAAA,CACD,KAGQT,iCAAiC;QACtCC;QACAC;IAAAA,CACD;AAIL;ACxBO,SAASS,wBAAwB,EACtCV,KAAAA,EACAW,OAAAA,EACAC,QAAAA,EAKF,EAAoB;IAClB,MAAMC,SAASN,4BAA4B;QACzCP;QACAC,aAAaU,QAAQE,MAAAA;QACrBL,WAAWI,WAAW,aAAa;IAAA,CACpC,GACKE,QAAQP,4BAA4B;QACxCP;QACAC,aAAaU,QAAQG,KAAAA;QACrBN,WAAWI,WAAW,YAAY;IAAA,CACnC;IAED,OAAI,CAACC,UAAU,CAACC,QACP,OAGF;QACLD;QACAC;QACAF;IACF;AACF;ACzBO,SAASG,iCAAiC,EAC/Cf,KAAAA,EACAE,cAAAA,EAIF,EAA4B;IAC1B,IAAII,SAAS;IAEPU,MAAAA,2MAAWC,iBAAAA,EAAef,eAAeG,IAAAA,CAAK,CAAC,CAAC,IAClDH,eAAeG,IAAAA,CAAK,CAAC,CAAA,CAAED,IAAAA,GACvBc,KAAAA,GACEC,2MAAWF,iBAAAA,EAAef,eAAeG,IAAAA,CAAK,CAAC,CAAC,IAClDH,eAAeG,IAAAA,CAAK,CAAC,CAAA,CAAED,IAAAA,GACvBc,KAAAA;IAEA,IAAA,CAAA,CAAA,CAACF,YAAY,CAACG,QAAAA,GAAAA;QAIlB,KAAA,MAAWhB,SAASH,MAClB,IAAIG,MAAMC,IAAAA,KAASY,mKAIdI,0BAAAA,EAAwBjB,KAAK,GAIvBkB,KAAAA,MAAAA,SAASlB,MAAMmB,QAAAA,CAAU;YAClC,IAAID,MAAMjB,IAAAA,KAASe,UACV,OAAA;gBACLd,MAAM;oBAAC;wBAACD,MAAMD,MAAMC,IAAAA;oBAAAA,CAAK;iBAAA;gBACzBE,QAAQA,SAASJ,eAAeI,MAAAA;YAClC;YAGEiB,CAAAA,GAAAA,kJAAAA,CAAAA,qBAAAA,EAAmBF,KAAK,KAAA,CAC1Bf,UAAUe,MAAMG,IAAAA,CAAKC,MAAAA;QAAAA;IAAAA;AAI7B;AC7CO,SAASC,4BAA4B,EAC1C1B,KAAAA,EACAE,cAAAA,EAIF,EAA4B;IAExBA,OAAAA,eAAeG,IAAAA,CAAKoB,MAAAA,KAAW,qMAC/BR,iBAAAA,EAAef,eAAeG,IAAAA,CAAK,CAAC,CAAC,IAE9B;QACLA,MAAM;YAAC;gBAACD,MAAMF,eAAeG,IAAAA,CAAK,CAAC,CAAA,CAAED,IAAAA;YAAAA,CAAK;SAAA;QAC1CE,QAAQJ,eAAeI,MAAAA;IAAAA,IAIpBS,iCAAiC;QACtCf;QACAE;IAAAA,CACD;AACH","ignoreList":[0,1,2,3,4],"debugId":null}},
    {"offset": {"line": 513, "column": 0}, "map": {"version":3,"file":"selector.is-overlapping-selection.js","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.is-selection-collapsed.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.guards.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selectors.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-end-point.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-start-point.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.get-next-inline-object.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.get-previous-inline-object.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-slice.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-text.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.is-selection-expanded.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.get-caret-word-selection.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.is-at-the-end-of-block.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.is-at-the-start-of-block.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.is-point-after-selection.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.is-point-before-selection.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.is-overlapping-selection.ts"],"sourcesContent":["import type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const isSelectionCollapsed: EditorSelector<boolean> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return false\n  }\n\n  return (\n    JSON.stringify(snapshot.context.selection.anchor.path) ===\n      JSON.stringify(snapshot.context.selection.focus.path) &&\n    snapshot.context.selection?.anchor.offset ===\n      snapshot.context.selection?.focus.offset\n  )\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport type {EditorSchema} from '../editor/editor-schema'\n\n/**\n * @alpha\n */\nexport type BehaviorGuards = ReturnType<typeof createGuards>\n\nexport function createGuards({schema}: {schema: EditorSchema}) {\n  function isListBlock(block: unknown): block is PortableTextListBlock {\n    return isPortableTextListBlock(block) && block._type === schema.block.name\n  }\n\n  function isTextBlock(block: unknown): block is PortableTextTextBlock {\n    return isPortableTextTextBlock(block) && block._type === schema.block.name\n  }\n\n  return {isListBlock, isTextBlock}\n}\n","import {\n  isKeySegment,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n  type PortableTextListBlock,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {createGuards} from '../behavior-actions/behavior.guards'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getFocusBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const key = snapshot.context.selection\n    ? isKeySegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? snapshot.context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusListBlock: EditorSelector<\n  {node: PortableTextListBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const guards = createGuards(snapshot.context)\n  const focusBlock = getFocusBlock(snapshot)\n\n  return focusBlock && guards.isListBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusTextBlock: EditorSelector<\n  {node: PortableTextTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot)\n\n  return focusBlock && isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusBlockObject: EditorSelector<\n  {node: PortableTextObject; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot)\n\n  return focusBlock && !isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusChild: EditorSelector<\n  | {\n      node: PortableTextObject | PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusTextBlock(snapshot)\n\n  if (!focusBlock) {\n    return undefined\n  }\n\n  const key = snapshot.context.selection\n    ? isKeySegment(snapshot.context.selection.focus.path[2])\n      ? snapshot.context.selection.focus.path[2]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? focusBlock.node.children.find((span) => span._key === key)\n    : undefined\n\n  return node && key\n    ? {node, path: [...focusBlock.path, 'children', {_key: key}]}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusSpan: EditorSelector<\n  | {node: PortableTextSpan; path: [KeyedSegment, 'children', KeyedSegment]}\n  | undefined\n> = (snapshot) => {\n  const focusChild = getFocusChild(snapshot)\n\n  return focusChild && isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFirstBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const node = snapshot.context.value[0]\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getLastBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const node = snapshot.context.value[snapshot.context.value.length - 1]\n    ? snapshot.context.value[snapshot.context.value.length - 1]\n    : undefined\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getSelectedBlocks: EditorSelector<\n  Array<{node: PortableTextBlock; path: [KeyedSegment]}>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedBlocks: Array<{node: PortableTextBlock; path: [KeyedSegment]}> =\n    []\n  const startKey = snapshot.context.selection.backward\n    ? isKeySegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n    : isKeySegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n  const endKey = snapshot.context.selection.backward\n    ? isKeySegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n    : isKeySegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n\n  if (!startKey || !endKey) {\n    return selectedBlocks\n  }\n\n  for (const block of snapshot.context.value) {\n    if (block._key === startKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n\n      if (startKey === endKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n      break\n    }\n\n    if (selectedBlocks.length > 0) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n    }\n  }\n\n  return selectedBlocks\n}\n\n/**\n * @public\n */\nexport const getSelectionStartBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const key = snapshot.context.selection.backward\n    ? isKeySegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n    : isKeySegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n\n  const node = key\n    ? snapshot.context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getSelectionEndBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const key = snapshot.context.selection.backward\n    ? isKeySegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n    : isKeySegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n\n  const node = key\n    ? snapshot.context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getPreviousBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  let previousBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionStartBlock = getSelectionStartBlock(snapshot)\n\n  if (!selectionStartBlock) {\n    return undefined\n  }\n\n  let foundSelectionStartBlock = false\n\n  for (const block of snapshot.context.value) {\n    if (block._key === selectionStartBlock.node._key) {\n      foundSelectionStartBlock = true\n      break\n    }\n\n    previousBlock = {node: block, path: [{_key: block._key}]}\n  }\n\n  if (foundSelectionStartBlock && previousBlock) {\n    return previousBlock\n  }\n\n  return undefined\n}\n\n/**\n * @public\n */\nexport const getNextBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  let nextBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionEndBlock = getSelectionEndBlock(snapshot)\n\n  if (!selectionEndBlock) {\n    return undefined\n  }\n\n  let foundSelectionEndBlock = false\n\n  for (const block of snapshot.context.value) {\n    if (block._key === selectionEndBlock.node._key) {\n      foundSelectionEndBlock = true\n      continue\n    }\n\n    if (foundSelectionEndBlock) {\n      nextBlock = {node: block, path: [{_key: block._key}]}\n      break\n    }\n  }\n\n  if (foundSelectionEndBlock && nextBlock) {\n    return nextBlock\n  }\n\n  return undefined\n}\n","import type {EditorSelectionPoint} from '..'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getSelectionEndPoint: EditorSelector<\n  EditorSelectionPoint | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  return snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n}\n","import type {EditorSelectionPoint} from '..'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getSelectionStartPoint: EditorSelector<\n  EditorSelectionPoint | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  return snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n}\n","import {\n  isKeySegment,\n  type KeyedSegment,\n  type PortableTextObject,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan} from '../utils'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getFocusTextBlock} from './selectors'\n\n/**\n * @public\n */\nexport const getNextInlineObject: EditorSelector<\n  | {\n      node: PortableTextObject\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionEndPoint = getSelectionEndPoint(snapshot)\n  const selectionEndPointChildKey =\n    selectionEndPoint && isKeySegment(selectionEndPoint.path[2])\n      ? selectionEndPoint.path[2]._key\n      : undefined\n\n  if (!focusTextBlock || !selectionEndPointChildKey) {\n    return undefined\n  }\n\n  let endPointChildFound = false\n  let inlineObject:\n    | {\n        node: PortableTextObject\n        path: [KeyedSegment, 'children', KeyedSegment]\n      }\n    | undefined\n\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = true\n      continue\n    }\n\n    if (!isSpan(snapshot.context, child) && endPointChildFound) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, 'children', {_key: child._key}],\n      }\n      break\n    }\n  }\n\n  return inlineObject\n}\n","import {\n  isKeySegment,\n  type KeyedSegment,\n  type PortableTextObject,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan} from '../utils'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {getFocusTextBlock} from './selectors'\n\n/**\n * @public\n */\nexport const getPreviousInlineObject: EditorSelector<\n  | {\n      node: PortableTextObject\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n  const selectionStartPointChildKey =\n    selectionStartPoint && isKeySegment(selectionStartPoint.path[2])\n      ? selectionStartPoint.path[2]._key\n      : undefined\n\n  if (!focusTextBlock || !selectionStartPointChildKey) {\n    return undefined\n  }\n\n  let inlineObject:\n    | {\n        node: PortableTextObject\n        path: [KeyedSegment, 'children', KeyedSegment]\n      }\n    | undefined\n\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionStartPointChildKey) {\n      break\n    }\n\n    if (!isSpan(snapshot.context, child)) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, 'children', {_key: child._key}],\n      }\n    }\n  }\n\n  return inlineObject\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {sliceBlocks} from '../utils'\n\n/**\n * @public\n */\nexport const getSelectedSlice: EditorSelector<Array<PortableTextBlock>> = (\n  snapshot,\n) => {\n  return sliceBlocks({\n    blocks: snapshot.context.value,\n    selection: snapshot.context.selection,\n  })\n}\n","import {isPortableTextSpan, isPortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedSlice} from './selector.get-selected-slice'\n\n/**\n * @public\n */\nexport const getSelectionText: EditorSelector<string> = (snapshot) => {\n  const selectedSlice = getSelectedSlice(snapshot)\n\n  return selectedSlice.reduce((text, block) => {\n    if (!isPortableTextTextBlock(block)) {\n      return text\n    }\n\n    return (\n      text +\n      block.children.reduce((text, child) => {\n        if (isPortableTextSpan(child)) {\n          return text + child.text\n        }\n\n        return text\n      }, '')\n    )\n  }, '')\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport const isSelectionExpanded: EditorSelector<boolean> = (snapshot) => {\n  return !isSelectionCollapsed(snapshot)\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelection} from '../types/editor'\nimport {\n  blockOffsetToSpanSelectionPoint,\n  getBlockEndPoint,\n  getBlockStartPoint,\n  spanSelectionPointToBlockOffset,\n} from '../utils'\nimport {getNextInlineObject} from './selector.get-next-inline-object'\nimport {getPreviousInlineObject} from './selector.get-previous-inline-object'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {getSelectionText} from './selector.get-selection-text'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\nimport {getFocusTextBlock} from './selectors'\n\n/**\n * @public\n * Returns the selection of the of the word the caret is placed in.\n * Note: Only returns a word selection if the current selection is collapsed\n */\nexport const getCaretWordSelection: EditorSelector<EditorSelection> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return null\n  }\n\n  if (!isSelectionCollapsed(snapshot)) {\n    return null\n  }\n\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n  const selectionStartOffset = selectionStartPoint\n    ? spanSelectionPointToBlockOffset({\n        value: snapshot.context.value,\n        selectionPoint: selectionStartPoint,\n      })\n    : undefined\n\n  if (!focusTextBlock || !selectionStartPoint || !selectionStartOffset) {\n    return null\n  }\n\n  const previousInlineObject = getPreviousInlineObject(snapshot)\n  const blockStartPoint = getBlockStartPoint(focusTextBlock)\n  const textBefore = getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: previousInlineObject\n          ? {path: previousInlineObject.path, offset: 0}\n          : blockStartPoint,\n        focus: selectionStartPoint,\n      },\n    },\n  })\n  const textDirectlyBefore = textBefore.split(/\\s+/).at(-1)\n\n  const nextInlineObject = getNextInlineObject(snapshot)\n  const blockEndPoint = getBlockEndPoint(focusTextBlock)\n  const textAfter = getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: selectionStartPoint,\n        focus: nextInlineObject\n          ? {path: nextInlineObject.path, offset: 0}\n          : blockEndPoint,\n      },\n    },\n  })\n  const textDirectlyAfter = textAfter.split(/\\s+/).at(0)\n\n  if (\n    (textDirectlyBefore === undefined || textDirectlyBefore === '') &&\n    (textDirectlyAfter === undefined || textDirectlyAfter === '')\n  ) {\n    return null\n  }\n\n  const caretWordStartOffset: BlockOffset = textDirectlyBefore\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset - textDirectlyBefore.length,\n      }\n    : selectionStartOffset\n  const caretWordEndOffset: BlockOffset = textDirectlyAfter\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset + textDirectlyAfter.length,\n      }\n    : selectionStartOffset\n\n  const caretWordStartSelectionPoint = blockOffsetToSpanSelectionPoint({\n    value: snapshot.context.value,\n    blockOffset: caretWordStartOffset,\n    direction: 'backward',\n  })\n  const caretWordEndSelectionPoint = blockOffsetToSpanSelectionPoint({\n    value: snapshot.context.value,\n    blockOffset: caretWordEndOffset,\n    direction: 'forward',\n  })\n\n  if (!caretWordStartSelectionPoint || !caretWordEndSelectionPoint) {\n    return null\n  }\n\n  const caretWordSelection = {\n    anchor: caretWordStartSelectionPoint,\n    focus: caretWordEndSelectionPoint,\n  }\n\n  return isSelectionExpanded({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: caretWordSelection,\n    },\n  })\n    ? caretWordSelection\n    : null\n}\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheEndOfBlock(block: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const blockEndPoint = utils.getBlockEndPoint(block)\n\n    return utils.isEqualSelectionPoints(\n      snapshot.context.selection.focus,\n      blockEndPoint,\n    )\n  }\n}\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheStartOfBlock(block: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const blockStartPoint = utils.getBlockStartPoint(block)\n\n    return utils.isEqualSelectionPoints(\n      snapshot.context.selection.focus,\n      blockStartPoint,\n    )\n  }\n}\n","import {isKeySegment, isPortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {reverseSelection} from '../utils/util.reverse-selection'\n\n/**\n * @public\n */\nexport function isPointAfterSelection(\n  point: EditorSelectionPoint,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const selection = snapshot.context.selection.backward\n      ? reverseSelection(snapshot.context.selection)\n      : snapshot.context.selection\n\n    const pointBlockKey = isKeySegment(point.path[0])\n      ? point.path[0]._key\n      : undefined\n    const pointChildKey = isKeySegment(point.path[2])\n      ? point.path[2]._key\n      : undefined\n\n    const endBlockKey = isKeySegment(selection.focus.path[0])\n      ? selection.focus.path[0]._key\n      : undefined\n    const endChildKey = isKeySegment(selection.focus.path[2])\n      ? selection.focus.path[2]._key\n      : undefined\n\n    if (!pointBlockKey || !endBlockKey) {\n      return false\n    }\n\n    let after = false\n\n    for (const block of snapshot.context.value) {\n      if (block._key === endBlockKey) {\n        if (block._key !== pointBlockKey) {\n          after = true\n          break\n        }\n\n        // Both the point and the selection end in this block\n\n        if (!isPortableTextTextBlock(block)) {\n          break\n        }\n\n        if (!pointChildKey || !endChildKey) {\n          break\n        }\n\n        for (const child of block.children) {\n          if (child._key === endChildKey) {\n            if (child._key !== pointChildKey) {\n              after = true\n              break\n            }\n\n            // Both the point and the selection end in this child\n\n            after = point.offset > selection.focus.offset\n            break\n          }\n\n          if (child._key === pointChildKey) {\n            break\n          }\n        }\n      }\n\n      if (block._key === pointBlockKey) {\n        break\n      }\n    }\n\n    return after\n  }\n}\n","import {isKeySegment, isPortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {reverseSelection} from '../utils/util.reverse-selection'\n\n/**\n * @public\n */\nexport function isPointBeforeSelection(\n  point: EditorSelectionPoint,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const selection = snapshot.context.selection.backward\n      ? reverseSelection(snapshot.context.selection)\n      : snapshot.context.selection\n\n    const pointBlockKey = isKeySegment(point.path[0])\n      ? point.path[0]._key\n      : undefined\n    const pointChildKey = isKeySegment(point.path[2])\n      ? point.path[2]._key\n      : undefined\n\n    const startBlockKey = isKeySegment(selection.anchor.path[0])\n      ? selection.anchor.path[0]._key\n      : undefined\n    const startChildKey = isKeySegment(selection.anchor.path[2])\n      ? selection.anchor.path[2]._key\n      : undefined\n\n    if (!pointBlockKey || !startBlockKey) {\n      return false\n    }\n\n    let before = false\n\n    for (const block of snapshot.context.value) {\n      if (block._key === pointBlockKey) {\n        if (block._key !== startBlockKey) {\n          before = true\n          break\n        }\n\n        // Both the point and the selection start in this block\n\n        if (!isPortableTextTextBlock(block)) {\n          break\n        }\n\n        if (!pointChildKey || !startChildKey) {\n          break\n        }\n\n        for (const child of block.children) {\n          if (child._key === pointChildKey) {\n            if (child._key !== startChildKey) {\n              before = true\n              break\n            }\n\n            // Both the point and the selection start in this child\n\n            before = point.offset < selection.anchor.offset\n            break\n          }\n\n          if (child._key === startChildKey) {\n            break\n          }\n        }\n      }\n\n      if (block._key === startBlockKey) {\n        break\n      }\n    }\n\n    return before\n  }\n}\n","import type {EditorSelection} from '../types/editor'\nimport {isEqualSelectionPoints} from '../utils'\nimport type {EditorSelector} from './../editor/editor-selector'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {isPointAfterSelection} from './selector.is-point-after-selection'\nimport {isPointBeforeSelection} from './selector.is-point-before-selection'\n\n/**\n * @public\n */\nexport function isOverlappingSelection(\n  selection: EditorSelection,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!selection || !snapshot.context.selection) {\n      return false\n    }\n\n    const selectionStartPoint = getSelectionStartPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n    const selectionEndPoint = getSelectionEndPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n\n    const originalSelectionStartPoint = getSelectionStartPoint(snapshot)\n    const originalSelectionEndPoint = getSelectionEndPoint(snapshot)\n\n    if (\n      !selectionStartPoint ||\n      !selectionEndPoint ||\n      !originalSelectionStartPoint ||\n      !originalSelectionEndPoint\n    ) {\n      return false\n    }\n\n    const startPointBeforeSelection =\n      isPointBeforeSelection(selectionStartPoint)(snapshot)\n    const startPointAfterSelection =\n      isPointAfterSelection(selectionStartPoint)(snapshot)\n    const endPointBeforeSelection =\n      isPointBeforeSelection(selectionEndPoint)(snapshot)\n    const endPointAfterSelection =\n      isPointAfterSelection(selectionEndPoint)(snapshot)\n\n    const originalStartPointBeforeStartPoint = isPointBeforeSelection(\n      originalSelectionStartPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint,\n        },\n      },\n    })\n    const originalStartPointAfterStartPoint = isPointAfterSelection(\n      originalSelectionStartPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint,\n        },\n      },\n    })\n\n    const originalEndPointBeforeEndPoint = isPointBeforeSelection(\n      originalSelectionEndPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint,\n        },\n      },\n    })\n    const originalEndPointAfterEndPoint = isPointAfterSelection(\n      originalSelectionEndPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint,\n        },\n      },\n    })\n\n    const endPointEqualToOriginalStartPoint = isEqualSelectionPoints(\n      selectionEndPoint,\n      originalSelectionStartPoint,\n    )\n    const startPointEqualToOriginalEndPoint = isEqualSelectionPoints(\n      selectionStartPoint,\n      originalSelectionEndPoint,\n    )\n\n    if (endPointBeforeSelection && !endPointEqualToOriginalStartPoint) {\n      return false\n    }\n\n    if (startPointAfterSelection && !startPointEqualToOriginalEndPoint) {\n      return false\n    }\n\n    if (\n      !originalStartPointBeforeStartPoint &&\n      originalStartPointAfterStartPoint &&\n      !originalEndPointBeforeEndPoint &&\n      originalEndPointAfterEndPoint\n    ) {\n      return !endPointEqualToOriginalStartPoint\n    }\n\n    if (\n      originalStartPointBeforeStartPoint &&\n      !originalStartPointAfterStartPoint &&\n      originalEndPointBeforeEndPoint &&\n      !originalEndPointAfterEndPoint\n    ) {\n      return !startPointEqualToOriginalEndPoint\n    }\n\n    if (\n      !startPointAfterSelection ||\n      !startPointBeforeSelection ||\n      !endPointAfterSelection ||\n      !endPointBeforeSelection\n    ) {\n      return true\n    }\n\n    return false\n  }\n}\n"],"names":["isSelectionCollapsed","snapshot","context","selection","JSON","stringify","anchor","path","focus","offset","createGuards","schema","isListBlock","block","isPortableTextListBlock","_type","name","isTextBlock","isPortableTextTextBlock","getFocusBlock","key","isKeySegment","_key","undefined","node","value","find","getFocusListBlock","guards","focusBlock","getFocusTextBlock","getFocusBlockObject","getFocusChild","children","span","getFocusSpan","focusChild","isPortableTextSpan","getFirstBlock","getLastBlock","length","getSelectedBlocks","selectedBlocks","startKey","backward","endKey","push","getSelectionStartBlock","getSelectionEndBlock","getPreviousBlock","previousBlock","selectionStartBlock","foundSelectionStartBlock","getNextBlock","nextBlock","selectionEndBlock","foundSelectionEndBlock","getSelectionEndPoint","getSelectionStartPoint","getNextInlineObject","focusTextBlock","selectionEndPoint","selectionEndPointChildKey","endPointChildFound","inlineObject","child","isSpan","getPreviousInlineObject","selectionStartPoint","selectionStartPointChildKey","getSelectedSlice","sliceBlocks","blocks","getSelectionText","reduce","text","isSelectionExpanded","getCaretWordSelection","selectionStartOffset","spanSelectionPointToBlockOffset","selectionPoint","previousInlineObject","blockStartPoint","getBlockStartPoint","textDirectlyBefore","split","at","nextInlineObject","blockEndPoint","getBlockEndPoint","textDirectlyAfter","caretWordStartOffset","caretWordEndOffset","caretWordStartSelectionPoint","blockOffsetToSpanSelectionPoint","blockOffset","direction","caretWordEndSelectionPoint","caretWordSelection","isAtTheEndOfBlock","utils","isAtTheStartOfBlock","isPointAfterSelection","point","reverseSelection","pointBlockKey","pointChildKey","endBlockKey","endChildKey","after","isPointBeforeSelection","startBlockKey","startChildKey","before","isOverlappingSelection","originalSelectionStartPoint","originalSelectionEndPoint","startPointBeforeSelection","startPointAfterSelection","endPointBeforeSelection","endPointAfterSelection","originalStartPointBeforeStartPoint","originalStartPointAfterStartPoint","originalEndPointBeforeEndPoint","originalEndPointAfterEndPoint","endPointEqualToOriginalStartPoint","isEqualSelectionPoints","startPointEqualToOriginalEndPoint"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"debugId":null}},
    {"offset": {"line": 974, "column": 0}, "map": {"version":3,"file":"selector.is-selecting-entire-blocks.js","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-spans.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.get-active-annotations.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.get-active-list-item.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.get-active-style.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-text-blocks.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.get-trimmed-selection.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.is-active-annotation.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.is-active-decorator.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.is-active-list-item.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.is-active-style.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.is-selecting-entire-blocks.ts"],"sourcesContent":["import {\n  isKeySegment,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextSpan,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getSelectedSpans: EditorSelector<\n  Array<{\n    node: PortableTextSpan\n    path: [KeyedSegment, 'children', KeyedSegment]\n  }>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedSpans: Array<{\n    node: PortableTextSpan\n    path: [KeyedSegment, 'children', KeyedSegment]\n  }> = []\n\n  const startPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n  const endPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n\n  const startBlockKey = isKeySegment(startPoint.path[0])\n    ? startPoint.path[0]._key\n    : undefined\n  const endBlockKey = isKeySegment(endPoint.path[0])\n    ? endPoint.path[0]._key\n    : undefined\n\n  if (!startBlockKey || !endBlockKey) {\n    return selectedSpans\n  }\n\n  const startSpanKey = isKeySegment(startPoint.path[2])\n    ? startPoint.path[2]._key\n    : undefined\n  const endSpanKey = isKeySegment(endPoint.path[2])\n    ? endPoint.path[2]._key\n    : undefined\n\n  let startBlockFound = false\n\n  for (const block of snapshot.context.value) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    if (block._key === startBlockKey) {\n      for (const child of block.children) {\n        if (!isPortableTextSpan(child)) {\n          continue\n        }\n\n        if (startSpanKey && child._key === startSpanKey) {\n          if (startPoint.offset < child.text.length) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n\n          if (startSpanKey === endSpanKey) {\n            break\n          }\n\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        if (selectedSpans.length > 0) {\n          selectedSpans.push({\n            node: child,\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n          })\n        }\n      }\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n\n      continue\n    }\n\n    if (block._key === endBlockKey) {\n      for (const child of block.children) {\n        if (!isPortableTextSpan(child)) {\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n\n      break\n    }\n\n    if (startBlockFound) {\n      for (const child of block.children) {\n        if (!isPortableTextSpan(child)) {\n          continue\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n    }\n  }\n\n  return selectedSpans\n}\n","import {isPortableTextTextBlock, type PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {getFocusSpan, getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport const getActiveAnnotations: EditorSelector<Array<PortableTextObject>> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot)\n  const selectedSpans = getSelectedSpans(snapshot)\n  const focusSpan = getFocusSpan(snapshot)\n\n  if (selectedSpans.length === 0 || !focusSpan) {\n    return []\n  }\n\n  if (selectedSpans.length === 1 && isSelectionCollapsed(snapshot)) {\n    if (snapshot.context.selection.focus.offset === 0) {\n      return []\n    }\n    if (\n      snapshot.context.selection.focus.offset === focusSpan.node.text.length\n    ) {\n      return []\n    }\n  }\n\n  const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n    isPortableTextTextBlock(block.node) ? (block.node.markDefs ?? []) : [],\n  )\n\n  return selectionMarkDefs.filter((markDef) =>\n    selectedSpans.some((span) => span.node.marks?.includes(markDef._key)),\n  )\n}\n","import type {PortableTextListBlock} from '@sanity/types'\nimport {createGuards} from '../behavior-actions/behavior.guards'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport const getActiveListItem: EditorSelector<\n  PortableTextListBlock['listItem'] | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const guards = createGuards(snapshot.context)\n  const selectedBlocks = getSelectedBlocks(snapshot).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter(guards.isTextBlock)\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstListItem = firstTextBlock.listItem\n\n  if (!firstListItem) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.listItem === firstListItem)) {\n    return firstListItem\n  }\n\n  return undefined\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport {createGuards} from '../behavior-actions/behavior.guards'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport const getActiveStyle: EditorSelector<PortableTextTextBlock['style']> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const guards = createGuards(snapshot.context)\n  const selectedBlocks = getSelectedBlocks(snapshot).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter(guards.isTextBlock)\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstStyle = firstTextBlock.style\n\n  if (!firstStyle) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.style === firstStyle)) {\n    return firstStyle\n  }\n\n  return undefined\n}\n","import type {KeyedSegment, PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {isKeyedSegment} from '../utils'\n\n/**\n * @public\n */\nexport const getSelectedTextBlocks: EditorSelector<\n  Array<{node: PortableTextTextBlock; path: [KeyedSegment]}>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedTextBlocks: Array<{\n    node: PortableTextTextBlock\n    path: [KeyedSegment]\n  }> = []\n  const startKey = snapshot.context.selection.backward\n    ? isKeyedSegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n    : isKeyedSegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n  const endKey = snapshot.context.selection.backward\n    ? isKeyedSegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n    : isKeyedSegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n\n  if (!startKey || !endKey) {\n    return selectedTextBlocks\n  }\n\n  for (const block of snapshot.context.value) {\n    if (block._key === startKey) {\n      if (isTextBlock(snapshot.context.schema, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n\n      if (startKey === endKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endKey) {\n      if (isTextBlock(snapshot.context.schema, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n\n      break\n    }\n\n    if (selectedTextBlocks.length > 0) {\n      if (isTextBlock(snapshot.context.schema, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n    }\n  }\n\n  return selectedTextBlocks\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextSpan,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\nimport {isEmptyTextBlock, isKeyedSegment} from '../utils'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {getFocusTextBlock} from './selectors'\n\n/**\n * @public\n */\nexport const getTrimmedSelection: EditorSelector<EditorSelection> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return snapshot.context.selection\n  }\n\n  const startPoint = getSelectionStartPoint(snapshot)\n  const endPoint = getSelectionEndPoint(snapshot)\n\n  if (!startPoint || !endPoint) {\n    return snapshot.context.selection\n  }\n\n  const startBlockKey = isKeyedSegment(startPoint.path[0])\n    ? startPoint.path[0]._key\n    : null\n  const startChildKey = isKeyedSegment(startPoint.path[2])\n    ? startPoint.path[2]._key\n    : null\n  const endBlockKey = isKeyedSegment(endPoint.path[0])\n    ? endPoint.path[0]._key\n    : null\n  const endChildKey = isKeyedSegment(endPoint.path[2])\n    ? endPoint.path[2]._key\n    : null\n\n  if (!startBlockKey || !endBlockKey) {\n    return snapshot.context.selection\n  }\n\n  let startBlockFound = false\n  let adjustedStartPoint: EditorSelectionPoint | undefined\n  let trimStartPoint = false\n  let adjustedEndPoint: EditorSelectionPoint | undefined\n  let trimEndPoint = false\n  let previousPotentialEndpoint:\n    | {blockKey: string; span: PortableTextSpan}\n    | undefined\n\n  for (const block of snapshot.context.value) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n\n      if (isPortableTextTextBlock(block) && isEmptyTextBlock(block)) {\n        continue\n      }\n    }\n\n    if (!startBlockFound) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    if (block._key === endBlockKey && isEmptyTextBlock(block)) {\n      break\n    }\n\n    for (const child of block.children) {\n      if (child._key === endChildKey) {\n        if (!isPortableTextSpan(child) || endPoint.offset === 0) {\n          adjustedEndPoint = previousPotentialEndpoint\n            ? {\n                path: [\n                  {_key: previousPotentialEndpoint.blockKey},\n                  'children',\n                  {_key: previousPotentialEndpoint.span._key},\n                ],\n                offset: previousPotentialEndpoint.span.text.length,\n              }\n            : undefined\n\n          trimEndPoint = true\n          break\n        }\n      }\n\n      if (trimStartPoint) {\n        const lonelySpan =\n          isPortableTextSpan(child) && block.children.length === 1\n\n        if (\n          (isPortableTextSpan(child) && child.text.length > 0) ||\n          lonelySpan\n        ) {\n          adjustedStartPoint = {\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n            offset: 0,\n          }\n          previousPotentialEndpoint = {blockKey: block._key, span: child}\n          trimStartPoint = false\n        }\n\n        continue\n      }\n\n      if (child._key === startChildKey) {\n        if (!isPortableTextSpan(child)) {\n          trimStartPoint = true\n          continue\n        }\n\n        if (startPoint.offset === child.text.length) {\n          trimStartPoint = true\n          previousPotentialEndpoint =\n            child.text.length > 0\n              ? {blockKey: block._key, span: child}\n              : previousPotentialEndpoint\n          continue\n        }\n      }\n\n      previousPotentialEndpoint =\n        isPortableTextSpan(child) && child.text.length > 0\n          ? {blockKey: block._key, span: child}\n          : previousPotentialEndpoint\n    }\n\n    if (block._key === endBlockKey) {\n      break\n    }\n  }\n\n  const trimmedSelection = snapshot.context.selection.backward\n    ? {\n        anchor: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n        focus: adjustedStartPoint ?? startPoint,\n        backward: true,\n      }\n    : {\n        anchor: adjustedStartPoint ?? startPoint,\n        focus: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n      }\n\n  if (\n    isSelectionCollapsed({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection,\n      },\n    })\n  ) {\n    const focusTextBlock = getFocusTextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection,\n      },\n    })\n\n    if (focusTextBlock && !isEmptyTextBlock(focusTextBlock.node)) {\n      return null\n    }\n  }\n\n  return trimmedSelection\n}\n","import {isPortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\nimport {getFocusSpan, getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport function isActiveAnnotation(\n  annotation: string,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const selectedBlocks = getSelectedBlocks(snapshot)\n    const focusSpan = getFocusSpan(snapshot)\n\n    const selectedSpans = isSelectionExpanded(snapshot)\n      ? getSelectedSpans(snapshot)\n      : focusSpan\n        ? [focusSpan]\n        : []\n\n    if (selectedSpans.length === 0) {\n      return false\n    }\n\n    if (\n      selectedSpans.some(\n        (span) => !span.node.marks || span.node.marks?.length === 0,\n      )\n    ) {\n      return false\n    }\n\n    const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n      isPortableTextTextBlock(block.node) ? (block.node.markDefs ?? []) : [],\n    )\n\n    return selectedSpans.every((span) => {\n      const spanMarkDefs =\n        span.node.marks?.flatMap((mark) => {\n          const markDef = selectionMarkDefs.find(\n            (markDef) => markDef._key === mark,\n          )\n\n          return markDef ? [markDef._type] : []\n        }) ?? []\n\n      return spanMarkDefs.includes(annotation)\n    })\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\n\n/**\n * @public\n */\nexport function isActiveDecorator(decorator: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (isSelectionExpanded(snapshot)) {\n      const selectedSpans = getSelectedSpans(snapshot)\n\n      return (\n        selectedSpans.length > 0 &&\n        selectedSpans.every((span) => span.node.marks?.includes(decorator))\n      )\n    }\n\n    return snapshot.context.activeDecorators.includes(decorator)\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveListItem} from './selector.get-active-list-item'\n\n/**\n * @public\n */\nexport function isActiveListItem(listItem: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeListItem = getActiveListItem(snapshot)\n\n    return activeListItem === listItem\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveStyle} from './selector.get-active-style'\n\n/**\n * @public\n */\nexport function isActiveStyle(style: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeStyle = getActiveStyle(snapshot)\n\n    return activeStyle === style\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {getSelectionEndBlock, getSelectionStartBlock} from './selectors'\n\n/**\n * @public\n */\nexport const isSelectingEntireBlocks: EditorSelector<boolean> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return false\n  }\n\n  const startPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n  const endPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n\n  const startBlock = getSelectionStartBlock(snapshot)\n  const endBlock = getSelectionEndBlock(snapshot)\n\n  if (!startBlock || !endBlock) {\n    return false\n  }\n\n  const startBlockStartPoint = utils.getBlockStartPoint(startBlock)\n  const endBlockEndPoint = utils.getBlockEndPoint(endBlock)\n\n  return (\n    utils.isEqualSelectionPoints(startBlockStartPoint, startPoint) &&\n    utils.isEqualSelectionPoints(endBlockEndPoint, endPoint)\n  )\n}\n"],"names":["getSelectedSpans","snapshot","context","selection","selectedSpans","startPoint","backward","focus","anchor","endPoint","startBlockKey","isKeySegment","path","_key","undefined","endBlockKey","startSpanKey","endSpanKey","startBlockFound","block","value","isPortableTextTextBlock","child","children","isPortableTextSpan","offset","text","length","push","node","getActiveAnnotations","selectedBlocks","getSelectedBlocks","focusSpan","getFocusSpan","isSelectionCollapsed","flatMap","markDefs","filter","markDef","some","span","marks","includes","getActiveListItem","guards","createGuards","selectedTextBlocks","map","isTextBlock","firstTextBlock","at","firstListItem","listItem","every","getActiveStyle","firstStyle","style","getSelectedTextBlocks","startKey","isKeyedSegment","endKey","schema","getTrimmedSelection","getSelectionStartPoint","getSelectionEndPoint","startChildKey","endChildKey","adjustedStartPoint","trimStartPoint","adjustedEndPoint","trimEndPoint","previousPotentialEndpoint","isEmptyTextBlock","blockKey","lonelySpan","trimmedSelection","focusTextBlock","getFocusTextBlock","isActiveAnnotation","annotation","isSelectionExpanded","selectionMarkDefs","mark","find","_type","isActiveDecorator","decorator","activeDecorators","isActiveListItem","isActiveStyle","isSelectingEntireBlocks","startBlock","getSelectionStartBlock","endBlock","getSelectionEndBlock","startBlockStartPoint","utils","endBlockEndPoint"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10],"debugId":null}},
    {"offset": {"line": 1288, "column": 0}, "map": {"version":3,"file":"util.get-selection-start-point.js","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.get-selection-end-point.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.get-selection-start-point.ts"],"sourcesContent":["import type {EditorSelection, EditorSelectionPoint} from '..'\n\n/**\n * @public\n */\nexport function getSelectionEndPoint<\n  TEditorSelection extends NonNullable<EditorSelection> | null,\n  TEditorSelectionPoint extends\n    EditorSelectionPoint | null = TEditorSelection extends NonNullable<EditorSelection>\n    ? EditorSelectionPoint\n    : null,\n>(selection: TEditorSelection): TEditorSelectionPoint {\n  if (!selection) {\n    return null as TEditorSelectionPoint\n  }\n\n  return (\n    selection.backward ? selection.anchor : selection.focus\n  ) as TEditorSelectionPoint\n}\n","import type {EditorSelection, EditorSelectionPoint} from '..'\n\n/**\n * @public\n */\nexport function getSelectionStartPoint<\n  TEditorSelection extends NonNullable<EditorSelection> | null,\n  TEditorSelectionPoint extends\n    EditorSelectionPoint | null = TEditorSelection extends NonNullable<EditorSelection>\n    ? EditorSelectionPoint\n    : null,\n>(selection: TEditorSelection): TEditorSelectionPoint {\n  if (!selection) {\n    return null as TEditorSelectionPoint\n  }\n\n  return (\n    selection.backward ? selection.focus : selection.anchor\n  ) as TEditorSelectionPoint\n}\n"],"names":["getSelectionEndPoint","selection","backward","anchor","focus","getSelectionStartPoint"],"mappings":";;;;AAKO,SAASA,qBAMdC,SAAAA,EAAoD;IACpD,OAAKA,YAKHA,UAAUC,QAAAA,GAAWD,UAAUE,MAAAA,GAASF,UAAUG,KAAAA,GAJ3C;AAMX;ACdO,SAASC,uBAMdJ,SAAAA,EAAoD;IACpD,OAAKA,YAKHA,UAAUC,QAAAA,GAAWD,UAAUG,KAAAA,GAAQH,UAAUE,MAAAA,GAJ1C;AAMX","ignoreList":[0,1],"debugId":null}},
    {"offset": {"line": 1306, "column": 0}, "map": {"version":3,"file":"behavior.core.js","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.types.action.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.types.behavior.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.core.annotations.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/is-hotkey.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.core.block-objects.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.core.decorators.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.core.dnd.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.core.insert-break.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.core.lists.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.core.ts"],"sourcesContent":["import type {EditorSnapshot} from '../editor/editor-snapshot'\nimport type {PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {\n  AbstractBehaviorEvent,\n  CustomBehaviorEvent,\n  SyntheticBehaviorEvent,\n} from './behavior.types.event'\n\n/**\n * @beta\n */\nexport type BehaviorAction =\n  | {\n      type: 'execute'\n      event:\n        | AbstractBehaviorEvent\n        | SyntheticBehaviorEvent\n        | CustomBehaviorEvent\n    }\n  | {\n      type: 'raise'\n      event:\n        | AbstractBehaviorEvent\n        | SyntheticBehaviorEvent\n        | CustomBehaviorEvent\n    }\n  | {\n      type: 'noop'\n    }\n  | {\n      type: 'effect'\n      effect: () => void\n    }\n\n/**\n * @beta\n */\nexport function execute(\n  event: AbstractBehaviorEvent | SyntheticBehaviorEvent | CustomBehaviorEvent,\n): PickFromUnion<BehaviorAction, 'type', 'execute'> {\n  return {type: 'execute', event}\n}\n\n/**\n * @beta\n */\nexport function raise(\n  event: AbstractBehaviorEvent | SyntheticBehaviorEvent | CustomBehaviorEvent,\n): PickFromUnion<BehaviorAction, 'type', 'raise'> {\n  return {type: 'raise', event}\n}\n\n/**\n * @beta\n */\nexport function effect(\n  effect: () => void,\n): PickFromUnion<BehaviorAction, 'type', 'effect'> {\n  return {type: 'effect', effect}\n}\n\n/**\n * @beta\n */\nexport function noop(): PickFromUnion<BehaviorAction, 'type', 'noop'> {\n  return {type: 'noop'}\n}\n\n/**\n * @beta\n */\nexport type BehaviorActionSet<TBehaviorEvent, TGuardResponse> = (\n  payload: {\n    snapshot: EditorSnapshot\n    event: TBehaviorEvent\n  },\n  guardResponse: TGuardResponse,\n) => Array<BehaviorAction>\n\nexport type InternalBehaviorAction = (\n  | SyntheticBehaviorEvent\n  | {type: 'noop'}\n  | {type: 'effect'; effect: () => void}\n) & {\n  editor: PortableTextSlateEditor\n}\n","import type {BehaviorActionSet} from './behavior.types.action'\nimport type {\n  BehaviorEvent,\n  BehaviorEventTypeNamespace,\n  CustomBehaviorEvent,\n  ResolveBehaviorEvent,\n} from './behavior.types.event'\nimport type {BehaviorGuard} from './behavior.types.guard'\n\n/**\n * @beta\n */\nexport type Behavior<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] =\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TGuardResponse = true,\n  TBehaviorEvent extends\n    ResolveBehaviorEvent<TBehaviorEventType> = ResolveBehaviorEvent<TBehaviorEventType>,\n> = {\n  /**\n   * Editor Event that triggers this Behavior.\n   */\n  on: TBehaviorEventType\n  /**\n   * Predicate function that determines if the Behavior should be executed.\n   * Returning a non-nullable value from the guard will pass the value to the\n   * actions and execute them.\n   */\n  guard?: BehaviorGuard<TBehaviorEvent, TGuardResponse>\n  /**\n   * Array of Behavior Action sets.\n   * Each set represents a step in the history stack.\n   */\n  actions: Array<BehaviorActionSet<TBehaviorEvent, TGuardResponse>>\n}\n\n/**\n * @beta\n *\n * @example\n *\n * ```tsx\n * const noLowerCaseA = defineBehavior({\n *   on: 'insert.text',\n *   guard: ({event, snapshot}) => event.text === 'a',\n *   actions: [({event, snapshot}) => [{type: 'insert.text', text: 'A'}]],\n * })\n * ```\n *\n */\nexport function defineBehavior<\n  TPayload extends Record<string, unknown>,\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] = CustomBehaviorEvent['type'],\n  TGuardResponse = true,\n>(\n  behavior: Behavior<\n    TBehaviorEventType,\n    TGuardResponse,\n    ResolveBehaviorEvent<TBehaviorEventType, TPayload>\n  >,\n): Behavior\nexport function defineBehavior<\n  TPayload extends never = never,\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n  TBehaviorEvent extends ResolveBehaviorEvent<\n    TBehaviorEventType,\n    TPayload\n  > = ResolveBehaviorEvent<TBehaviorEventType, TPayload>,\n>(\n  behavior: Behavior<TBehaviorEventType, TGuardResponse, TBehaviorEvent>,\n): Behavior {\n  return behavior as unknown as Behavior\n}\n","import * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst addAnnotationOnCollapsedSelection = defineBehavior({\n  on: 'annotation.add',\n  guard: ({snapshot}) => {\n    if (!selectors.isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const caretWordSelection = selectors.getCaretWordSelection(snapshot)\n\n    if (\n      !caretWordSelection ||\n      !selectors.isSelectionExpanded({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: caretWordSelection,\n        },\n      })\n    ) {\n      return false\n    }\n\n    return {caretWordSelection}\n  },\n  actions: [\n    ({event}, {caretWordSelection}) => [\n      raise({type: 'select', at: caretWordSelection}),\n      raise({type: 'annotation.add', annotation: event.annotation}),\n    ],\n  ],\n})\n\nexport const coreAnnotationBehaviors = {\n  addAnnotationOnCollapsedSelection,\n}\n","export interface KeyboardEventLike {\n  key: string\n  keyCode?: number\n  altKey: boolean\n  ctrlKey: boolean\n  metaKey: boolean\n  shiftKey: boolean\n}\n\ninterface HotKey {\n  keyCode?: number | undefined\n  key?: string | undefined\n  altKey: boolean | null\n  ctrlKey: boolean | null\n  metaKey: boolean | null\n  shiftKey: boolean | null\n}\n\nconst IS_MAC =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\ntype Modifier = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\nconst modifiers: Record<string, Modifier | undefined> = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n}\n\nconst aliases: Record<string, string | undefined> = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta',\n}\n\nconst keyCodes: Record<string, number | undefined> = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'escape': 27,\n  ' ': 32,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'arrowleft': 37,\n  'arrowup': 38,\n  'arrowright': 39,\n  'arrowdown': 40,\n  'insert': 45,\n  'delete': 46,\n  'meta': 91,\n  'numlock': 144,\n  'scrolllock': 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'f13': 124,\n  'f14': 125,\n  'f15': 126,\n  'f16': 127,\n  'f17': 128,\n  'f18': 129,\n  'f19': 130,\n  'f20': 131,\n}\n\nexport function isHotkey(hotkey: string, event: KeyboardEventLike): boolean {\n  return compareHotkey(parseHotkey(hotkey), event)\n}\n\nfunction parseHotkey(hotkey: string): HotKey {\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n  const parsedHotkey: HotKey = {\n    altKey: false,\n    ctrlKey: false,\n    metaKey: false,\n    shiftKey: false,\n  }\n\n  // Special case to handle the `+` key since we use it as a separator.\n  const hotkeySegments = hotkey.replace('++', '+add').split('+')\n\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional =\n      rawHotkeySegment.endsWith('?') && rawHotkeySegment.length > 1\n    const hotkeySegment = optional\n      ? rawHotkeySegment.slice(0, -1)\n      : rawHotkeySegment\n    const keyName = toKeyName(hotkeySegment)\n    const modifier = modifiers[keyName]\n    const alias = aliases[hotkeySegment]\n    const code = keyCodes[keyName]\n\n    if (\n      hotkeySegment.length > 1 &&\n      modifier === undefined &&\n      alias === undefined &&\n      code === undefined\n    ) {\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`)\n    }\n\n    if (hotkeySegments.length === 1 || modifier === undefined) {\n      parsedHotkey.key = keyName\n      parsedHotkey.keyCode = toKeyCode(hotkeySegment)\n    }\n\n    if (modifier !== undefined) {\n      parsedHotkey[modifier] = optional ? null : true\n    }\n  }\n\n  return parsedHotkey\n}\n\nfunction compareHotkey(\n  parsedHotkey: HotKey,\n  event: KeyboardEventLike,\n): boolean {\n  const matchingModifiers =\n    (parsedHotkey.altKey != null\n      ? parsedHotkey.altKey === event.altKey\n      : true) &&\n    (parsedHotkey.ctrlKey != null\n      ? parsedHotkey.ctrlKey === event.ctrlKey\n      : true) &&\n    (parsedHotkey.metaKey != null\n      ? parsedHotkey.metaKey === event.metaKey\n      : true) &&\n    (parsedHotkey.shiftKey != null\n      ? parsedHotkey.shiftKey === event.shiftKey\n      : true)\n\n  if (!matchingModifiers) {\n    return false\n  }\n\n  if (parsedHotkey.keyCode !== undefined && event.keyCode !== undefined) {\n    if (parsedHotkey.keyCode === 91 && event.keyCode === 93) {\n      return true\n    }\n\n    return parsedHotkey.keyCode === event.keyCode\n  }\n\n  return (\n    parsedHotkey.keyCode === event.keyCode ||\n    parsedHotkey.key === event.key.toLowerCase()\n  )\n}\n\nfunction toKeyCode(name: string): number {\n  const keyName = toKeyName(name)\n  const keyCode = keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0)\n\n  return keyCode\n}\n\nfunction toKeyName(name: string): string {\n  const keyName = name.toLowerCase()\n\n  return aliases[keyName] ?? keyName\n}\n","import {isPortableTextTextBlock} from '@sanity/types'\nimport {isHotkey} from '../internal-utils/is-hotkey'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst arrowDownOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowDown = isHotkey('ArrowDown', event.originEvent)\n\n    if (!isArrowDown) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    return focusBlockObject && !nextBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst arrowUpOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowUp = isHotkey('ArrowUp', event.originEvent)\n\n    if (!isArrowUp) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    return focusBlockObject && !previousBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n      }),\n    ],\n  ],\n})\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    return collapsedSelection && focusBlockObject !== undefined\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst clickingAboveLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const previousBlock = selectors.getPreviousBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'start' &&\n      focusBlockObject &&\n      !previousBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst clickingBelowLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const nextBlock = selectors.getNextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'end' &&\n      focusBlockObject &&\n      !nextBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(focusTextBlock.node) &&\n      !isPortableTextTextBlock(previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete.forward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(focusTextBlock.node) &&\n      !isPortableTextTextBlock(nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  clickingAboveLonelyBlockObject,\n  clickingBelowLonelyBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDecoratorBehaviors = {\n  strongShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+b', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'strong',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'strong'})]],\n  }),\n  emShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+i', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'em',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'em'})]],\n  }),\n  underlineShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+u', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'underline',\n      ),\n    actions: [\n      () => [raise({type: 'decorator.toggle', decorator: 'underline'})],\n    ],\n  }),\n  codeShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey(\"mod+'\", event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'code',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'code'})]],\n  }),\n}\n","import * as selectors from '../selectors'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDndBehaviors = [\n  /**\n   * When dragging over the drag origin, we don't want to show the caret in the\n   * text.\n   */\n  defineBehavior({\n    on: 'drag.dragover',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = snapshot.beta.internalDrag?.origin\n      const draggingOverDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(event.position.selection)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      return draggingOverDragOrigin\n    },\n    actions: [() => [{type: 'noop'}]],\n  }),\n]\n","import * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst breakingAtTheEndOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const atTheEndOfBlock =\n      selectors.isAtTheEndOfBlock(focusTextBlock)(snapshot)\n\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    if (atTheEndOfBlock) {\n      return {focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {focusListItem, focusLevel}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n          markDefs: [],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst breakingAtTheStartOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    const focusDecorators = focusSpan?.node.marks?.filter(\n      (mark) =>\n        snapshot.context.schema.decorators.some(\n          (decorator) => decorator.name === mark,\n        ) ?? [],\n    )\n    const focusAnnotations =\n      focusSpan?.node.marks?.filter(\n        (mark) =>\n          !snapshot.context.schema.decorators.some(\n            (decorator) => decorator.name === mark,\n          ),\n      ) ?? []\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    const atTheStartOfBlock =\n      selectors.isAtTheStartOfBlock(focusTextBlock)(snapshot)\n\n    if (atTheStartOfBlock) {\n      return {focusAnnotations, focusDecorators, focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    (\n      {snapshot},\n      {focusAnnotations, focusDecorators, focusListItem, focusLevel},\n    ) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              marks: focusAnnotations.length === 0 ? focusDecorators : [],\n              text: '',\n            },\n          ],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'before',\n        select: 'none',\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireDocument = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const firstBlock = selectors.getFirstBlock(snapshot)\n    const lastBlock = selectors.getLastBlock(snapshot)\n\n    if (!firstBlock || !lastBlock) {\n      return false\n    }\n\n    const firstBlockStartPoint = utils.getBlockStartPoint(firstBlock)\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const lastBlockEndPoint = utils.getBlockEndPoint(lastBlock)\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(firstBlockStartPoint, selectionStartPoint) &&\n      utils.isEqualSelectionPoints(lastBlockEndPoint, selectionEndPoint)\n    ) {\n      return {selection: snapshot.context.selection}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selection}) => [\n      raise({\n        type: 'delete',\n        at: selection,\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireBlocks = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return false\n    }\n\n    const startBlockStartPoint = utils.getBlockStartPoint(selectionStartBlock)\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const endBlockEndPoint = utils.getBlockEndPoint(selectionEndBlock)\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(selectionStartPoint, startBlockStartPoint) &&\n      utils.isEqualSelectionPoints(selectionEndPoint, endBlockEndPoint)\n    ) {\n      return {selectedBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {selectedBlocks}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n      ...selectedBlocks.map((block) =>\n        raise({\n          type: 'delete.block',\n          at: block.path,\n        }),\n      ),\n    ],\n  ],\n})\n\nexport const coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n  breakingEntireDocument,\n  breakingEntireBlocks,\n}\n","import {createGuards} from '../behavior-actions/behavior.guards'\nimport {isHotkey} from '../internal-utils/is-hotkey'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst MAX_LIST_LEVEL = 10\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (atTheBeginningOfBLock && focusTextBlock.node.level === 1) {\n      return {focusTextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      raise({\n        type: 'block.set',\n        props: {level},\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst clearListOnEnter = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (\n      !selectionCollapsed ||\n      !focusListBlock ||\n      !isEmptyTextBlock(focusListBlock.node)\n    ) {\n      return false\n    }\n\n    return {focusListBlock}\n  },\n  actions: [\n    (_, {focusListBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusListBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst indentListOnTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isTab = isHotkey('Tab', event.originEvent)\n\n    if (!isTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const guards = createGuards(snapshot.context)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      guards.isListBlock(block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level + 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nconst unindentListOnShiftTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isShiftTab = isHotkey('Shift+Tab', event.originEvent)\n\n    if (!isShiftTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const guards = createGuards(snapshot.context)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      guards.isListBlock(block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level - 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nexport const coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n}\n","import {coreAnnotationBehaviors} from './behavior.core.annotations'\nimport {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreDndBehaviors} from './behavior.core.dnd'\nimport {coreInsertBreakBehaviors} from './behavior.core.insert-break'\nimport {coreListBehaviors} from './behavior.core.lists'\n\n/**\n * @beta\n */\nexport const coreBehaviors = [\n  coreAnnotationBehaviors.addAnnotationOnCollapsedSelection,\n  coreDecoratorBehaviors.strongShortcut,\n  coreDecoratorBehaviors.emShortcut,\n  coreDecoratorBehaviors.underlineShortcut,\n  coreDecoratorBehaviors.codeShortcut,\n  ...coreDndBehaviors,\n  coreBlockObjectBehaviors.clickingAboveLonelyBlockObject,\n  coreBlockObjectBehaviors.clickingBelowLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n  coreListBehaviors.clearListOnEnter,\n  coreListBehaviors.indentListOnTab,\n  coreListBehaviors.unindentListOnShiftTab,\n  coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock,\n  coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock,\n  coreInsertBreakBehaviors.breakingEntireDocument,\n  coreInsertBreakBehaviors.breakingEntireBlocks,\n]\n"],"names":["execute","event","type","raise","effect","noop","defineBehavior","behavior","addAnnotationOnCollapsedSelection","on","guard","snapshot","selectors","caretWordSelection","context","selection","actions","at","annotation","coreAnnotationBehaviors","IS_MAC","window","test","navigator","userAgent","modifiers","alt","control","meta","shift","aliases","add","break","cmd","command","ctl","ctrl","del","down","esc","ins","left","mod","opt","option","return","right","space","spacebar","up","win","windows","keyCodes","isHotkey","hotkey","compareHotkey","parseHotkey","parsedHotkey","altKey","ctrlKey","metaKey","shiftKey","hotkeySegments","replace","split","rawHotkeySegment","optional","endsWith","length","hotkeySegment","slice","keyName","toKeyName","modifier","alias","code","undefined","TypeError","key","keyCode","toKeyCode","toLowerCase","name","toUpperCase","charCodeAt","arrowDownOnLonelyBlockObject","originEvent","focusBlockObject","nextBlock","block","_type","schema","placement","arrowUpOnLonelyBlockObject","previousBlock","breakingBlockObject","clickingAboveLonelyBlockObject","readOnly","position","isEditor","select","clickingBelowLonelyBlockObject","deletingEmptyTextBlockAfterBlockObject","focusTextBlock","selectionCollapsed","isEmptyTextBlock","node","isPortableTextTextBlock","_","path","anchor","offset","focus","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","coreDecoratorBehaviors","strongShortcut","decorators","some","decorator","emShortcut","underlineShortcut","codeShortcut","coreDndBehaviors","dragOrigin","beta","internalDrag","origin","breakingAtTheEndOfTextBlock","atTheEndOfBlock","focusListItem","listItem","focusLevel","level","children","span","text","marks","markDefs","style","styles","breakingAtTheStartOfTextBlock","focusSpan","focusDecorators","filter","mark","focusAnnotations","breakingEntireDocument","firstBlock","lastBlock","firstBlockStartPoint","utils","selectionStartPoint","lastBlockEndPoint","selectionEndPoint","breakingEntireBlocks","selectedBlocks","selectionStartBlock","selectionEndBlock","startBlockStartPoint","endBlockEndPoint","map","coreInsertBreakBehaviors","MAX_LIST_LEVEL","clearListOnBackspace","_key","props","unindentListOnBackspace","clearListOnEnter","focusListBlock","indentListOnTab","guards","createGuards","selectedListBlocks","flatMap","isListBlock","selectedListBlock","Math","min","max","unindentListOnShiftTab","coreListBehaviors","coreBehaviors"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9],"debugId":null}},
    {"offset": {"line": 2018, "column": 0}, "map": {"version":3,"file":"editor-provider.js","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/debug.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/values.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/weakMaps.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/mutation-machine.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/validateValue.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/withChanges.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/withoutPatching.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/node_modules/.pnpm/%40sanity%2Bdiff-match-patch%403.2.0/node_modules/%40sanity/diff-match-patch/dist/index.js","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/withUndoRedo.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/key-generator.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/with-applying-behavior-actions.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/plugins/createWithUndoRedo.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/sync-machine.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/components/Synchronizer.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/converters/converter.json.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/converters/converter.portable-text.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/converters/converter.text-html.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/converters/converter.text-plain.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/converters/converters.core.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/schema.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/operationToPatches.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert.text.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/node_modules/.pnpm/%40portabletext%2Btoolkit%402.0.17/node_modules/%40portabletext/toolkit/dist/index.js","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/sibling-utils.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextMarkModel.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.annotation.add.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.annotation.remove.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/paths.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/ranges.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.block.set.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.block.unset.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/slate-utils.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.decorator.add.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.delete.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.delete.backward.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.delete.block.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.delete.forward.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.effect.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-inline-object.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-span.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert.block.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.move.backward.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.move.block.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.move.forward.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.noop.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.select.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behavior-actions/behavior.actions.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/plugins/create-with-event-listeners.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/plugins/createWithMaxBlocks.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/plugins/createWithObjectKeys.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/applyPatch.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/plugins/createWithPatches.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/plugins/createWithPlaceholderBlock.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextBlockStyle.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextSelections.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/plugins/createWithSchemaTypes.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/plugins/createWithUtils.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/plugins/with-plugins.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/create-slate-editor.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/legacy-schema.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/editor-schema.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/slate-children-to-blocks.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/get-active-decorators.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/editor-selector.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/plugins/createWithEditableAPI.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/create-editor.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/editor-actor-context.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.annotation.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.decorator.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.delete.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.insert.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.list-item.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.move.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.select.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.split.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.style.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/key-is.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.default.raise-soft-break.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.default.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.types.event.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.perform-event.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/editor-snapshot.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/editor-machine.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditor.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditorSelection.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/PortableTextEditor.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/editor-provider.tsx"],"sourcesContent":["import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: EditorSchema},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: [\n                  {\n                    _key: VOID_CHILD_KEY,\n                    _type: 'span',\n                    text: '',\n                    marks: [],\n                  },\n                ],\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].name\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: [\n            {\n              _key: VOID_CHILD_KEY,\n              _type: 'span',\n              text: '',\n              marks: [],\n            },\n          ],\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: EditorSchema,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].name &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {Editor, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  fromCallback,\n  not,\n  setup,\n  stateIn,\n  type AnyEventObject,\n} from 'xstate'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingMutations: Array<{\n        actionId?: string\n        value: Array<PortableTextBlock> | undefined\n        patches: Array<Patch>\n      }>\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'patch'\n          patch: Patch\n          actionId?: string\n          value: Array<PortableTextBlock>\n        }\n      | {\n          type: 'typing'\n        }\n      | {\n          type: 'not typing'\n        },\n    input: {} as {\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        },\n  },\n  actions: {\n    'emit has pending patches': emit({type: 'has pending patches'}),\n    'emit mutations': enqueueActions(({context, enqueue}) => {\n      for (const bulk of context.pendingMutations) {\n        enqueue.emit({\n          type: 'mutation',\n          patches: bulk.patches,\n          snapshot: bulk.value,\n        })\n      }\n    }),\n    'clear pending mutations': assign({\n      pendingMutations: [],\n    }),\n    'defer patch': assign({\n      pendingMutations: ({context, event}) => {\n        assertEvent(event, 'patch')\n\n        if (context.pendingMutations.length === 0) {\n          return [\n            {\n              actionId: event.actionId,\n              value: event.value,\n              patches: [event.patch],\n            },\n          ]\n        }\n\n        const lastBulk = context.pendingMutations.at(-1)\n\n        if (lastBulk && lastBulk.actionId === event.actionId) {\n          return context.pendingMutations.slice(0, -1).concat({\n            value: event.value,\n            actionId: lastBulk.actionId,\n            patches: [...lastBulk.patches, event.patch],\n          })\n        }\n\n        return context.pendingMutations.concat({\n          value: event.value,\n          actionId: event.actionId,\n          patches: [event.patch],\n        })\n      },\n    }),\n  },\n  actors: {\n    'type listener': fromCallback<\n      AnyEventObject,\n      {slateEditor: PortableTextSlateEditor},\n      {type: 'typing'} | {type: 'not typing'}\n    >(({input, sendBack}) => {\n      const originalApply = input.slateEditor.apply\n\n      input.slateEditor.apply = (op) => {\n        if (op.type === 'insert_text' || op.type === 'remove_text') {\n          sendBack({type: 'typing'})\n        } else {\n          sendBack({type: 'not typing'})\n        }\n        originalApply(op)\n      }\n\n      return () => {\n        input.slateEditor.apply = originalApply\n      }\n    }),\n  },\n  guards: {\n    'is typing': stateIn({typing: 'typing'}),\n    'no pending mutations': ({context}) =>\n      context.pendingMutations.length === 0,\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n  delays: {\n    'mutation debounce': process.env.NODE_ENV === 'test' ? 250 : 0,\n    'type debounce': process.env.NODE_ENV === 'test' ? 0 : 250,\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingMutations: [],\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  type: 'parallel',\n  states: {\n    typing: {\n      initial: 'idle',\n      invoke: {\n        src: 'type listener',\n        input: ({context}) => ({slateEditor: context.slateEditor}),\n      },\n      states: {\n        idle: {\n          on: {\n            typing: {\n              target: 'typing',\n            },\n          },\n        },\n        typing: {\n          after: {\n            'type debounce': {\n              target: 'idle',\n            },\n          },\n          on: {\n            'not typing': {\n              target: 'idle',\n            },\n            'typing': {\n              target: 'typing',\n              reenter: true,\n            },\n          },\n        },\n      },\n    },\n    mutations: {\n      initial: 'idle',\n      states: {\n        'idle': {\n          on: {\n            patch: {\n              actions: ['defer patch', 'emit has pending patches'],\n              target: 'emitting mutations',\n            },\n          },\n        },\n        'emitting mutations': {\n          after: {\n            'mutation debounce': [\n              {\n                guard: and([not('is typing'), 'slate is normalizing']),\n                target: 'idle',\n                actions: ['emit mutations', 'clear pending mutations'],\n              },\n              {\n                target: 'emitting mutations',\n                reenter: true,\n              },\n            ],\n          },\n          on: {\n            patch: {\n              target: 'emitting mutations',\n              actions: ['defer patch'],\n              reenter: true,\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {InvalidValueResolution} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: EditorSchema,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isPortableTextTextBlock({...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.name).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches,\n  xIndex\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_ACTION_ID: WeakMap<Editor, string | undefined> = new WeakMap()\n\nexport function withApplyingBehaviorActions(editor: Editor, fn: () => void) {\n  CURRENT_ACTION_ID.set(editor, defaultKeyGenerator())\n  Editor.withoutNormalizing(editor, fn)\n  CURRENT_ACTION_ID.set(editor, undefined)\n}\n\nexport function getCurrentActionId(editor: Editor) {\n  return CURRENT_ACTION_ID.get(editor)\n}\n\nexport function isApplyingBehaviorActions(editor: Editor) {\n  return getCurrentActionId(editor) !== undefined\n}\n\n////////\n\nconst CURRENT_BEHAVIOR_ACTION_SET: WeakMap<\n  Editor,\n  {actionSetId: string} | undefined\n> = new WeakMap()\n\nexport function withApplyingBehaviorActionSet(editor: Editor, fn: () => void) {\n  const current = CURRENT_BEHAVIOR_ACTION_SET.get(editor)\n\n  if (current) {\n    fn()\n    return\n  }\n\n  CURRENT_BEHAVIOR_ACTION_SET.set(\n    editor,\n    current ?? {\n      actionSetId: defaultKeyGenerator(),\n    },\n  )\n  fn()\n  CURRENT_BEHAVIOR_ACTION_SET.set(editor, undefined)\n}\n\nexport function getCurrentBehaviorActionSetId(editor: Editor) {\n  return CURRENT_BEHAVIOR_ACTION_SET.get(editor)?.actionSetId\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getCurrentBehaviorActionSetId} from '../with-applying-behavior-actions'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      editorActor.getSnapshot().context.schema.block.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n    let previousBehaviorActionSetId = getCurrentBehaviorActionSetId(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n\n    const {apply} = editor\n\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      const currentBehaviorActionSetId = getCurrentBehaviorActionSetId(editor)\n\n      let merge =\n        currentBehaviorActionSetId !== undefined &&\n        previousBehaviorActionSetId === undefined\n          ? false\n          : currentBehaviorActionSetId !== undefined &&\n              previousBehaviorActionSetId !== undefined\n            ? currentBehaviorActionSetId === previousBehaviorActionSetId\n            : true\n\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge =\n            currentBehaviorActionSetId === undefined &&\n            previousBehaviorActionSetId === undefined\n              ? shouldMerge(op, lastOp) || overwrite\n              : merge\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n\n      previousBehaviorActionSetId = currentBehaviorActionSetId\n\n      apply(op)\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\nexport const historyUndoActionImplementation: BehaviorActionImplementation<\n  'history.undo'\n> = ({action}) => {\n  const editor = action.editor\n  const {undos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1]\n    debug('Undoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      const reversedOperations = transformedOperations\n        .map(Operation.inverse)\n        .reverse()\n\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform undo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsUndoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.redos.push(step)\n      editor.history.undos.pop()\n    }\n  }\n}\n\nexport const historyRedoActionImplementation: BehaviorActionImplementation<\n  'history.redo'\n> = ({action}) => {\n  const editor = action.editor\n  const {redos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1]\n    debug('Redoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform redo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsRedoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.undos.push(step)\n      editor.history.redos.pop()\n    }\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport {validateValue} from '../internal-utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../internal-utils/values'\nimport {\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../internal-utils/withChanges'\nimport {withoutPatching} from '../internal-utils/withoutPatching'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\nconst debug = debugWithName('sync machine')\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing initial value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing initial value': emit({\n      type: 'done syncing initial value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      const editable = !context.readOnly\n      const isProcessingLocalChanges = context.isProcessingLocalChanges\n      const isChanging = isChangingRemotely(context.slateEditor) ?? false\n      const isBusy = editable && (isProcessingLocalChanges || isChanging)\n\n      debug('isBusy', {isBusy, editable, isProcessingLocalChanges, isChanging})\n\n      return isBusy\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) => {\n      return isEqual(context.pendingValue, context.previousValue)\n    },\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  on: {\n    'has pending patches': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    'setting up': {\n      initial: 'syncing initial value',\n      states: {\n        'syncing initial value': {\n          entry: [\n            () => {\n              debug('entry: syncing initial value')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: syncing initial value')\n            },\n          ],\n          always: {\n            guard: 'initial value synced',\n            target: 'done syncing initial value',\n          },\n        },\n        'done syncing initial value': {\n          entry: [\n            'emit done syncing initial value',\n            () => {\n              debug('entry: done syncing initial value')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: done syncing initial value')\n            },\n          ],\n          type: 'final',\n        },\n      },\n    },\n    'syncing': {\n      initial: 'idle',\n      states: {\n        idle: {\n          entry: [\n            () => {\n              debug('entry: syncing->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: syncing->idle')\n            },\n          ],\n          on: {\n            'update value': [\n              {\n                guard: 'is busy',\n                target: 'busy',\n                actions: ['assign pending value'],\n              },\n              {\n                target: 'syncing',\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        busy: {\n          entry: [\n            () => {\n              debug('entry: syncing->busy')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: syncing->busy')\n            },\n          ],\n          after: {\n            1000: [\n              {\n                guard: 'is busy',\n                target: '.',\n                reenter: true,\n                actions: [\n                  () => {\n                    debug('reenter: syncing->busy')\n                  },\n                ],\n              },\n              {\n                target: 'syncing',\n              },\n            ],\n          },\n          on: {\n            'update value': [\n              {\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        syncing: {\n          entry: [\n            () => {\n              debug('entry: syncing->syncing')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: syncing->syncing')\n            },\n          ],\n          always: {\n            guard: 'pending value equals previous value',\n            target: 'idle',\n            actions: ['clear pending value', 'assign initial value synced'],\n          },\n          invoke: {\n            src: 'sync value',\n            id: 'sync value',\n            input: ({context}) => {\n              return {\n                context: {\n                  keyGenerator: context.keyGenerator,\n                  previousValue: context.previousValue,\n                  readOnly: context.readOnly,\n                  schema: context.schema,\n                },\n                slateEditor: context.slateEditor,\n                streamBlocks: !context.initialValueSynced,\n                value: context.pendingValue,\n              }\n            },\n          },\n          on: {\n            'update value': {\n              actions: ['assign pending value'],\n            },\n            'patch': {\n              actions: [emit(({event}) => event)],\n            },\n            'invalid value': {\n              actions: [emit(({event}) => event)],\n            },\n            'value changed': {\n              actions: [emit(({event}) => event)],\n            },\n            'done syncing': [\n              {\n                guard: 'value changed while syncing',\n                actions: [\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n                target: 'syncing',\n                reenter: true,\n              },\n              {\n                target: 'idle',\n                actions: [\n                  'clear pending value',\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (hadSelection) {\n            Transforms.deselect(slateEditor)\n          }\n          const childrenLength = slateEditor.children.length\n          slateEditor.children.forEach((_, index) => {\n            Transforms.removeNodes(slateEditor, {\n              at: [childrenLength - 1 - index],\n            })\n          })\n          Transforms.insertNodes(\n            slateEditor,\n            slateEditor.pteCreateTextBlock({decorators: []}),\n            {at: [0]},\n          )\n          // Add a new selection in the top of the document\n          if (hadSelection) {\n            Transforms.select(slateEditor, [0, 0])\n          }\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    await new Promise<void>((resolve) => {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, async () => {\n            const childrenLength = slateEditor.children.length\n\n            // Remove blocks that have become superfluous\n            if (slateValueFromProps.length < childrenLength) {\n              for (\n                let i = childrenLength - 1;\n                i > slateValueFromProps.length - 1;\n                i--\n              ) {\n                Transforms.removeNodes(slateEditor, {\n                  at: [i],\n                })\n              }\n              isChanged = true\n            }\n\n            for await (const [currentBlock, currentBlockIndex] of getBlocks({\n              slateValue: slateValueFromProps,\n              streamBlocks,\n            })) {\n              // Go through all of the blocks and see if they need to be updated\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index: currentBlockIndex,\n                slateEditor,\n                value,\n              })\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n            }\n\n            resolve()\n          })\n        })\n      })\n    })\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  sendBack({type: 'done syncing', value})\n}\n\nasync function* getBlocks({\n  slateValue,\n  streamBlocks,\n}: {\n  slateValue: Array<Descendant>\n  streamBlocks: boolean\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (streamBlocks && index % 10 === 0) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              if (oldBlockChild.text.length > 0) {\n                Transforms.delete(slateEditor, {\n                  at: {\n                    focus: {path, offset: 0},\n                    anchor: {path, offset: oldBlockChild.text.length},\n                  },\n                })\n              }\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {useEffect} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {mutationMachine} from '../mutation-machine'\nimport {syncMachine} from '../sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\n\n/**\n * @internal\n */\nexport interface SynchronizerProps {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const {editorActor, slateEditor} = props\n\n  const incomingValue = useSelector(\n    props.editorActor,\n    (s) => s.context.incomingValue,\n  )\n  const readOnly = useSelector(props.editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const syncActorRef = useActorRef(syncMachine, {\n    input: {\n      keyGenerator: props.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: props.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: props.editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n  const mutationActorRef = useActorRef(mutationMachine, {\n    input: {\n      schema: props.editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n\n  useEffect(() => {\n    const subscription = mutationActorRef.on('*', (event) => {\n      if (event.type === 'has pending patches') {\n        syncActorRef.send({type: 'has pending patches'})\n      }\n      if (event.type === 'mutation') {\n        syncActorRef.send({type: 'mutation'})\n        editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [mutationActorRef, syncActorRef, editorActor])\n\n  useEffect(() => {\n    const subscription = syncActorRef.on('*', (event) => {\n      switch (event.type) {\n        case 'invalid value':\n          props.editorActor.send({\n            ...event,\n            type: 'notify.invalid value',\n          })\n          break\n        case 'value changed':\n          props.editorActor.send({\n            ...event,\n            type: 'notify.value changed',\n          })\n          break\n        case 'patch':\n          props.editorActor.send({\n            ...event,\n            type: 'internal.patch',\n            value: fromSlateValue(\n              slateEditor.children,\n              props.editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(slateEditor),\n            ),\n          })\n          break\n\n        default:\n          props.editorActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, slateEditor, syncActorRef])\n\n  useEffect(() => {\n    syncActorRef.send({type: 'update readOnly', readOnly})\n  }, [syncActorRef, readOnly])\n\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncActorRef.send({type: 'update value', value: incomingValue})\n  }, [syncActorRef, incomingValue])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to patch events')\n    const sub = editorActor.on('internal.patch', (event) => {\n      mutationActorRef.send({...event, type: 'patch'})\n    })\n    return () => {\n      debug('Unsubscribing to patch events')\n      sub.unsubscribe()\n    }\n  }, [editorActor, mutationActorRef, slateEditor])\n\n  return null\n}\n\nSynchronizer.displayName = 'Synchronizer'\n","import {defineConverter} from './converter.types'\n\nexport const converterJson = defineConverter({\n  mimeType: 'application/json',\n  serialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/json',\n        originEvent: event.originEvent,\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const serializationEvent = portableTextConverter.serialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...serializationEvent,\n      mimeType: 'application/json',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/json',\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const deserializationEvent = portableTextConverter.deserialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...deserializationEvent,\n      mimeType: 'application/json',\n    }\n  },\n})\n","import {parseBlock} from '../internal-utils/parse-blocks'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterPortableText = defineConverter({\n  mimeType: 'application/x-portable-text',\n  serialize: ({snapshot, event}) => {\n    const selection =\n      snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      blocks: snapshot.context.value,\n      selection,\n    })\n\n    if (blocks.length === 0) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks serialized',\n        originEvent: event.originEvent,\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: JSON.stringify(blocks),\n      mimeType: 'application/x-portable-text',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const blocks = JSON.parse(event.data)\n\n    if (!Array.isArray(blocks)) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'Data is not an array',\n      }\n    }\n\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = parseBlock({\n        context: snapshot.context,\n        block,\n        options: {\n          /**\n           * If we are dragging internally then we would like to keep the\n           * dropped portable text as is.\n           */\n          refreshKeys: !snapshot.beta.hasTag?.('dragging internally'),\n        },\n      })\n      return parsedBlock ? [parsedBlock] : []\n    })\n\n    if (parsedBlocks.length === 0 && blocks.length > 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks were parsed',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: parsedBlocks,\n      mimeType: 'application/x-portable-text',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {toHTML} from '@portabletext/to-html'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextHtml(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/html',\n    serialize: ({snapshot, event}) => {\n      const selection =\n        snapshot.beta.internalDrag?.origin.selection ??\n        snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = sliceBlocks({\n        blocks: snapshot.context.value,\n        selection,\n      })\n\n      const html = toHTML(blocks, {\n        onMissingComponent: false,\n        components: {\n          unknownType: ({children}) =>\n            children !== undefined ? `${children}` : '',\n        },\n      })\n\n      if (html === '') {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'Serialized HTML is empty',\n        }\n      }\n\n      return {\n        type: 'serialization.success',\n        data: html,\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const blocks = htmlToBlocks(event.data, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode:\n          legacySchema.block.options.unstable_whitespaceOnPasteMode,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: false,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/html',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/html',\n      }\n    },\n  })\n}\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {isPortableTextTextBlock, type PortableTextBlock} from '@sanity/types'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextPlain(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/plain',\n    serialize: ({snapshot, event}) => {\n      const selection =\n        snapshot.beta.internalDrag?.origin.selection ??\n        snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/plain',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = sliceBlocks({\n        blocks: snapshot.context.value,\n        selection,\n      })\n\n      const data = blocks\n        .map((block) => {\n          if (isPortableTextTextBlock(block)) {\n            return block.children\n              .map((child) => {\n                if (child._type === snapshot.context.schema.span.name) {\n                  return child.text\n                }\n\n                return snapshot.beta.hasTag('dragging internally')\n                  ? `[${\n                      snapshot.context.schema.inlineObjects.find(\n                        (inlineObjectType) =>\n                          inlineObjectType.name === child._type,\n                      )?.title ?? 'Object'\n                    }]`\n                  : ''\n              })\n              .join('')\n          }\n\n          return snapshot.beta.hasTag('dragging internally')\n            ? `[${\n                snapshot.context.schema.blockObjects.find(\n                  (blockObjectType) => blockObjectType.name === block._type,\n                )?.title ?? 'Object'\n              }]`\n            : ''\n        })\n        .filter((block) => block !== '')\n        .join('\\n\\n')\n\n      return {\n        type: 'serialization.success',\n        data,\n        mimeType: 'text/plain',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const html = escapeHtml(event.data)\n        .split(/\\n{2,}/)\n        .map((line) =>\n          line\n            ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n            : '<p></p>',\n        )\n        .join('')\n\n      const textToHtml = `<html><body>${html}</body></html>`\n\n      const blocks = htmlToBlocks(textToHtml, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: false,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/plain',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/plain',\n      }\n    },\n  })\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\n\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n","import type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {converterJson} from './converter.json'\nimport {converterPortableText} from './converter.portable-text'\nimport {createConverterTextHtml} from './converter.text-html'\nimport {createConverterTextPlain} from './converter.text-plain'\n\nexport function createCoreConverters(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return [\n    converterJson,\n    converterPortableText,\n    createConverterTextHtml(legacySchema),\n    createConverterTextPlain(legacySchema),\n  ]\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {EditorActor} from '../editor/editor-machine'\nimport type {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {fromSlateValue} from './values'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(\n  editorActor: EditorActor,\n): PatchFunctions {\n  const textBlockName = editorActor.getSnapshot().context.schema.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) &&\n      editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild =\n      editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child =\n      (editor.isTextBlock(block) && block.children[operation.path[1]]) ||\n      undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child)\n      ? child\n      : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild =\n      editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n  ) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [\n        set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}]),\n      ]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          const keys = Object.keys(operation.newProperties)\n          keys.forEach((keyName) => {\n            // Special case for setting _key on a child. We have to target it by index and not the _key.\n            if (keys.length === 1 && keyName === '_key') {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  block.children.indexOf(child),\n                  keyName,\n                ]),\n              )\n            } else {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  {_key: childKey},\n                  keyName,\n                ]),\n              )\n            }\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(\n        `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n      )\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey =\n        operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert(\n            [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n            position,\n            [{_key: targetKey}],\n          ),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert(\n          [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n          'before',\n          [operation.path[0]],\n        ),\n      ]\n    } else if (\n      isTextBlock &&\n      operation.path.length === 2 &&\n      editor.children[operation.path[0]]\n    ) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1]\n          ? 'before'\n          : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug(\n      'Something was inserted into a void block. Not producing editor patches.',\n    )\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(\n            insert([targetValue], 'after', [{_key: splitBlock._key}]),\n          )\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(\n                  operation.path[1] + 1,\n                  operation.path[1] + 2,\n                ),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]]\n\n      if (spanToRemove) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === operation.node._key,\n        )\n\n        if (spansMatchingKey.length > 1) {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n          return []\n        }\n\n        return [\n          unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n        ]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const updatedBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue(\n          [editor.children[operation.path[0] - 1]],\n          textBlockName,\n        )[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(updatedBlock) &&\n      operation.path.length === 2\n    ) {\n      const updatedSpan =\n        updatedBlock.children[operation.path[1] - 1] &&\n        editor.isTextSpan(updatedBlock.children[operation.path[1] - 1])\n          ? updatedBlock.children[operation.path[1] - 1]\n          : undefined\n      const removedSpan =\n        block.children[operation.path[1]] &&\n        editor.isTextSpan(block.children[operation.path[1]])\n          ? block.children[operation.path[1]]\n          : undefined\n\n      if (updatedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === updatedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            set(updatedSpan.text, [\n              {_key: block._key},\n              'children',\n              {_key: updatedSpan._key},\n              'text',\n            ]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n\n      if (removedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === removedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n\n    if (!targetBlock) {\n      return patches\n    }\n\n    if (operation.path.length === 1) {\n      const position: InsertPosition =\n        operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [\n          {_key: targetBlock._key},\n        ]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position =\n        operation.newPath[1] === targetBlock.children.length\n          ? 'after'\n          : 'before'\n      const childToInsert = (\n        fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock\n      ).children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertTextActionImplementation: BehaviorActionImplementation<\n  'insert.text'\n> = ({action}) => {\n  if (action.editor.marks) {\n    Transforms.insertNodes(action.editor, {\n      text: action.text,\n      ...action.editor.marks,\n    })\n  } else {\n    Transforms.insertText(action.editor, action.text)\n  }\n\n  action.editor.marks = null\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a, _b;\n  const {\n      children\n    } = block,\n    markDefs = (_a = block.markDefs) != null ? _a : [];\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_b = nodeStack[pos]) == null ? void 0 : _b.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs == null ? void 0 : markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../internal-utils/sibling-utils'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = editorActor\n      .getSnapshot()\n      .context.schema.decorators.map((t) => t.name)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = editorActor\n            .getSnapshot()\n            .context.schema.decorators.map((decorator) => decorator.name)\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        const marks = Editor.marks(editor)\n\n        if (\n          marks &&\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // If the editor has marks and we are not visually moving the\n            // selection then we just abort. Otherwise the marks would be\n            // cleared and we can't use them for the possible subsequent insert\n            // operation.\n            if (movedToNextSpan || movedToPreviousSpan) {\n              return\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        const collapsedSelection = selection\n          ? Range.isCollapsed(selection)\n          : false\n\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: selection.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          const marks = span.marks ?? []\n          const marksWithoutAnnotations = marks.filter((mark) =>\n            decorators.includes(mark),\n          )\n          const spanHasAnnotations =\n            marks.length > marksWithoutAnnotations.length\n\n          const spanIsEmpty = span.text.length === 0\n\n          const atTheBeginningOfSpan = selection.anchor.offset === 0\n          const atTheEndOfSpan = selection.anchor.offset === span.text.length\n\n          const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n          const nextSpan = getNextSpan({editor, blockPath, spanPath})\n          const nextSpanAnnotations =\n            nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n          const spanAnnotations = marks.filter(\n            (mark) => !decorators.includes(mark),\n          )\n\n          const previousSpanHasAnnotations = previousSpan\n            ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n            : false\n          const previousSpanHasSameAnnotations = previousSpan\n            ? previousSpan.marks\n                ?.filter((mark) => !decorators.includes(mark))\n                .every((mark) => marks.includes(mark))\n            : false\n          const previousSpanHasSameAnnotation = previousSpan\n            ? previousSpan.marks?.some(\n                (mark) => !decorators.includes(mark) && marks.includes(mark),\n              )\n            : false\n\n          const previousSpanHasSameMarks = previousSpan\n            ? previousSpan.marks?.every((mark) => marks.includes(mark))\n            : false\n          const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n            nextSpanAnnotations?.includes(mark),\n          )\n\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotations) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotation) {\n                apply(op)\n                return\n              } else if (!previousSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n\n            if (atTheEndOfSpan) {\n              if (\n                (nextSpan &&\n                  nextSpanSharesSomeAnnotations &&\n                  nextSpanAnnotations.length < spanAnnotations.length) ||\n                !nextSpanSharesSomeAnnotations\n              ) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? [],\n                })\n                return\n              }\n\n              if (!nextSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n          }\n\n          if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n            Transforms.insertNodes(editor, {\n              _type: 'span',\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations\n                ? []\n                : (previousSpan.marks ?? []).filter((mark) =>\n                    decorators.includes(mark),\n                  ),\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const marksWithoutAnnotationMarks: string[] = (\n                {\n                  ...(Editor.marks(editor) || {}),\n                }.marks || []\n              ).filter((mark) => decorators.includes(mark))\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: marksWithoutAnnotationMarks},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type ===\n          editorActor.getSnapshot().context.schema.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const removeDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.remove'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: existingMarks.filter((eMark) => eMark !== mark),\n        } as Text\n        editor.marks = {marks: marks.marks, _type: 'span'} as Text\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n\nexport function isDecoratorActive({\n  editor,\n  decorator,\n}: {\n  editor: PortableTextSlateEditor\n  decorator: string\n}) {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedTextNodes = Array.from(\n    Editor.nodes(editor, {match: Text.isText, at: editor.selection}),\n  )\n\n  if (selectedTextNodes.length === 0) {\n    return false\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    return selectedTextNodes.every((n) => {\n      const [node] = n\n\n      return node.marks?.includes(decorator)\n    })\n  }\n\n  return (\n    {\n      ...(Editor.marks(editor) || {}),\n    }.marks || []\n  ).includes(decorator)\n}\n","import type {Path} from '@sanity/types'\nimport {Editor, Node, Range, Text, Transforms} from 'slate'\nimport {parseAnnotation} from '../internal-utils/parse-blocks'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const parsedAnnotation = parseAnnotation({\n    annotation: {\n      _type: action.annotation.name,\n      ...action.annotation.value,\n    },\n    context,\n    options: {refreshKeys: false},\n  })\n\n  if (!parsedAnnotation) {\n    throw new Error(\n      `Failed to parse annotation ${JSON.stringify(action.annotation)}`,\n    )\n  }\n\n  const editor = action.editor\n\n  if (!editor.selection || Range.isCollapsed(editor.selection)) {\n    return\n  }\n\n  let paths: AddedAnnotationPaths | undefined = undefined\n  let spanPath: Path | undefined\n  let markDefPath: Path | undefined\n  const markDefPaths: Path[] = []\n\n  const selectedBlocks = Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: Range.isBackward(editor.selection),\n  })\n\n  let blockIndex = 0\n\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0) {\n      continue\n    }\n\n    if (block.children.length === 1 && block.children[0].text === '') {\n      continue\n    }\n\n    // Make sure we don't generate more keys than needed\n    const annotationKey =\n      blockIndex === 0 ? parsedAnnotation._key : context.keyGenerator()\n    const markDefs = block.markDefs ?? []\n    const existingMarkDef = markDefs.find(\n      (markDef) =>\n        markDef._type === parsedAnnotation._type &&\n        markDef._key === annotationKey,\n    )\n\n    if (existingMarkDef === undefined) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: [\n            ...markDefs,\n            {\n              ...parsedAnnotation,\n              _key: annotationKey,\n            },\n          ],\n        },\n        {at: blockPath},\n      )\n\n      markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n\n      if (Range.isBackward(editor.selection)) {\n        markDefPaths.unshift(markDefPath)\n      } else {\n        markDefPaths.push(markDefPath)\n      }\n    }\n\n    Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n    const children = Node.children(editor, blockPath)\n\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span)) {\n        continue\n      }\n\n      if (!Range.includes(editor.selection, path)) {\n        continue\n      }\n\n      const marks = span.marks ?? []\n      const existingSameTypeAnnotations = marks.filter((mark) =>\n        markDefs.some(\n          (markDef) =>\n            markDef._key === mark && markDef._type === parsedAnnotation._type,\n        ),\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks: [\n            ...marks.filter(\n              (mark) => !existingSameTypeAnnotations.includes(mark),\n            ),\n            annotationKey,\n          ],\n        },\n        {at: path},\n      )\n\n      spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n    }\n\n    blockIndex++\n  }\n\n  if (markDefPath && spanPath) {\n    paths = {\n      markDefPath,\n      markDefPaths,\n      spanPath,\n    }\n  }\n\n  return paths\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const removeAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.remove'\n> = ({action}) => {\n  const editor = action.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === action.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== action.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Element, type Descendant, type Path as SlatePath} from 'slate'\n\nexport function toSlatePath(path: Path, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(path[0]) && (n as Descendant)._key === path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n\n  const childPath = [path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n\n  return [blockPath[0], 0]\n}\n","import {Point, type Editor, type Operation, type Range} from 'slate'\nimport type {EditorSelection} from '../types/editor'\nimport {toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import {Editor, Transforms, type Element as SlateElement} from 'slate'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const blockSetBehaviorActionImplementation: BehaviorActionImplementation<\n  'block.set'\n> = ({context, action}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(action.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(action.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(action.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(action.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(action.at)}`)\n  }\n\n  const {_type, ...filteredProps} = action.props\n\n  const updatedBlock = parseBlock({\n    context,\n    block: {\n      ...parsedBlock,\n      ...filteredProps,\n    },\n    options: {refreshKeys: false},\n  })\n\n  if (!updatedBlock) {\n    throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`)\n  }\n\n  const slateBlock = toSlateValue([updatedBlock], {\n    schemaTypes: context.schema,\n  })?.at(0) as SlateElement | undefined\n\n  if (!slateBlock) {\n    throw new Error(`Unable to convert block to Slate value`)\n  }\n\n  Transforms.setNodes(action.editor, slateBlock, {at: location})\n}\n","import {omit} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const blockUnsetBehaviorActionImplementation: BehaviorActionImplementation<\n  'block.unset'\n> = ({context, action}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(action.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(action.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(action.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(action.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(action.at)}`)\n  }\n\n  if (isTextBlock(context.schema, parsedBlock)) {\n    const propsToRemove = action.props.filter((prop) => prop !== '_type')\n\n    const updatedTextBlock = parseBlock({\n      context,\n      block: omit(parsedBlock, propsToRemove),\n      options: {refreshKeys: false},\n    })\n\n    if (!updatedTextBlock) {\n      throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`)\n    }\n\n    const propsToSet: Record<string, unknown> = {}\n\n    for (const prop of propsToRemove) {\n      if (!(prop in updatedTextBlock)) {\n        propsToSet[prop] = undefined\n      } else {\n        propsToSet[prop] = (updatedTextBlock as Record<string, unknown>)[prop]\n      }\n    }\n\n    Transforms.setNodes(action.editor, propsToSet, {at: location})\n\n    return\n  }\n\n  const updatedBlockObject = parseBlock({\n    context,\n    block: omit(\n      parsedBlock,\n      action.props.filter((prop) => prop !== '_type'),\n    ),\n    options: {refreshKeys: false},\n  })\n\n  if (!updatedBlockObject) {\n    throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`)\n  }\n\n  const {_type, _key, ...props} = updatedBlockObject\n\n  Transforms.setNodes(\n    action.editor,\n    {\n      _type,\n      _key,\n      value: props,\n    },\n    {at: location},\n  )\n}\n","import {Editor, Element, Node, Range, type Path, type Point} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from './values'\n\nexport function getAnchorBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.anchor.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.focus.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getSelectionStartBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionStartPoint = Range.start(editor.selection)\n\n  return getPointBlock({editor, point: selectionStartPoint})\n}\n\nexport function getSelectionEndBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionEndPoint = Range.end(editor.selection)\n\n  return getPointBlock({editor, point: selectionEndPoint})\n}\n\nfunction getPointBlock({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  try {\n    const [block] = Editor.node(editor, point.path.slice(0, 1)) ?? [\n      undefined,\n      undefined,\n    ]\n    return block ? [block, point.path.slice(0, 1)] : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusChild({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n  const childIndex = editor.selection?.focus.path.at(1)\n\n  if (!focusBlock || !focusBlockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const focusChild = Node.child(focusBlock, childIndex)\n\n    return focusChild\n      ? [focusChild, [...focusBlockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nfunction getPointChild({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [block, blockPath] = getPointBlock({editor, point})\n  const childIndex = point.path.at(1)\n\n  if (!block || !blockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const pointChild = Node.child(block, childIndex)\n\n    return pointChild\n      ? [pointChild, [...blockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFirstBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const firstPoint = Editor.start(editor, [])\n  const firstBlockPath = firstPoint.path.at(0)\n\n  try {\n    return firstBlockPath !== undefined\n      ? (Editor.node(editor, [firstBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getLastBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const lastPoint = Editor.end(editor, [])\n  const lastBlockPath = lastPoint.path.at(0)\n\n  try {\n    return lastBlockPath !== undefined\n      ? (Editor.node(editor, [lastBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getNodeBlock({\n  editor,\n  schema,\n  node,\n}: {\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n  node: Node\n}) {\n  if (Editor.isEditor(node)) {\n    return undefined\n  }\n\n  if (isBlockElement({editor, schema}, node)) {\n    return elementToBlock({schema, element: node})\n  }\n\n  const parent = Array.from(\n    Editor.nodes(editor, {\n      mode: 'highest',\n      at: [],\n      match: (n) =>\n        isBlockElement({editor, schema}, n) &&\n        n.children.some((child) => child._key === node._key),\n    }),\n  )\n    .at(0)\n    ?.at(0)\n\n  return Element.isElement(parent)\n    ? elementToBlock({\n        schema,\n        element: parent,\n      })\n    : undefined\n}\n\nfunction elementToBlock({\n  schema,\n  element,\n}: {\n  schema: EditorSchema\n  element: Element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0)\n}\n\nfunction isBlockElement(\n  {editor, schema}: {editor: PortableTextSlateEditor; schema: EditorSchema},\n  node: Node,\n): node is Element {\n  return (\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    (schema.block.name === node._type ||\n      schema.blockObjects.some(\n        (blockObject) => blockObject.name === node._type,\n      ))\n  )\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n\nexport function slateRangeToSelection({\n  schema,\n  editor,\n  range,\n}: {\n  schema: EditorSchema\n  editor: PortableTextSlateEditor\n  range: Range\n}): EditorSelection {\n  const [anchorBlock] = getPointBlock({\n    editor,\n    point: range.anchor,\n  })\n  const [focusBlock] = getPointBlock({\n    editor,\n    point: range.focus,\n  })\n\n  if (!anchorBlock || !focusBlock) {\n    return null\n  }\n\n  const [anchorChild] =\n    anchorBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.anchor,\n        })\n      : [undefined, undefined]\n  const [focusChild] =\n    focusBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.focus,\n        })\n      : [undefined, undefined]\n\n  const selection: EditorSelection = {\n    anchor: {\n      path: [{_key: anchorBlock._key}],\n      offset: range.anchor.offset,\n    },\n    focus: {\n      path: [{_key: focusBlock._key}],\n      offset: range.focus.offset,\n    },\n    backward: Range.isBackward(range),\n  }\n\n  if (anchorChild) {\n    selection.anchor.path.push('children')\n    selection.anchor.path.push({_key: anchorChild._key})\n  }\n\n  if (focusChild) {\n    selection.focus.path.push('children')\n    selection.focus.path.push({_key: focusChild._key})\n  }\n\n  return selection\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const decoratorAddActionImplementation: BehaviorActionImplementation<\n  'decorator.add'\n> = ({context, action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const value = fromSlateValue(\n    editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n\n  const manualAnchor = action.at?.anchor\n    ? utils.blockOffsetToSpanSelectionPoint({\n        value,\n        blockOffset: action.at.anchor,\n        direction: 'backward',\n      })\n    : undefined\n  const manualFocus = action.at?.focus\n    ? utils.blockOffsetToSpanSelectionPoint({\n        value,\n        blockOffset: action.at.focus,\n        direction: 'forward',\n      })\n    : undefined\n  const manualSelection =\n    manualAnchor && manualFocus\n      ? {\n          anchor: manualAnchor,\n          focus: manualFocus,\n        }\n      : undefined\n\n  const selection = manualSelection\n    ? (toSlateRange(manualSelection, action.editor) ?? editor.selection)\n    : editor.selection\n\n  if (!selection) {\n    return\n  }\n\n  const editorSelection = slateRangeToSelection({\n    schema: context.schema,\n    editor,\n    range: selection,\n  })\n  const anchorOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        value,\n        selectionPoint: editorSelection.anchor,\n      })\n    : undefined\n  const focusOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        value,\n        selectionPoint: editorSelection.focus,\n      })\n    : undefined\n\n  if (!anchorOffset || !focusOffset) {\n    throw new Error('Unable to find anchor or focus offset')\n  }\n\n  if (Range.isExpanded(selection)) {\n    // Split if needed\n    Transforms.setNodes(\n      editor,\n      {},\n      {at: selection, match: Text.isText, split: true, hanging: true},\n    )\n\n    // The value might have changed after splitting\n    const newValue = fromSlateValue(\n      editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(editor),\n    )\n    // We need to find the new selection from the original offsets because the\n    // split operation might have changed the value.\n    const newSelection = utils.blockOffsetsToSelection({\n      value: newValue,\n      offsets: {anchor: anchorOffset, focus: focusOffset},\n      backward: editorSelection?.backward,\n    })\n\n    const trimmedSelection = selectors.getTrimmedSelection({\n      beta: {hasTag: () => false, internalDrag: undefined},\n      context: {\n        activeDecorators: [],\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: false,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue,\n      },\n    })\n\n    if (!trimmedSelection) {\n      throw new Error('Unable to find trimmed selection')\n    }\n\n    const newRange = toSlateRange(trimmedSelection, editor)\n\n    if (!newRange) {\n      throw new Error('Unable to find new selection')\n    }\n\n    // Use new selection to find nodes to decorate\n    const splitTextNodes = Range.isRange(newRange)\n      ? [\n          ...Editor.nodes(editor, {\n            at: newRange,\n            match: (node) => Text.isText(node),\n          }),\n        ]\n      : []\n\n    for (const [node, path] of splitTextNodes) {\n      const marks = [\n        ...(Array.isArray(node.marks) ? node.marks : []).filter(\n          (eMark: string) => eMark !== mark,\n        ),\n        mark,\n      ]\n      Transforms.setNodes(\n        editor,\n        {marks},\n        {at: path, match: Text.isText, split: true, hanging: true},\n      )\n    }\n  } else {\n    const selectedSpan = Array.from(\n      Editor.nodes(editor, {\n        at: selection,\n        match: (node) => editor.isTextSpan(node),\n      }),\n    )?.at(0)\n\n    if (!selectedSpan) {\n      return\n    }\n\n    const [block, blockPath] = Editor.node(editor, selection, {\n      depth: 1,\n    })\n    const lonelyEmptySpan =\n      editor.isTextBlock(block) &&\n      block.children.length === 1 &&\n      editor.isTextSpan(block.children[0]) &&\n      block.children[0].text === ''\n        ? block.children[0]\n        : undefined\n\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? []\n      const existingMarksWithoutDecorator = existingMarks.filter(\n        (existingMark) => existingMark !== mark,\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks:\n            existingMarks.length === existingMarksWithoutDecorator.length\n              ? [...existingMarks, mark]\n              : existingMarksWithoutDecorator,\n        },\n        {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node),\n        },\n      )\n    } else {\n      const existingMarks: string[] =\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      const marks = {\n        ...(Editor.marks(editor) || {}),\n        marks: [...existingMarks, mark],\n      }\n      editor.marks = marks as Text\n    }\n  }\n\n  if (editor.selection) {\n    // Reselect\n    const selection = editor.selection\n    editor.selection = {...selection}\n  }\n}\n","import {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const deleteActionImplementation: BehaviorActionImplementation<\n  'delete'\n> = ({action}) => {\n  const range = toSlateRange(action.at, action.editor)\n\n  if (!range) {\n    throw new Error(\n      `Failed to get Slate Range for selection ${JSON.stringify(action.at)}`,\n    )\n  }\n\n  action.editor.delete({at: range})\n}\n","import type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const deleteBackwardActionImplementation: BehaviorActionImplementation<\n  'delete.backward'\n> = ({action}) => {\n  action.editor.deleteBackward(action.unit)\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const deleteBlockActionImplementation: BehaviorActionImplementation<\n  'delete.block'\n> = ({action}) => {\n  const range = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )\n\n  if (!range) {\n    console.error('Unable to find Slate range from selection points')\n    return\n  }\n\n  Transforms.removeNodes(action.editor, {\n    at: range,\n  })\n}\n","import type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const deleteForwardActionImplementation: BehaviorActionImplementation<\n  'delete.forward'\n> = ({action}) => {\n  action.editor.deleteForward(action.unit)\n}\n","import type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const effectActionImplementation: BehaviorActionImplementation<\n  'effect'\n> = ({action}) => {\n  action.effect()\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {parseInlineObject} from '../internal-utils/parse-blocks'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertInlineObjectActionImplementation: BehaviorActionImplementation<\n  'insert.inline object'\n> = ({context, action}) => {\n  const parsedInlineObject = parseInlineObject({\n    context,\n    inlineObject: {\n      _type: action.inlineObject.name,\n      ...(action.inlineObject.value ?? {}),\n    },\n    options: {refreshKeys: false},\n  })\n\n  if (!parsedInlineObject) {\n    throw new Error(\n      `Failed to parse inline object ${JSON.stringify(action.inlineObject)}`,\n    )\n  }\n\n  if (!action.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [parsedInlineObject],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(action.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertSpanActionImplementation: BehaviorActionImplementation<\n  'insert.span'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    console.error('Unable to perform action without selection', action)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', action)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = action.annotations\n    ? action.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(action.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(action.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(action.decorators ?? []),\n    ],\n  })\n}\n","import {Editor, Path, Point, Range, Transforms, type Descendant} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {\n  getFocusBlock,\n  getFocusChild,\n  getLastBlock,\n  getSelectionEndBlock,\n  getSelectionStartBlock,\n} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor, toSlateValue} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBlockActionImplementation: BehaviorActionImplementation<\n  'insert.block'\n> = ({context, action}) => {\n  const parsedBlock = parseBlock({\n    block: action.block,\n    context,\n    options: {refreshKeys: false},\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Failed to parse block ${JSON.stringify(action.block)}`)\n  }\n\n  const fragment = toSlateValue([parsedBlock], {schemaTypes: context.schema})[0]\n\n  if (!fragment) {\n    throw new Error(\n      `Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`,\n    )\n  }\n\n  insertBlock({\n    block: fragment,\n    placement: action.placement,\n    select: action.select ?? 'start',\n    editor: action.editor,\n    schema: context.schema,\n  })\n}\n\nexport function insertBlock({\n  block,\n  placement,\n  select,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  select: 'start' | 'end' | 'none'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  const [startBlock, startBlockPath] = getSelectionStartBlock({editor})\n  const [endBlock, endBlockPath] = getSelectionEndBlock({editor})\n\n  if (\n    !editor.selection ||\n    !startBlock ||\n    !startBlockPath ||\n    !endBlock ||\n    !endBlockPath\n  ) {\n    if (select !== 'none') {\n      DOMEditor.focus(editor)\n    }\n\n    const [lastBlock, lastBlockPath] = getLastBlock({editor})\n\n    if (placement === 'before') {\n      Transforms.insertNodes(editor, [block], {at: [0]})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, [0]))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, [0]))\n      }\n    } else if (placement === 'after') {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], schema)) {\n        // And if the last block was an empty text block, let's remove\n        // that too\n        Transforms.removeNodes(editor, {at: lastBlockPath})\n\n        Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: false,\n        })\n\n        Transforms.deselect(editor)\n\n        if (select === 'start') {\n          Transforms.select(editor, Editor.start(editor, lastBlockPath))\n        } else if (select === 'end') {\n          Transforms.select(editor, Editor.end(editor, lastBlockPath))\n        }\n\n        return\n      }\n\n      if (\n        editor.isTextBlock(block) &&\n        lastBlock &&\n        editor.isTextBlock(lastBlock)\n      ) {\n        const selectionBefore = Editor.end(editor, lastBlockPath)\n\n        Transforms.insertFragment(editor, [block], {\n          at: Editor.end(editor, lastBlockPath),\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionBefore)\n        } else if (select === 'none') {\n          Transforms.deselect(editor)\n        }\n\n        return\n      }\n\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    }\n  } else {\n    if (placement === 'before') {\n      const currentSelection = editor.selection\n      const selectionStartPoint = Range.start(currentSelection)\n\n      Transforms.insertNodes(editor, [block], {\n        at: [selectionStartPoint.path[0]],\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(\n          editor,\n          Editor.start(editor, [selectionStartPoint.path[0]]),\n        )\n      } else if (select === 'end') {\n        Transforms.select(\n          editor,\n          Editor.end(editor, [selectionStartPoint.path[0]]),\n        )\n      }\n    } else if (placement === 'after') {\n      const currentSelection = editor.selection\n      const selectionEndPoint = Range.end(currentSelection)\n\n      const nextPath = [selectionEndPoint.path[0] + 1]\n\n      Transforms.insertNodes(editor, [block], {\n        at: nextPath,\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      const currentSelection = editor.selection\n      const endBlockEndPoint = Editor.start(editor, endBlockPath)\n\n      if (Range.isExpanded(currentSelection) && !editor.isTextBlock(block)) {\n        Transforms.delete(editor, {at: currentSelection})\n\n        const newSelection = editor.selection\n\n        const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n\n        Transforms.insertNodes(editor, [block], {\n          voids: true,\n        })\n\n        const adjustedSelection =\n          newSelection.anchor.offset === 0\n            ? Range.transform(newSelection, {\n                type: 'insert_node',\n                node: block,\n                path: [newSelection.anchor.path[0]],\n              })\n            : newSelection\n\n        if (select === 'none' && adjustedSelection) {\n          Transforms.select(editor, adjustedSelection)\n        }\n\n        if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n          Transforms.removeNodes(editor, {at: focusBlockPath})\n        }\n\n        return\n      }\n\n      if (editor.isTextBlock(endBlock) && editor.isTextBlock(block)) {\n        const selectionStartPoint = Range.start(currentSelection)\n\n        if (select === 'end') {\n          Transforms.insertFragment(editor, [block], {\n            voids: true,\n          })\n\n          return\n        }\n\n        Transforms.insertFragment(editor, [block], {\n          at: currentSelection,\n          voids: true,\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionStartPoint)\n        } else {\n          if (!Point.equals(selectionStartPoint, endBlockEndPoint)) {\n            Transforms.select(editor, selectionStartPoint)\n          }\n        }\n      } else {\n        if (!editor.isTextBlock(endBlock)) {\n          Transforms.insertNodes(editor, [block], {select: false})\n\n          const nextPath = [endBlockPath[0] + 1]\n\n          if (select === 'start') {\n            Transforms.select(editor, Editor.start(editor, nextPath))\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, nextPath))\n          }\n        } else {\n          const endBlockStartPoint = Editor.start(editor, endBlockPath)\n          const endBlockEndPoint = Editor.end(editor, endBlockPath)\n          const selectionStartPoint = Range.start(currentSelection)\n          const selectionEndPoint = Range.end(currentSelection)\n\n          if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertNodes(editor, [block], {\n              at: endBlockPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            }\n\n            if (isEqualToEmptyEditor([endBlock], schema)) {\n              Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n            }\n          } else if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            const nextPath = [endBlockPath[0] + 1]\n\n            Transforms.insertNodes(editor, [block], {\n              at: nextPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, nextPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(\n                editor,\n                Editor.start(editor, Path.next(endBlockPath)),\n              )\n            } else if (select === 'end') {\n              Transforms.select(\n                editor,\n                Editor.end(editor, Path.next(endBlockPath)),\n              )\n            }\n          } else {\n            const currentSelection = editor.selection\n            const [focusChild] = getFocusChild({editor})\n\n            if (focusChild && editor.isTextSpan(focusChild)) {\n              Transforms.insertFragment(editor, [block], {\n                at: currentSelection,\n              })\n\n              if (select === 'start' || select === 'end') {\n                Transforms.select(editor, [endBlockPath[0] + 1])\n              } else {\n                Transforms.select(editor, currentSelection)\n              }\n            } else {\n              const nextPath = [endBlockPath[0] + 1]\n              Transforms.insertNodes(editor, [block], {\n                at: nextPath,\n                select: false,\n              })\n              Transforms.select(editor, currentSelection)\n\n              if (select === 'start') {\n                Transforms.select(editor, Editor.start(editor, nextPath))\n              } else if (select === 'end') {\n                Transforms.select(editor, Editor.end(editor, nextPath))\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const moveBackwardActionImplementation: BehaviorActionImplementation<\n  'move.backward'\n> = ({action}) => {\n  Transforms.move(action.editor, {\n    unit: 'character',\n    distance: action.distance,\n    reverse: true,\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlatePath} from '../internal-utils/paths'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const moveBlockActionImplementation: BehaviorActionImplementation<\n  'move.block'\n> = ({action}) => {\n  const at = [toSlatePath(action.at, action.editor)[0]]\n  const to = [toSlatePath(action.to, action.editor)[0]]\n\n  Transforms.moveNodes(action.editor, {\n    at,\n    to,\n    mode: 'highest',\n  })\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const moveForwardActionImplementation: BehaviorActionImplementation<\n  'move.forward'\n> = ({action}) => {\n  Transforms.move(action.editor, {\n    unit: 'character',\n    distance: action.distance,\n  })\n}\n","import type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const noopActionImplementation: BehaviorActionImplementation<\n  'noop'\n> = () => {}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const selectActionImplementation: BehaviorActionImplementation<\n  'select'\n> = ({action}) => {\n  const newSelection = toSlateRange(action.at, action.editor)\n\n  if (newSelection) {\n    Transforms.select(action.editor, newSelection)\n  } else {\n    Transforms.deselect(action.editor)\n  }\n}\n","import {omit} from 'lodash'\nimport type {InternalBehaviorAction} from '../behaviors/behavior.types.action'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {removeDecoratorActionImplementation} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {\n  historyRedoActionImplementation,\n  historyUndoActionImplementation,\n} from '../editor/plugins/createWithUndoRedo'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PickFromUnion} from '../type-utils'\nimport {addAnnotationActionImplementation} from './behavior.action.annotation.add'\nimport {removeAnnotationActionImplementation} from './behavior.action.annotation.remove'\nimport {blockSetBehaviorActionImplementation} from './behavior.action.block.set'\nimport {blockUnsetBehaviorActionImplementation} from './behavior.action.block.unset'\nimport {decoratorAddActionImplementation} from './behavior.action.decorator.add'\nimport {deleteActionImplementation} from './behavior.action.delete'\nimport {deleteBackwardActionImplementation} from './behavior.action.delete.backward'\nimport {deleteBlockActionImplementation} from './behavior.action.delete.block'\nimport {deleteForwardActionImplementation} from './behavior.action.delete.forward'\nimport {effectActionImplementation} from './behavior.action.effect'\nimport {insertInlineObjectActionImplementation} from './behavior.action.insert-inline-object'\nimport {insertSpanActionImplementation} from './behavior.action.insert-span'\nimport {insertBlockActionImplementation} from './behavior.action.insert.block'\nimport {insertTextActionImplementation} from './behavior.action.insert.text'\nimport {moveBackwardActionImplementation} from './behavior.action.move.backward'\nimport {moveBlockActionImplementation} from './behavior.action.move.block'\nimport {moveForwardActionImplementation} from './behavior.action.move.forward'\nimport {noopActionImplementation} from './behavior.action.noop'\nimport {selectActionImplementation} from './behavior.action.select'\n\nconst debug = debugWithName('behaviors:action')\n\nexport type BehaviorActionImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorActionImplementation<\n  TBehaviorActionType extends InternalBehaviorAction['type'],\n  TReturnType = void,\n> = ({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<InternalBehaviorAction, 'type', TBehaviorActionType>\n}) => TReturnType\n\ntype BehaviorActionImplementations = {\n  [TBehaviorActionType in InternalBehaviorAction['type']]: BehaviorActionImplementation<TBehaviorActionType>\n}\n\nconst behaviorActionImplementations: BehaviorActionImplementations = {\n  'annotation.add': addAnnotationActionImplementation,\n  'annotation.remove': removeAnnotationActionImplementation,\n  'block.set': blockSetBehaviorActionImplementation,\n  'block.unset': blockUnsetBehaviorActionImplementation,\n  'decorator.add': decoratorAddActionImplementation,\n  'decorator.remove': removeDecoratorActionImplementation,\n  'delete': deleteActionImplementation,\n  'delete.backward': deleteBackwardActionImplementation,\n  'delete.forward': deleteForwardActionImplementation,\n  'delete.block': deleteBlockActionImplementation,\n  'history.redo': historyRedoActionImplementation,\n  'history.undo': historyUndoActionImplementation,\n  'insert.block': insertBlockActionImplementation,\n  'insert.inline object': insertInlineObjectActionImplementation,\n  'insert.span': insertSpanActionImplementation,\n  'insert.text': insertTextActionImplementation,\n  'effect': effectActionImplementation,\n  'move.backward': moveBackwardActionImplementation,\n  'move.block': moveBlockActionImplementation,\n  'move.forward': moveForwardActionImplementation,\n  'noop': noopActionImplementation,\n  'select': selectActionImplementation,\n}\n\nexport function performAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: InternalBehaviorAction\n}) {\n  debug(JSON.stringify(omit(action, ['editor']), null, 2))\n\n  switch (action.type) {\n    case 'annotation.add': {\n      behaviorActionImplementations['annotation.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.remove': {\n      behaviorActionImplementations['annotation.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'block.set': {\n      behaviorActionImplementations['block.set']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'block.unset': {\n      behaviorActionImplementations['block.unset']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.add': {\n      behaviorActionImplementations['decorator.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.remove': {\n      behaviorActionImplementations['decorator.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete': {\n      behaviorActionImplementations.delete({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.backward': {\n      behaviorActionImplementations['delete.backward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.block': {\n      behaviorActionImplementations['delete.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.forward': {\n      behaviorActionImplementations['delete.forward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'effect': {\n      behaviorActionImplementations.effect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'history.redo': {\n      behaviorActionImplementations['history.redo']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'history.undo': {\n      behaviorActionImplementations['history.undo']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.block': {\n      behaviorActionImplementations['insert.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.inline object': {\n      behaviorActionImplementations['insert.inline object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.span': {\n      behaviorActionImplementations['insert.span']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text': {\n      behaviorActionImplementations['insert.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.backward': {\n      behaviorActionImplementations['move.backward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block': {\n      behaviorActionImplementations['move.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.forward': {\n      behaviorActionImplementations['move.forward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'noop': {\n      behaviorActionImplementations.noop({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      behaviorActionImplementations.select({\n        context,\n        action,\n      })\n      break\n    }\n  }\n}\n","import {Editor} from 'slate'\nimport {insertTextActionImplementation} from '../../behavior-actions/behavior.action.insert.text'\nimport {performAction} from '../../behavior-actions/behavior.actions'\nimport {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport type {EditorActor} from '../editor-machine'\nimport {isApplyingBehaviorActions} from '../with-applying-behavior-actions'\n\nexport function createWithEventListeners(editorActor: EditorActor) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    const {deleteBackward, deleteForward, insertBreak, insertText, select} =\n      editor\n\n    editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteBackward(unit)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteForward(unit)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertBreak()\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertData = (dataTransfer) => {\n      if (isApplyingBehaviorActions(editor)) {\n        throw new Error('Unexpected call to .insertData(...)')\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'input.*',\n          originEvent: {\n            dataTransfer,\n          },\n        },\n        editor,\n      })\n    }\n\n    editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertTextActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          action: {type: 'insert.text', text: '\\n', editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text, options) => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertText(text, options)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.redo = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        performAction({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          action: {\n            type: 'history.redo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.select = (location) => {\n      if (isApplyingBehaviorActions(editor)) {\n        select(location)\n        return\n      }\n\n      const range = Editor.range(editor, location)\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          at: slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range,\n          }),\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.setFragmentData = () => {\n      console.warn('Unexpected call to .setFragmentData(...)')\n      return\n    }\n\n    editor.undo = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        performAction({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          action: {\n            type: 'history.undo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(editorActor: EditorActor) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        const existingKeys = [...Node.descendants(editor)].map(\n          ([node]) => node._key,\n        )\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key:\n              operation.properties._key === undefined ||\n              existingKeys.includes(operation.properties._key)\n                ? editorActor.getSnapshot().context.keyGenerator()\n                : operation.properties._key,\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          const existingKeys = [...Node.descendants(editor)].map(\n            ([node]) => node._key,\n          )\n\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key:\n                operation.node._key === undefined ||\n                existingKeys.includes(operation.node._key)\n                  ? editorActor.getSnapshot().context.keyGenerator()\n                  : operation.node._key,\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (\n        Element.isElement(node) &&\n        node._type === editorActor.getSnapshot().context.schema.block.name\n      ) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {\n  KeyedSegment,\n  Path,\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n} from '@sanity/types'\nimport {\n  Element,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n  type Path as SlatePath,\n} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schema: EditorSchema,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug(\n        '\\n\\nNEW PATCH =============================================================',\n      )\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schema)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schema: EditorSchema,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes: schema},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes: schema},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx =\n    position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    debug('Setting children')\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    if (patch.path.length > 1 && patch.path[1] !== 'children') {\n      const newVal = applyAll(block.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n      Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    } else {\n      return false\n    }\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n    editor.children.forEach((_child, i) => {\n      Transforms.removeNodes(editor, {at: [i]})\n    })\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (\n    editor.isTextBlock(block) &&\n    patch.path[1] === 'children' &&\n    patch.path.length === 3\n  ) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify(childPath)}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection'\n  >,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {\n  child?: Descendant\n  childPath?: SlatePath\n  block?: Descendant\n  blockPath?: SlatePath\n} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex) as SlatePath,\n  }\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {\n  Editor,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type Operation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport {createApplyPatch} from '../../internal-utils/applyPatch'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../internal-utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../internal-utils/weakMaps'\nimport {withRemoteChanges} from '../../internal-utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../internal-utils/withoutPatching'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getCurrentActionId} from '../with-applying-behavior-actions'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  editorActor: EditorActor\n  patchFunctions: PatchFunctions\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  patchFunctions,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(editorActor.getSnapshot().context.schema)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                changed = applyPatch(editor, patch)\n              })\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(\n        previousChildren,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(\n        editor.children,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        editorActor.send({\n          type: 'notify.unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            editorActor.getSnapshot().context.schema.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        for (const patch of patches) {\n          editorActor.send({\n            type: 'internal.patch',\n            patch: {...patch, origin: 'local'},\n            actionId: getCurrentActionId(editor),\n            value: fromSlateValue(\n              editor.children,\n              editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n          })\n        }\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = editorActor.getSnapshot().context.schema.styles[0].name\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    return editor\n  }\n}\n","import type {BaseRange} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../internal-utils/weakMaps'\nimport type {EditorSelection, PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection | null = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            ptRange = slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor,\n              range: editor.selection,\n            })\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'notify.selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'notify.selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      onChange()\n      if (!editorActor.getSnapshot().matches({setup: 'setting up'})) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n}: {\n  editorActor: EditorActor\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return (\n        isPortableTextTextBlock(value) &&\n        value._type === editorActor.getSnapshot().context.schema.block.name\n      )\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return (\n        isPortableTextSpan(value) &&\n        value._type === editorActor.getSnapshot().context.schema.span.name\n      )\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return (\n        isPortableTextListBlock(value) &&\n        value._type === editorActor.getSnapshot().context.schema.block.name\n      )\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        editorActor.getSnapshot().context.schema.block.name !== element._type &&\n        (editorActor\n          .getSnapshot()\n          .context.schema.blockObjects.map((obj) => obj.name)\n          .includes(element._type) ||\n          editorActor\n            .getSnapshot()\n            .context.schema.inlineObjects.map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = editorActor\n        .getSnapshot()\n        .context.schema.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {\n            ...span,\n            _type: editorActor.getSnapshot().context.schema.span.name,\n            _key: key,\n          },\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {toSlateValue} from '../../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\ninterface Options {\n  editorActor: EditorActor\n}\n\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: editorActor.getSnapshot().context.schema.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style:\n              editorActor.getSnapshot().context.schema.styles[0].name ||\n              'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  editorActor\n                    .getSnapshot()\n                    .context.schema.decorators.find(\n                      ({name}) => name === decorator,\n                    ),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport {createOperationToPatches} from '../../internal-utils/operationToPatches'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor} = options\n  const operationToPatches = createOperationToPatches(editorActor)\n  const withObjectKeys = createWithObjectKeys(editorActor)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor)\n  const withPortableTextBlockStyle =\n    createWithPortableTextBlockStyle(editorActor)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n  })\n  const withPortableTextSelections =\n    createWithPortableTextSelections(editorActor)\n  const withEventListeners = createWithEventListeners(editorActor)\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPlaceholderBlock(\n              withUtils(\n                withMaxBlocks(\n                  withUndoRedo(withPatches(withPortableTextSelections(e))),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {\n  KEY_TO_SLATE_ELEMENT,\n  KEY_TO_VALUE_ELEMENT,\n} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n}\n\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nconst slateEditors = new WeakMap<EditorActor, SlateEditor>()\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  const existingSlateEditor = slateEditors.get(config.editorActor)\n\n  if (existingSlateEditor) {\n    debug('Reusing existing Slate editor instance', config.editorActor.id)\n    return existingSlateEditor\n  }\n\n  debug('Creating new Slate editor instance', config.editorActor.id)\n\n  const unsubscriptions: Array<() => void> = []\n  const subscriptions: Array<() => () => void> = []\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  for (const subscription of subscriptions) {\n    unsubscriptions.push(subscription())\n  }\n\n  const initialValue = [instance.pteCreateTextBlock({decorators: []})]\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  slateEditors.set(config.editorActor, slateEditor)\n\n  return slateEditor\n}\n","import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function createLegacySchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {defineField, defineType, type ObjectSchemaType} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\n\n/**\n * @public\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n}\n\nexport type FieldDefinition = {\n  name: string\n  type: 'string' | 'number' | 'boolean' | 'array' | 'object'\n}\n\n/**\n * @public\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  inlineObjects?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  annotations?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @public\n * A helper wrapper that adds editor support, such as autocomplete and type checking, for a schema definition.\n * @example\n * ```ts\n * import { defineSchema } from '@portabletext/editor'\n *\n * const schemaDefinition = defineSchema({\n *  decorators: [{name: 'strong'}, {name: 'em'}, {name: 'underline'}],\n *  annotations: [{name: 'link'}],\n *  styles: [\n *    {name: 'normal'},\n *    {name: 'h1'},\n *    {name: 'h2'},\n *    {name: 'h3'},\n *    {name: 'blockquote'},\n *  ],\n *  lists: [],\n *  inlineObjects: [],\n *  blockObjects: [],\n * }\n * ```\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\nconst temporaryImageName = `tmp-${defaultKeyGenerator()}-image`\nconst temporaryUrlName = `tmp-${defaultKeyGenerator()}-url`\n\nconst temporaryObjectNames: Record<string, string> = {\n  image: temporaryImageName,\n  url: temporaryUrlName,\n}\n\nconst objectNames: Record<string, string> = {\n  [temporaryImageName]: 'image',\n  [temporaryUrlName]: 'url',\n}\n\nconst defaultObjectTitles: Record<string, string> = {\n  image: 'Image',\n  url: 'URL',\n}\n\n/**\n * @public\n */\nexport type EditorSchema = {\n  annotations: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  block: {\n    name: string\n  }\n  blockObjects: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  decorators: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n  inlineObjects: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  span: {\n    name: string\n  }\n  styles: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n  lists: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n}\n\nexport function legacySchemaToEditorSchema(\n  schema: PortableTextMemberSchemaTypes,\n): EditorSchema {\n  return {\n    annotations: schema.annotations.map((annotation) => ({\n      name: annotation.name,\n      fields: annotation.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: annotation.title,\n    })),\n    block: {\n      name: schema.block.name,\n    },\n    blockObjects: schema.blockObjects.map((blockObject) => ({\n      name: blockObject.name,\n      fields: blockObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: blockObject.title,\n    })),\n    decorators: schema.decorators.map((decorator) => ({\n      name: decorator.value,\n      title: decorator.title,\n      value: decorator.value,\n    })),\n    inlineObjects: schema.inlineObjects.map((inlineObject) => ({\n      name: inlineObject.name,\n      fields: inlineObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: inlineObject.title,\n    })),\n    span: {\n      name: schema.span.name,\n    },\n    styles: schema.styles.map((style) => ({\n      name: style.value,\n      title: style.title,\n      value: style.value,\n    })),\n    lists: schema.lists.map((list) => ({\n      name: list.value,\n      title: list.title,\n      value: list.value,\n    })),\n  }\n}\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition: TSchemaDefinition): EditorSchema {\n  return legacySchemaToEditorSchema(\n    compileSchemaDefinitionToLegacySchema(definition),\n  )\n}\n\nexport function compileSchemaDefinitionToLegacySchema<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition): PortableTextMemberSchemaTypes {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with certain names.\n        name: temporaryObjectNames[blockObject.name] ?? blockObject.name,\n        title:\n          blockObject.title === undefined\n            ? // This avoids the default title which is a title case of the object name\n              defaultObjectTitles[blockObject.name]\n            : blockObject.title,\n        fields:\n          blockObject.fields?.map((field) => ({\n            name: field.name,\n            type: field.type,\n          })) ?? [],\n      }),\n    ) ?? []\n\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with certain names.\n        name: temporaryObjectNames[inlineObject.name] ?? inlineObject.name,\n\n        title:\n          inlineObject.title === undefined\n            ? // This avoids the default title which is a title case of the object name\n              defaultObjectTitles[inlineObject.name]\n            : inlineObject.title,\n        fields:\n          inlineObject.fields?.map((field) => ({\n            name: field.name,\n            type: field.type,\n          })) ?? [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n              fields:\n                annotation.fields?.map((field) => ({\n                  name: field.name,\n                  type: field.type,\n                })) ?? [],\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createLegacySchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      objectNames[blockObject.name] !== undefined\n        ? ({\n            ...blockObject,\n            name: objectNames[blockObject.name],\n            type: {\n              ...blockObject.type,\n              name: objectNames[blockObject.name],\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n    inlineObjects: pteSchema.inlineObjects.map((inlineObject) =>\n      objectNames[inlineObject.name] !== undefined\n        ? ({\n            ...inlineObject,\n            name: objectNames[inlineObject.name],\n          } as ObjectSchemaType)\n        : inlineObject,\n    ),\n  } satisfies PortableTextMemberSchemaTypes\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\n\nexport function slateChildrenToBlocks(\n  schema: EditorSchema,\n  value: Array<Descendant>,\n): Array<PortableTextBlock> {\n  const blocks: Array<PortableTextBlock> = new Array(value.length)\n\n  for (let blockIndex = 0; blockIndex < value.length; blockIndex++) {\n    const descendant = value[blockIndex]\n\n    if (descendant._type !== schema.block.name) {\n      blocks[blockIndex] = {\n        _key: descendant._key,\n        _type: descendant._type,\n        ...('value' in descendant && typeof descendant.value === 'object'\n          ? descendant.value\n          : {}),\n      }\n      continue\n    }\n\n    const children = 'children' in descendant ? descendant.children : []\n    const processedChildren = new Array(children.length)\n\n    for (let childIndex = 0; childIndex < children.length; childIndex++) {\n      const child = children[childIndex]\n      processedChildren[childIndex] =\n        child._type === schema.span.name\n          ? child\n          : {\n              _key: child._key,\n              _type: child._type,\n              ...('value' in child && typeof child.value === 'object'\n                ? child.value\n                : {}),\n            }\n    }\n\n    blocks[blockIndex] = {\n      ...descendant,\n      children: processedChildren,\n    }\n  }\n\n  return blocks\n}\n","import {Editor} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\nexport function getActiveDecorators({\n  schema,\n  slateEditorInstance,\n}: {\n  schema: EditorSchema\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.name)\n\n  const marks =\n    {\n      ...(Editor.marks(slateEditorInstance) ?? {}),\n    }.marks ?? []\n\n  return marks.filter((mark) => decorators.includes(mark))\n}\n","import {useSelector} from '@xstate/react'\nimport {slateChildrenToBlocks} from '../internal-utils/slate-children-to-blocks'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {Editor, InternalEditor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getActiveDecorators} from './get-active-decorators'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n * Hook to select a value from the editor state.\n * @example\n * Pass a selector as the second argument\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const value = useEditorSelector(editor, selector)\n * }\n * ```\n * @example\n * Pass an inline selector as the second argument.\n * In this case, use the editor context to obtain the schema.\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const schema = useEditorSelector(editor, (snapshot) => snapshot.context.schema)\n * }\n * ```\n * @group Hooks\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    (editor as InternalEditor)._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: (editor as InternalEditor)._internal.slateEditor\n          .instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      activeDecorators: getActiveDecorators({\n        schema: editorActorSnapshot.context.schema,\n        slateEditorInstance,\n      }),\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({'edit mode': 'read only'}),\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: slateChildrenToBlocks(\n        editorActorSnapshot.context.schema,\n        slateEditorInstance.children,\n      ),\n    },\n    beta: {\n      hasTag: (tag) => editorActorSnapshot.hasTag(tag),\n      internalDrag: editorActorSnapshot.context.internalDrag,\n    },\n  }\n}\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {addAnnotationActionImplementation} from '../../behavior-actions/behavior.action.annotation.add'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {toSlateRange} from '../../internal-utils/ranges'\nimport {\n  isListItemActive,\n  isStyleActive,\n  slateRangeToSelection,\n} from '../../internal-utils/slate-utils'\nimport {fromSlateValue, toSlateValue} from '../../internal-utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../internal-utils/weakMaps'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {isDecoratorActive} from './createWithPortableTextMarkModel'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'focus',\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'blur',\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      // Try/catch this, as Slate may error because the selection is currently wrong\n      // TODO: catch only relevant error from Slate\n      try {\n        return isDecoratorActive({editor, decorator: mark})\n      } catch (err) {\n        console.warn(err)\n        return false\n      }\n    },\n    marks: (): string[] => {\n      return (\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      )\n    },\n    undo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n    },\n    redo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n    },\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return editor.selection\n          ? (slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor,\n              range: editor.selection,\n            })?.focus.path ?? [])\n          : []\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block',\n          block: {\n            _type: type.name,\n            ...(value ? value : {}),\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      return isAnnotationActive({editor, annotation: {name: annotationType}})\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          action: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n\nfunction isAnnotationActive({\n  editor,\n  annotation,\n}: {\n  editor: PortableTextSlateEditor\n  annotation: {\n    name: string\n  }\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2) {\n    return false\n  }\n\n  try {\n    const spans = [\n      ...Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => Text.isText(node),\n      }),\n    ]\n\n    if (spans.length === 0) {\n      return false\n    }\n\n    if (\n      spans.some(\n        ([span]) =>\n          !isPortableTextSpan(span) || !span.marks || span.marks?.length === 0,\n      )\n    )\n      return false\n\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = Editor.node(editor, path, {depth: 1})\n      if (editor.isTextBlock(block) && block.markDefs) {\n        return [...accMarkDefs, ...block.markDefs]\n      }\n      return accMarkDefs\n    }, [] as PortableTextObject[])\n\n    return spans.every(([span]) => {\n      if (!isPortableTextSpan(span)) return false\n\n      const spanMarkDefs = span.marks?.map(\n        (markKey) =>\n          selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n      )\n\n      return spanMarkDefs?.includes(annotation.name)\n    })\n  } catch {\n    return false\n  }\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  PortableTextBlock,\n} from '@sanity/types'\nimport type {ActorRef, EventObject, Snapshot} from 'xstate'\nimport type {Behavior} from '../behaviors/behavior.types.behavior'\nimport type {ExternalBehaviorEvent} from '../behaviors/behavior.types.event'\nimport {createCoreConverters} from '../converters/converters.core'\nimport {compileType} from '../internal-utils/schema'\nimport type {EditableAPI} from '../types/editor'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport type {\n  EditorActor,\n  EditorEmittedEvent,\n  ExternalEditorEvent,\n} from './editor-machine'\nimport {\n  compileSchemaDefinitionToLegacySchema,\n  legacySchemaToEditorSchema,\n  type SchemaDefinition,\n} from './editor-schema'\nimport {getEditorSnapshot} from './editor-selector'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\n\n/**\n * @public\n */\nexport type EditorConfig = {\n  /**\n   * @beta\n   */\n  behaviors?: Array<Behavior>\n  keyGenerator?: () => string\n  /**\n   * @deprecated Will be removed in the next major version\n   */\n  maxBlocks?: number\n  readOnly?: boolean\n  initialValue?: Array<PortableTextBlock>\n} & (\n  | {\n      schemaDefinition: SchemaDefinition\n      schema?: undefined\n    }\n  | {\n      schemaDefinition?: undefined\n      schema: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n    }\n)\n\n/**\n * @public\n */\nexport type EditorEvent = ExternalEditorEvent | ExternalBehaviorEvent\n\n/**\n * @public\n */\nexport type Editor = {\n  getSnapshot: () => EditorSnapshot\n  /**\n   * @beta\n   */\n  registerBehavior: (config: {behavior: Behavior}) => () => void\n  send: (event: EditorEvent) => void\n  on: ActorRef<Snapshot<unknown>, EventObject, EditorEmittedEvent>['on']\n}\n\nexport type InternalEditor = Editor & {\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nfunction compileSchemasFromEditorConfig(config: EditorConfig) {\n  const legacySchema = config.schemaDefinition\n    ? compileSchemaDefinitionToLegacySchema(config.schemaDefinition)\n    : createLegacySchema(\n        config.schema.hasOwnProperty('jsonType')\n          ? config.schema\n          : compileType(config.schema),\n      )\n  const schema = legacySchemaToEditorSchema(legacySchema)\n\n  return {\n    legacySchema,\n    schema,\n  }\n}\n\nexport function editorConfigToMachineInput(config: EditorConfig) {\n  const {legacySchema, schema} = compileSchemasFromEditorConfig(config)\n\n  return {\n    behaviors: config.behaviors,\n    converters: createCoreConverters(legacySchema),\n    getLegacySchema: () => legacySchema,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema,\n    initialValue: config.initialValue,\n  } as const\n}\n\nexport function createInternalEditor(editorActor: EditorActor): InternalEditor {\n  const slateEditor = createSlateEditor({editorActor})\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n\n  return {\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    registerBehavior: (config) => {\n      editorActor.send({\n        type: 'add behavior',\n        behavior: config.behavior,\n      })\n\n      return () => {\n        editorActor.send({\n          type: 'remove behavior',\n          behavior: config.behavior,\n        })\n      }\n    },\n    send: (event) => {\n      switch (event.type) {\n        case 'add behavior':\n        case 'remove behavior':\n        case 'update behaviors':\n        case 'update key generator':\n        case 'update readOnly':\n        case 'patches':\n        case 'update value':\n        case 'update schema':\n        case 'update maxBlocks':\n          editorActor.send(event)\n          break\n\n        case 'blur':\n          editorActor.send({\n            type: 'blur',\n            editor: slateEditor.instance,\n          })\n          break\n\n        case 'focus':\n          editorActor.send({\n            type: 'focus',\n            editor: slateEditor.instance,\n          })\n          break\n\n        case 'insert.block object':\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: {\n              type: 'insert.block',\n              block: {\n                _type: event.blockObject.name,\n                ...(event.blockObject.value ?? {}),\n              },\n              placement: event.placement,\n            },\n            editor: slateEditor.instance,\n          })\n          break\n\n        default:\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: event,\n            editor: slateEditor.instance,\n          })\n      }\n    },\n    on: (event, listener) => {\n      const subscription = editorActor.on(event, (event) => {\n        switch (event.type) {\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'error':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n            listener(event)\n            break\n        }\n      })\n\n      return subscription\n    },\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  }\n}\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","import {isActiveAnnotation} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractAnnotationBehaviors = [\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.remove', annotation: event.annotation}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      !isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.add', annotation: event.annotation}),\n      ],\n    ],\n  }),\n]\n","import {isActiveDecorator} from '../selectors'\nimport {blockOffsetsToSelection} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDecoratorBehaviors = [\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => isActiveDecorator(event.decorator)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'decorator.remove', decorator: event.decorator}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => {\n      const manualSelection = event.at\n        ? blockOffsetsToSelection({\n            value: snapshot.context.value,\n            offsets: event.at,\n          })\n        : null\n\n      if (manualSelection) {\n        return !isActiveDecorator(event.decorator)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: manualSelection,\n          },\n        })\n      }\n\n      return !isActiveDecorator(event.decorator)(snapshot)\n    },\n    actions: [\n      ({event}) => [\n        raise({\n          ...event,\n          type: 'decorator.add',\n        }),\n      ],\n    ],\n  }),\n]\n","import * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDeleteBehaviors = [\n  defineBehavior({\n    on: 'delete.text',\n    guard: ({snapshot, event}) => {\n      const selection = utils.blockOffsetsToSelection({\n        value: snapshot.context.value,\n        offsets: event.at,\n      })\n\n      if (!selection) {\n        return false\n      }\n\n      const trimmedSelection = selectors.getTrimmedSelection({\n        beta: {hasTag: () => false, internalDrag: undefined},\n        context: {\n          converters: [],\n          schema: snapshot.context.schema,\n          keyGenerator: snapshot.context.keyGenerator,\n          activeDecorators: [],\n          readOnly: false,\n          value: snapshot.context.value,\n          selection,\n        },\n      })\n\n      if (!trimmedSelection) {\n        return false\n      }\n\n      return {\n        selection: trimmedSelection,\n      }\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n]\n","import {getFocusTextBlock} from '../selectors'\nimport {isEmptyTextBlock} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractInsertBehaviors = [\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'before',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'before' : 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'after',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'auto') {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      return {focusTextBlock}\n    },\n    actions: [\n      ({event}, {focusTextBlock}) =>\n        event.blocks.length === 1\n          ? [\n              raise({\n                type: 'insert.block',\n                block: event.blocks[0],\n                placement: 'auto',\n                select: 'end',\n              }),\n            ]\n          : isEmptyTextBlock(focusTextBlock.node)\n            ? event.blocks.map((block, index) =>\n                raise({\n                  type: 'insert.block',\n                  block,\n                  placement: index === 0 ? 'auto' : 'after',\n                  select: 'end',\n                }),\n              )\n            : event.blocks.flatMap((block, index) =>\n                index === 0\n                  ? [\n                      raise({\n                        type: 'split',\n                      }),\n                      raise({\n                        type: 'select.previous block',\n                        select: 'end',\n                      }),\n                      raise({\n                        type: 'insert.block',\n                        block,\n                        placement: 'auto',\n                        select: 'end',\n                      }),\n                    ]\n                  : index === event.blocks.length - 1\n                    ? [\n                        raise({\n                          type: 'select.next block',\n                          select: 'start',\n                        }),\n                        raise({\n                          type: 'insert.block',\n                          block,\n                          placement: 'auto',\n                          select: 'end',\n                        }),\n                      ]\n                    : [\n                        raise({\n                          type: 'insert.block',\n                          block,\n                          placement: 'after',\n                          select: 'end',\n                        }),\n                      ],\n              ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'auto',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'auto' : 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.break',\n    actions: [() => [raise({type: 'split'})]],\n  }),\n  defineBehavior({\n    on: 'insert.soft break',\n    actions: [() => [raise({type: 'insert.text', text: '\\n'})]],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveListItem} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractListItemBehaviors = [\n  defineBehavior({\n    on: 'list item.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              level: 1,\n              listItem: event.listItem,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['level', 'listItem'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'list item.remove', listItem: event.listItem}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => !isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [raise({type: 'list item.add', listItem: event.listItem})],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractMoveBehaviors = [\n  defineBehavior({\n    on: 'move.block up',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (previousBlock) {\n        return {previousBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {previousBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: previousBlock.path,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'move.block down',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (nextBlock) {\n        return {nextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {nextBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: nextBlock.path,\n        }),\n      ],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {getBlockEndPoint, getBlockStartPoint} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSelectBehaviors = [\n  defineBehavior({\n    on: 'select.previous block',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock(snapshot)\n\n      if (!previousBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint(previousBlock)\n          : getBlockStartPoint(previousBlock)\n\n      return {\n        selection: {\n          anchor: point,\n          focus: point,\n        },\n      }\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.next block',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock(snapshot)\n\n      if (!nextBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint(nextBlock)\n          : getBlockStartPoint(nextBlock)\n\n      return {selection: {anchor: point, focus: point}}\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n]\n","import {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {getSelectionStartPoint} from '../utils'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {sliceBlocks} from '../utils/util.slice-blocks'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSplitBehaviors = [\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      const selectionStartPoint = getSelectionStartPoint(\n        snapshot.context.selection,\n      )\n      const selectionEndPoint = getSelectionEndPoint(snapshot.context.selection)\n\n      const focusTextBlock = selectors.getFocusTextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: selectionStartPoint,\n            focus: selectionEndPoint,\n          },\n        },\n      })\n\n      if (focusTextBlock) {\n        const blockEndPoint = getBlockEndPoint(focusTextBlock)\n        const newTextBlockSelection = {\n          anchor: selectionEndPoint,\n          focus: blockEndPoint,\n        }\n        const newTextBlock = parseBlock({\n          block: sliceBlocks({\n            blocks: [focusTextBlock.node],\n            selection: newTextBlockSelection,\n          }).at(0),\n          context: snapshot.context,\n          options: {refreshKeys: true},\n        })\n\n        if (\n          !newTextBlock ||\n          !isTextBlock(snapshot.context.schema, newTextBlock)\n        ) {\n          return false\n        }\n\n        return {\n          newTextBlock,\n          newTextBlockSelection,\n          selection: {\n            anchor: selectionStartPoint,\n            focus: blockEndPoint,\n          },\n        }\n      }\n\n      const focusBlockObject = selectors.getFocusBlockObject({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: selectionStartPoint,\n            focus: selectionEndPoint,\n          },\n        },\n      })\n\n      if (focusBlockObject) {\n        const newTextBlock = parseBlock({\n          block: {\n            _type: snapshot.context.schema.block.name,\n            children: [],\n          },\n          context: snapshot.context,\n          options: {refreshKeys: true},\n        })\n\n        if (!newTextBlock) {\n          return false\n        }\n\n        return {\n          newTextBlock,\n          newTextBlockSelection: {\n            anchor: selectionEndPoint,\n            focus: selectionEndPoint,\n          },\n          selection: snapshot.context.selection,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {newTextBlock, selection}) => [\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n        raise({\n          type: 'insert.block',\n          block: newTextBlock,\n          placement: 'after',\n          select: 'start',\n        }),\n      ],\n    ],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveStyle} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractStyleBehaviors = [\n  defineBehavior({\n    on: 'style.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              style: event.style,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['style'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.remove', style: event.style})]],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => !isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.add', style: event.style})]],\n  }),\n]\n","export const keyIs = {\n  lineBreak: (event) => event.key === 'Enter' && event.shiftKey,\n} satisfies Record<string, KeyboardEventPredicate>\n\ntype KeyboardEventPredicate = (\n  event: Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  >,\n) => boolean\n","import {keyIs} from '../internal-utils/key-is'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\n/**\n * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n * than an `insertLineBreak` input event. This Behavior makes sure we catch\n * that `keyboard.keydown` event beforehand and raise an `insert.soft break` manually.\n */\nexport const raiseInsertSoftBreak = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({event}) => keyIs.lineBreak(event.originEvent),\n  actions: [() => [raise({type: 'insert.soft break'})]],\n})\n","import type {ConverterEvent} from '../converters/converter.types'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport type {PickFromUnion} from '../type-utils'\nimport {getTextBlockText} from '../utils'\nimport {abstractAnnotationBehaviors} from './behavior.abstract.annotation'\nimport {abstractDecoratorBehaviors} from './behavior.abstract.decorator'\nimport {abstractDeleteBehaviors} from './behavior.abstract.delete'\nimport {abstractInsertBehaviors} from './behavior.abstract.insert'\nimport {abstractListItemBehaviors} from './behavior.abstract.list-item'\nimport {abstractMoveBehaviors} from './behavior.abstract.move'\nimport {abstractSelectBehaviors} from './behavior.abstract.select'\nimport {abstractSplitBehaviors} from './behavior.abstract.split'\nimport {abstractStyleBehaviors} from './behavior.abstract.style'\nimport {raiseInsertSoftBreak} from './behavior.default.raise-soft-break'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst raiseDeserializationSuccessOrFailure = defineBehavior({\n  on: 'deserialize',\n  guard: ({snapshot, event}) => {\n    let success:\n      | PickFromUnion<ConverterEvent, 'type', 'deserialization.success'>\n      | undefined\n    const failures: Array<\n      PickFromUnion<ConverterEvent, 'type', 'deserialization.failure'>\n    > = []\n\n    for (const converter of snapshot.context.converters) {\n      const data = event.originEvent.originEvent.dataTransfer.getData(\n        converter.mimeType,\n      )\n\n      if (!data) {\n        continue\n      }\n\n      const deserializeEvent = converter.deserialize({\n        snapshot,\n        event: {type: 'deserialize', data},\n      })\n\n      if (deserializeEvent.type === 'deserialization.success') {\n        success = deserializeEvent\n        break\n      } else {\n        failures.push(deserializeEvent)\n      }\n    }\n\n    if (!success) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: '*/*',\n        reason: failures.map((failure) => failure.reason).join(', '),\n      } as const\n    }\n\n    return success\n  },\n  actions: [\n    ({event}, deserializeEvent) => [\n      raise({\n        ...deserializeEvent,\n        originEvent: event.originEvent,\n      }),\n    ],\n  ],\n})\n\nconst raiseSerializationSuccessOrFailure = defineBehavior({\n  on: 'serialize',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.converters.length === 0) {\n      return false\n    }\n\n    const serializeEvents = snapshot.context.converters.map((converter) =>\n      converter.serialize({\n        snapshot,\n        event: {\n          ...event,\n          originEvent: event.originEvent.type,\n        },\n      }),\n    )\n\n    if (serializeEvents.length === 0) {\n      return false\n    }\n\n    return serializeEvents\n  },\n  actions: [\n    ({event}, serializeEvents) =>\n      serializeEvents.map((serializeEvent) => {\n        return raise({\n          ...serializeEvent,\n          originEvent: event.originEvent,\n        })\n      }),\n  ],\n})\n\nexport const defaultBehaviors = [\n  defineBehavior({\n    on: 'clipboard.copy',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [() => [{type: 'noop'}]],\n  }),\n  defineBehavior({\n    on: 'clipboard.copy',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [() => [{type: 'noop'}]],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection\n        ? {\n            selection: snapshot.context.selection,\n          }\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.dragstart',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.success',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            event.originEvent.originEvent.dataTransfer.setData(\n              event.mimeType,\n              event.data,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = snapshot.beta.internalDrag?.origin\n      const dropPosition = event.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n      return droppingOnDragOrigin\n    },\n    actions: [() => [{type: 'noop'}]],\n  }),\n  defineBehavior({\n    on: 'drag.drop',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'select',\n          at: event.position.selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      if (\n        event.originEvent.type !== 'drag.drop' ||\n        snapshot.beta.internalDrag === undefined\n      ) {\n        return false\n      }\n\n      const dragOrigin = snapshot.beta.internalDrag.origin\n      const dropPosition = event.originEvent.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection,\n        },\n      })\n\n      const draggedBlocks = selectors.getSelectedBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection,\n        },\n      })\n\n      if (!droppingOnDragOrigin) {\n        return {\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          originEvent: event.originEvent,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (\n        {event},\n        {draggingEntireBlocks, draggedBlocks, dragOrigin, originEvent},\n      ) => [\n        ...(draggingEntireBlocks\n          ? draggedBlocks.map((block) =>\n              raise({\n                type: 'delete.block',\n                at: block.path,\n              }),\n            )\n          : [\n              raise({\n                type: 'delete',\n                at: dragOrigin.selection,\n              }),\n            ]),\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: draggingEntireBlocks\n            ? originEvent.position.block === 'start'\n              ? 'before'\n              : originEvent.position.block === 'end'\n                ? 'after'\n                : 'auto'\n            : 'auto',\n        }),\n      ],\n    ],\n  }),\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        focusTextBlock &&\n        event.mimeType === 'text/plain' &&\n        event.originEvent.type === 'clipboard.paste'\n      ) {\n        const activeDecorators = snapshot.context.activeDecorators\n        const activeAnnotations = selectors.getActiveAnnotations(snapshot)\n\n        return {\n          activeAnnotations,\n          activeDecorators,\n          textRuns: event.data.flatMap((block) =>\n            isTextBlock(snapshot.context.schema, block)\n              ? [getTextBlockText(block)]\n              : [],\n          ),\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {activeAnnotations, activeDecorators, textRuns}) =>\n        textRuns.flatMap((textRun, index) =>\n          index !== textRuns.length - 1\n            ? [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n                raise({type: 'insert.break'}),\n              ]\n            : [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n              ],\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: 'auto',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection &&\n        selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'input.*',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  ...abstractAnnotationBehaviors,\n  ...abstractDecoratorBehaviors,\n  ...abstractDeleteBehaviors,\n  ...abstractInsertBehaviors,\n  ...abstractListItemBehaviors,\n  ...abstractMoveBehaviors,\n  ...abstractStyleBehaviors,\n  ...abstractSelectBehaviors,\n  ...abstractSplitBehaviors,\n  raiseDeserializationSuccessOrFailure,\n  raiseSerializationSuccessOrFailure,\n  raiseInsertSoftBreak,\n]\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {TextUnit} from 'slate'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport type {MIMEType} from '../internal-utils/mime-type'\nimport type {PickFromUnion, StrictExtract} from '../type-utils'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {BlockWithOptionalKey} from '../types/block-with-optional-key'\nimport type {EditorSelection} from '../types/editor'\n\n/**\n * @beta\n */\nexport type BehaviorEvent =\n  | SyntheticBehaviorEvent\n  | AbstractBehaviorEvent\n  | NativeBehaviorEvent\n  | CustomBehaviorEvent\n\nexport type BehaviorEventTypeNamespace =\n  | SyntheticBehaviorEventNamespace\n  | AbstractBehaviorEventNamespace\n  | NativeBehaviorEventNamespace\n  | CustomBehaviorEventNamespace\n\ntype NamespacedBehaviorEventType<\n  TNamespace extends BehaviorEventTypeNamespace | '',\n> = TNamespace extends ''\n  ? BehaviorEvent['type']\n  : Extract<BehaviorEvent['type'], TNamespace | `${TNamespace}.${string}`>\n\n/**************************************\n * External events\n **************************************/\n\ntype ExternalBehaviorEventNamespace = 'blur' | 'focus' | 'insert'\n\ntype ExternalBehaviorEventType<\n  TNamespace extends ExternalBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\nexport type ExternalBehaviorEvent =\n  | {\n      type: ExternalBehaviorEventType<'blur'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'focus'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'insert', 'block object'>\n      placement: InsertPlacement\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | AbstractBehaviorEvent\n  | SyntheticBehaviorEvent\n  | CustomBehaviorEvent\n\n/**************************************\n * Synthetic events\n **************************************/\n\nconst syntheticBehaviorEventTypes = [\n  'annotation.add',\n  'annotation.remove',\n  'block.set',\n  'block.unset',\n  'decorator.add',\n  'decorator.remove',\n  'delete',\n  'delete.backward',\n  'delete.block',\n  'delete.forward',\n  'history.redo',\n  'history.undo',\n  'insert.inline object',\n  'insert.block',\n  'insert.span',\n  'insert.text',\n  'move.backward',\n  'move.block',\n  'move.forward',\n  'select',\n] as const\n\ntype SyntheticBehaviorEventType = (typeof syntheticBehaviorEventTypes)[number]\n\ntype SyntheticBehaviorEventNamespace =\n  ExtractNamespace<SyntheticBehaviorEventType>\n\n/**\n * @beta\n */\nexport type SyntheticBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.add'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.remove'>\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.set'>\n      at: [KeyedSegment]\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.unset'>\n      at: [KeyedSegment]\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.add'>\n      decorator: string\n      at?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.remove'>\n      decorator: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete'>\n      at: NonNullable<EditorSelection>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.backward'>\n      unit: TextUnit\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.block'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.forward'>\n      unit: TextUnit\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.redo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.undo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.inline object'>\n      inlineObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.block'>\n      block: BlockWithOptionalKey\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.span'>\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.text'>\n      text: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.backward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block'>\n      at: [KeyedSegment]\n      to: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.forward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select'>\n      at: EditorSelection\n    }\n\nexport type InsertPlacement = 'auto' | 'after' | 'before'\n\nexport function isKeyboardBehaviorEvent(\n  event: BehaviorEvent,\n): event is KeyboardBehaviorEvent {\n  return event.type.startsWith('keyboard.')\n}\n\n/**************************************\n * Abstract events\n **************************************/\n\nconst abstractBehaviorEventTypes = [\n  'annotation.toggle',\n  'decorator.toggle',\n  'delete.text',\n  'deserialize',\n  'deserialization.success',\n  'deserialization.failure',\n  'insert.blocks',\n  'insert.break',\n  'insert.soft break',\n  'list item.add',\n  'list item.remove',\n  'list item.toggle',\n  'move.block down',\n  'move.block up',\n  'select.previous block',\n  'select.next block',\n  'serialize',\n  'serialization.success',\n  'serialization.failure',\n  'split',\n  'style.add',\n  'style.remove',\n  'style.toggle',\n] as const\n\ntype AbstractBehaviorEventType = (typeof abstractBehaviorEventTypes)[number]\n\ntype AbstractBehaviorEventNamespace =\n  ExtractNamespace<AbstractBehaviorEventType>\n\nexport type AbstractBehaviorEvent =\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'annotation.toggle'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'decorator.toggle'>\n      decorator: string\n      at?: {anchor: BlockOffset; focus: BlockOffset}\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'delete.text'>\n      at: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'deserialize'>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'serialize'>\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'deserialization.success'>\n      mimeType: MIMEType\n      data: Array<PortableTextBlock>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'deserialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'serialization.success'>\n      mimeType: MIMEType\n      data: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'serialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'insert.blocks'>\n      blocks: Array<PortableTextBlock>\n      placement: InsertPlacement\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'insert.break'>\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'insert.soft break'>\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'list item.add'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'list item.remove'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'list item.toggle'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'move.block down'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'move.block up'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'select.previous block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'select.next block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'split'>\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'style.add'>\n      style: string\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'style.remove'>\n      style: string\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'style.toggle'>\n      style: string\n    }\n\nexport function isAbstractBehaviorEvent(\n  event: BehaviorEvent,\n): event is AbstractBehaviorEvent {\n  return (abstractBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**************************************\n * Native events\n **************************************/\n\nconst nativeBehaviorEventTypes = [\n  'clipboard.copy',\n  'clipboard.cut',\n  'clipboard.paste',\n  'drag.dragstart',\n  'drag.drag',\n  'drag.dragend',\n  'drag.dragenter',\n  'drag.dragover',\n  'drag.dragleave',\n  'drag.drop',\n  'input.*',\n  'keyboard.keydown',\n  'keyboard.keyup',\n  'mouse.click',\n] as const\n\ntype NativeBehaviorEventType = (typeof nativeBehaviorEventTypes)[number]\n\ntype NativeBehaviorEventNamespace = ExtractNamespace<NativeBehaviorEventType>\n\nexport function isNativeBehaviorEvent(\n  event: BehaviorEvent,\n): event is NativeBehaviorEvent {\n  return (nativeBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**\n * @beta\n */\nexport type NativeBehaviorEvent =\n  | ClipboardBehaviorEvent\n  | DragBehaviorEvent\n  | InputBehaviorEvent\n  | KeyboardBehaviorEvent\n  | MouseBehaviorEvent\n\ntype ClipboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.copy'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.cut'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.paste'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n\ntype DragBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragstart'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drag'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragend'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragenter'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragover'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drop'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragleave'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n\n/**\n * Used to represent native InputEvents that hold a DataTransfer object.\n *\n * These can either be one of:\n *\n * - insertFromPaste\n * - insertFromPasteAsQuotation\n * - insertFromDrop\n * - insertReplacementText\n * - insertFromYank\n */\nexport type InputBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'input.*'>\n  originEvent: {\n    dataTransfer: DataTransfer\n  }\n}\n\nexport type KeyboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keydown'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keyup'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n\nexport type MouseBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'mouse.click'>\n  position: EventPosition\n}\n\n/**************************************\n * Custom events\n **************************************/\n\ntype CustomBehaviorEventNamespace = 'custom'\n\ntype CustomBehaviorEventType<\n  TNamespace extends CustomBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\n/**\n * @beta\n */\nexport type CustomBehaviorEvent<\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n  TType extends string = string,\n  TInternalType extends CustomBehaviorEventType<\n    'custom',\n    TType\n  > = CustomBehaviorEventType<'custom', TType>,\n> = {\n  type: TInternalType\n} & TPayload\n\nexport function isCustomBehaviorEvent(\n  event: BehaviorEvent,\n): event is CustomBehaviorEvent {\n  return event.type.startsWith('custom.')\n}\n\n/**************************************\n * Resolve behavior event\n **************************************/\n\nexport type ResolveBehaviorEvent<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n> = TBehaviorEventType extends '*'\n  ? BehaviorEvent\n  : TBehaviorEventType extends `${infer TNamespace}.*`\n    ? TNamespace extends BehaviorEventTypeNamespace\n      ? PickFromUnion<\n          BehaviorEvent,\n          'type',\n          NamespacedBehaviorEventType<TNamespace>\n        >\n      : never\n    : TBehaviorEventType extends `custom.${infer TType}`\n      ? CustomBehaviorEvent<TPayload, TType>\n      : TBehaviorEventType extends BehaviorEvent['type']\n        ? PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n        : never\n\ntype ExtractNamespace<TType extends string> =\n  TType extends `${infer Namespace}.${string}` ? Namespace : TType\n","import type {Behavior, BehaviorEvent} from '.'\nimport {performAction} from '../behavior-actions/behavior.actions'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {\n  withApplyingBehaviorActions,\n  withApplyingBehaviorActionSet,\n} from '../editor/with-applying-behavior-actions'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {defaultBehaviors} from './behavior.default'\nimport type {InternalBehaviorAction} from './behavior.types.action'\nimport {\n  isAbstractBehaviorEvent,\n  isCustomBehaviorEvent,\n  isNativeBehaviorEvent,\n} from './behavior.types.event'\n\nconst debug = debugWithName('behaviors:event')\n\nfunction eventCategory(event: BehaviorEvent) {\n  return isNativeBehaviorEvent(event)\n    ? 'native'\n    : isAbstractBehaviorEvent(event)\n      ? 'abstract'\n      : isCustomBehaviorEvent(event)\n        ? 'custom'\n        : 'synthetic'\n}\n\nexport function performEvent({\n  mode,\n  behaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent,\n}: {\n  mode: 'raise' | 'execute'\n  behaviors: Array<Behavior>\n  event: BehaviorEvent\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  schema: EditorSchema\n  getSnapshot: () => EditorSnapshot\n  nativeEvent:\n    | {\n        preventDefault: () => void\n      }\n    | undefined\n}) {\n  debug(`(${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n  const defaultAction =\n    isCustomBehaviorEvent(event) ||\n    isNativeBehaviorEvent(event) ||\n    isAbstractBehaviorEvent(event)\n      ? undefined\n      : ({\n          ...event,\n          editor,\n        } satisfies InternalBehaviorAction)\n\n  const eventBehaviors = (\n    mode === 'raise' ? [...behaviors, ...defaultBehaviors] : behaviors\n  ).filter((behavior) => {\n    // Catches all events\n    if (behavior.on === '*') {\n      return true\n    }\n\n    const [listenedNamespace] =\n      behavior.on.includes('*') && behavior.on.includes('.')\n        ? behavior.on.split('.')\n        : [undefined]\n    const [eventNamespace] = event.type.includes('.')\n      ? event.type.split('.')\n      : [undefined]\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select.block` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace !== undefined &&\n      listenedNamespace === eventNamespace\n    ) {\n      return true\n    }\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace === undefined &&\n      listenedNamespace === event.type\n    ) {\n      return true\n    }\n\n    return behavior.on === event.type\n  })\n\n  if (eventBehaviors.length === 0) {\n    if (!defaultAction) {\n      return\n    }\n\n    withApplyingBehaviorActions(editor, () => {\n      try {\n        performAction({\n          context: {\n            keyGenerator,\n            schema,\n          },\n          action: defaultAction,\n        })\n      } catch (error) {\n        console.error(\n          new Error(\n            `Performing action \"${defaultAction.type}\" as a result of \"${event.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n    })\n\n    editor.onChange()\n\n    return\n  }\n\n  const guardSnapshot = getSnapshot()\n\n  let behaviorOverwritten = false\n\n  for (const eventBehavior of eventBehaviors) {\n    const shouldRun =\n      eventBehavior.guard === undefined ||\n      eventBehavior.guard({\n        snapshot: guardSnapshot,\n        event,\n      })\n\n    if (!shouldRun) {\n      continue\n    }\n\n    for (const actionSet of eventBehavior.actions) {\n      const actionsSnapshot = getSnapshot()\n\n      const actions = actionSet(\n        {\n          snapshot: actionsSnapshot,\n          event,\n        },\n        shouldRun,\n      )\n\n      if (actions.length === 0) {\n        continue\n      }\n\n      behaviorOverwritten =\n        behaviorOverwritten ||\n        actions.some((action) => action.type !== 'effect')\n\n      withApplyingBehaviorActionSet(editor, () => {\n        for (const action of actions) {\n          if (action.type === 'raise') {\n            performEvent({\n              mode,\n              behaviors:\n                mode === 'execute'\n                  ? isCustomBehaviorEvent(action.event)\n                    ? [...behaviors, ...defaultBehaviors]\n                    : defaultBehaviors\n                  : [...behaviors, ...defaultBehaviors],\n              event: action.event,\n              editor,\n              keyGenerator,\n              schema,\n              getSnapshot,\n              nativeEvent: undefined,\n            })\n\n            continue\n          }\n\n          if (action.type === 'execute') {\n            if (\n              isAbstractBehaviorEvent(action.event) ||\n              isCustomBehaviorEvent(action.event)\n            ) {\n              performEvent({\n                mode: 'execute',\n                behaviors: isCustomBehaviorEvent(action.event)\n                  ? [...behaviors, ...defaultBehaviors]\n                  : defaultBehaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent: undefined,\n              })\n            } else {\n              const internalAction = {\n                ...action.event,\n                editor,\n              }\n              let actionFailed = false\n\n              withApplyingBehaviorActions(editor, () => {\n                try {\n                  performAction({\n                    context: {\n                      keyGenerator,\n                      schema,\n                    },\n                    action: internalAction,\n                  })\n                } catch (error) {\n                  console.error(\n                    new Error(\n                      `Performing action \"${action.event.type}\" as a result of \"${event.type}\" failed due to: ${error.message}`,\n                    ),\n                  )\n                  actionFailed = true\n                }\n              })\n\n              if (actionFailed) {\n                break\n              }\n\n              editor.onChange()\n            }\n\n            continue\n          }\n\n          const internalAction = {\n            ...action,\n            editor,\n          }\n          let actionFailed = false\n\n          withApplyingBehaviorActions(editor, () => {\n            try {\n              performAction({\n                context: {\n                  keyGenerator,\n                  schema,\n                },\n                action: internalAction,\n              })\n            } catch (error) {\n              console.error(\n                new Error(\n                  `Performing action \"${internalAction.type}\" as a result of \"${event.type}\" failed due to: ${error.message}`,\n                ),\n              )\n              actionFailed = true\n            }\n          })\n\n          if (actionFailed) {\n            break\n          }\n\n          editor.onChange()\n        }\n      })\n    }\n\n    if (behaviorOverwritten) {\n      nativeEvent?.preventDefault()\n      break\n    }\n  }\n\n  if (!behaviorOverwritten) {\n    if (!defaultAction) {\n      return\n    }\n\n    withApplyingBehaviorActions(editor, () => {\n      try {\n        performAction({\n          context: {\n            keyGenerator,\n            schema,\n          },\n          action: defaultAction,\n        })\n      } catch (error) {\n        console.error(\n          new Error(\n            `Performing action \"${defaultAction.type}\" as a result of \"${event.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n    })\n    editor.onChange()\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Converter} from '../converters/converter.types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {slateChildrenToBlocks} from '../internal-utils/slate-children-to-blocks'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport type {HasTag} from './editor-machine'\nimport type {EditorSchema} from './editor-schema'\nimport {getActiveDecorators} from './get-active-decorators'\n\n/**\n * @public\n */\nexport type EditorContext = {\n  activeDecorators: Array<string>\n  converters: Array<Converter>\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  selection: EditorSelection\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @public\n */\nexport type EditorSnapshot = {\n  context: EditorContext\n  /**\n   * @beta\n   * Do not rely on this externally\n   */\n  beta: {\n    hasTag: HasTag\n    internalDrag:\n      | {\n          origin: Pick<EventPosition, 'selection'>\n        }\n      | undefined\n  }\n}\n\nexport function createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema,\n  hasTag,\n  internalDrag,\n}: {\n  converters: Array<Converter>\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  hasTag: HasTag\n  internalDrag:\n    | {\n        origin: Pick<EventPosition, 'selection'>\n      }\n    | undefined\n}) {\n  const value = slateChildrenToBlocks(schema, editor.children)\n  const selection = editor.selection\n    ? slateRangeToSelection({\n        schema,\n        editor,\n        range: editor.selection,\n      })\n    : null\n\n  const context = {\n    activeDecorators: getActiveDecorators({\n      schema,\n      slateEditorInstance: editor,\n    }),\n    converters,\n    keyGenerator,\n    readOnly,\n    schema,\n    selection,\n    value,\n  } satisfies EditorContext\n\n  return {\n    context,\n    beta: {\n      hasTag,\n      internalDrag,\n    },\n  } satisfies EditorSnapshot\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport {coreBehaviors} from '../behaviors/behavior.core'\nimport {performEvent} from '../behaviors/behavior.perform-event'\nimport type {Behavior} from '../behaviors/behavior.types.behavior'\nimport type {BehaviorEvent} from '../behaviors/behavior.types.event'\nimport type {Converter} from '../converters/converter.types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport type {NamespaceEvent} from '../type-utils'\nimport type {\n  EditorSelection,\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {createEditorSnapshot} from './editor-snapshot'\n\nexport * from 'xstate/guards'\n\n/**\n * @public\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type ExternalEditorEvent =\n  | {\n      type: 'add behavior'\n      behavior: Behavior\n    }\n  | {\n      type: 'remove behavior'\n      behavior: Behavior\n    }\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update schema'\n      schema: EditorSchema\n    }\n  | {\n      type: 'update behaviors'\n      behaviors: Array<Behavior>\n    }\n  | {\n      type: 'update key generator'\n      keyGenerator: () => string\n    }\n  | {\n      type: 'update value'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | PatchesEvent\n\n/**\n * @public\n */\nexport type EditorEmittedEvent =\n  | {\n      type: 'blurred'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'done loading'\n    }\n  | {\n      type: 'editable'\n    }\n  | {\n      type: 'error'\n      name: string\n      description: string\n      data: unknown\n    }\n  | {\n      type: 'focused'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'loading'\n    }\n  | MutationEvent\n  | PatchEvent\n  | {\n      type: 'read only'\n    }\n  | {\n      type: 'ready'\n    }\n  | {\n      type: 'selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n\ntype PatchEvent = {\n  type: 'patch'\n  patch: Patch\n}\n\ntype InternalPatchEvent = NamespaceEvent<PatchEvent, 'internal'> & {\n  actionId?: string\n  value: Array<PortableTextBlock>\n}\n\ntype UnsetEvent = {\n  type: 'unset'\n  previousValue: Array<PortableTextBlock>\n}\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\nexport type HasTag = ReturnType<EditorActor['getSnapshot']>['hasTag']\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | ExternalEditorEvent\n  | {\n      type: 'blur'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'focus'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'normalizing'\n    }\n  | {\n      type: 'done normalizing'\n    }\n  | {\n      type: 'done syncing initial value'\n    }\n  | {\n      type: 'behavior event'\n      behaviorEvent: BehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | MutationEvent\n  | InternalPatchEvent\n  | NamespaceEvent<EditorEmittedEvent, 'notify'>\n  | NamespaceEvent<UnsetEvent, 'notify'>\n  | {\n      type: 'dragstart'\n      origin: Pick<EventPosition, 'selection'>\n      ghost?: HTMLElement\n    }\n  | {type: 'dragend'}\n  | {type: 'drop'}\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | EditorEmittedEvent\n  | InternalPatchEvent\n  | PatchesEvent\n  | UnsetEvent\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Set<Behavior>\n      converters: Set<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      pendingEvents: Array<InternalPatchEvent | MutationEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      incomingValue: Array<PortableTextBlock> | undefined\n      internalDrag?: {\n        ghost?: HTMLElement\n        origin: Pick<EventPosition, 'selection'>\n      }\n      slateEditor?: PortableTextSlateEditor\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      behaviors?: Array<Behavior>\n      converters?: Array<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      initialValue?: Array<PortableTextBlock>\n    },\n    tags: {} as 'dragging internally',\n  },\n  actions: {\n    'add behavior to context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'add behavior')\n\n        return new Set([...context.behaviors, event.behavior])\n      },\n    }),\n    'remove behavior from context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'remove behavior')\n\n        context.behaviors.delete(event.behavior)\n\n        return new Set([...context.behaviors])\n      },\n    }),\n    'assign behaviors': assign({\n      behaviors: ({event}) => {\n        assertEvent(event, 'update behaviors')\n        return new Set([...event.behaviors])\n      },\n    }),\n    'assign schema': assign({\n      schema: ({event}) => {\n        assertEvent(event, 'update schema')\n        return event.schema\n      },\n    }),\n    'emit patch event': enqueueActions(({event, enqueue}) => {\n      assertEvent(event, 'internal.patch')\n\n      enqueue.emit(event)\n      enqueue.emit({type: 'patch', patch: event.patch})\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['internal.patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        if (event.type === 'internal.patch') {\n          enqueue.emit(event)\n          enqueue.emit({type: 'patch', patch: event.patch})\n        } else {\n          enqueue.emit(event)\n        }\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'handle blur': ({event}) => {\n      assertEvent(event, 'blur')\n\n      try {\n        ReactEditor.blur(event.editor)\n      } catch (error) {\n        console.error(new Error(`Failed to blur editor: ${error.message}`))\n      }\n    },\n    'handle focus': ({context}) => {\n      if (!context.slateEditor) {\n        console.error('No Slate editor found to focus')\n        return\n      }\n\n      try {\n        const currentSelection = context.slateEditor.selection\n        ReactEditor.focus(context.slateEditor)\n        if (currentSelection) {\n          Transforms.select(context.slateEditor, currentSelection)\n        }\n      } catch (error) {\n        console.error(new Error(`Failed to focus editor: ${error.message}`))\n      }\n    },\n    'handle behavior event': ({context, event, self}) => {\n      assertEvent(event, ['behavior event'])\n\n      performEvent({\n        mode: 'raise',\n        behaviors: [...context.behaviors.values()],\n        event: event.behaviorEvent,\n        editor: event.editor,\n        keyGenerator: context.keyGenerator,\n        schema: context.schema,\n        getSnapshot: () =>\n          createEditorSnapshot({\n            converters: [...context.converters],\n            editor: event.editor,\n            keyGenerator: context.keyGenerator,\n            readOnly: self.getSnapshot().matches({'edit mode': 'read only'}),\n            schema: context.schema,\n            hasTag: (tag) => self.getSnapshot().hasTag(tag),\n            internalDrag: context.internalDrag,\n          }),\n        nativeEvent: event.nativeEvent,\n      })\n    },\n  },\n  guards: {\n    'slate is busy': ({context}) => {\n      if (!context.slateEditor) {\n        return false\n      }\n\n      return context.slateEditor.operations.length > 0\n    },\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: new Set([...(input.behaviors ?? coreBehaviors)]),\n    converters: new Set(input.converters ?? []),\n    getLegacySchema: input.getLegacySchema,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    incomingValue: input.initialValue,\n  }),\n  on: {\n    'notify.blurred': {\n      actions: emit(({event}) => ({...event, type: 'blurred'})),\n    },\n    'notify.done loading': {actions: emit({type: 'done loading'})},\n    'notify.error': {actions: emit(({event}) => ({...event, type: 'error'}))},\n    'notify.invalid value': {\n      actions: emit(({event}) => ({...event, type: 'invalid value'})),\n    },\n    'notify.focused': {\n      actions: emit(({event}) => ({...event, type: 'focused'})),\n    },\n    'notify.selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => ({...event, type: 'selection'})),\n      ],\n    },\n    'notify.unset': {actions: emit(({event}) => ({...event, type: 'unset'}))},\n    'notify.loading': {actions: emit({type: 'loading'})},\n    'notify.value changed': {\n      actions: emit(({event}) => ({...event, type: 'value changed'})),\n    },\n\n    'add behavior': {actions: 'add behavior to context'},\n    'remove behavior': {actions: 'remove behavior from context'},\n    'patches': {actions: emit(({event}) => event)},\n    'update behaviors': {actions: 'assign behaviors'},\n    'update key generator': {\n      actions: assign({keyGenerator: ({event}) => event.keyGenerator}),\n    },\n    'update schema': {actions: 'assign schema'},\n    'update value': {\n      actions: assign({incomingValue: ({event}) => event.value}),\n    },\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          on: {\n            'behavior event': {\n              actions: 'handle behavior event',\n              guard: ({event}) =>\n                event.behaviorEvent.type === 'clipboard.copy' ||\n                event.behaviorEvent.type === 'mouse.click' ||\n                event.behaviorEvent.type === 'serialize' ||\n                event.behaviorEvent.type === 'serialization.failure' ||\n                event.behaviorEvent.type === 'serialization.success' ||\n                event.behaviorEvent.type === 'select',\n            },\n          },\n          states: {\n            'determine initial edit mode': {\n              on: {\n                'done syncing initial value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: 'handle behavior event',\n            },\n            'blur': {\n              actions: 'handle blur',\n            },\n            'focus': {\n              target: '.focusing',\n              actions: [assign({slateEditor: ({event}) => event.editor})],\n            },\n          },\n          initial: 'idle',\n          states: {\n            'idle': {\n              on: {\n                dragstart: {\n                  actions: [\n                    assign({\n                      internalDrag: ({event}) => ({\n                        ghost: event.ghost,\n                        origin: event.origin,\n                      }),\n                    }),\n                  ],\n                  target: 'dragging internally',\n                },\n              },\n            },\n            'focusing': {\n              initial: 'checking if busy',\n              states: {\n                'checking if busy': {\n                  always: [\n                    {\n                      guard: 'slate is busy',\n                      target: 'busy',\n                    },\n                    {\n                      target: '#editor.edit mode.editable.idle',\n                      actions: ['handle focus'],\n                    },\n                  ],\n                },\n                'busy': {\n                  after: {\n                    10: {\n                      target: 'checking if busy',\n                    },\n                  },\n                },\n              },\n            },\n            'dragging internally': {\n              exit: [\n                ({context}) => {\n                  if (context.internalDrag?.ghost) {\n                    try {\n                      context.internalDrag.ghost.parentNode?.removeChild(\n                        context.internalDrag.ghost,\n                      )\n                    } catch (error) {\n                      console.error(\n                        new Error(\n                          `Removing the internal drag ghost failed due to: ${error.message}`,\n                        ),\n                      )\n                    }\n                  }\n                },\n                assign({internalDrag: undefined}),\n              ],\n              tags: ['dragging internally'],\n              on: {\n                dragend: {target: 'idle'},\n                drop: {target: 'idle'},\n              },\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          exit: ['emit ready'],\n          on: {\n            'internal.patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing initial value': {\n              target: 'pristine',\n            },\n          },\n        },\n        'pristine': {\n          initial: 'idle',\n          states: {\n            idle: {\n              on: {\n                'normalizing': {\n                  target: 'normalizing',\n                },\n                'internal.patch': {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n                'mutation': {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n              },\n            },\n            normalizing: {\n              on: {\n                'done normalizing': {\n                  target: 'idle',\n                },\n                'internal.patch': {\n                  actions: 'defer event',\n                },\n                'mutation': {\n                  actions: 'defer event',\n                },\n              },\n            },\n          },\n        },\n        'dirty': {\n          entry: ['emit pending events', 'clear pending events'],\n          on: {\n            'internal.patch': {\n              actions: 'emit patch event',\n            },\n            'mutation': {\n              actions: 'emit mutation event',\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {EditorSelection} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {useEffectEvent} from 'use-effect-event'\nimport {createActor} from 'xstate'\nimport type {AddedAnnotationPaths} from '../behavior-actions/behavior.action.annotation.add'\nimport {createCoreConverters} from '../converters/converters.core'\nimport {debugWithName} from '../internal-utils/debug'\nimport {compileType} from '../internal-utils/schema'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {Synchronizer} from './components/Synchronizer'\nimport {createInternalEditor, type InternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {editorMachine, type EditorActor} from './editor-machine'\nimport {legacySchemaToEditorSchema} from './editor-schema'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends InternalEditor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends InternalEditor\n    ? {\n        /**\n         * @internal\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<InternalEditor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: InternalEditor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as InternalEditor\n      this.schemaTypes = this.editor._internal.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    } else {\n      const legacySchema = createLegacySchema(\n        props.schemaType.hasOwnProperty('jsonType')\n          ? props.schemaType\n          : compileType(props.schemaType),\n      )\n      const schema = legacySchemaToEditorSchema(legacySchema)\n      const editorActor = createActor(editorMachine, {\n        input: {\n          converters: createCoreConverters(legacySchema),\n          getLegacySchema: () => legacySchema,\n          initialValue: props.value,\n          keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n          maxBlocks:\n            props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(props.maxBlocks.toString(), 10),\n          readOnly: props.readOnly,\n          schema,\n        },\n      })\n      editorActor.start()\n\n      this.editor = createInternalEditor(editorActor)\n      this.schemaTypes = legacySchema\n    }\n\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      this.schemaTypes = createLegacySchema(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType),\n      )\n\n      this.editor._internal.editorActor.send({\n        type: 'update schema',\n        schema: legacySchemaToEditorSchema(this.schemaTypes),\n      })\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor._internal.editorActor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <RouteEventsToChanges\n          editorActor={this.editor._internal.editorActor}\n          onChange={(change) => {\n            if (!this.props.editor) {\n              this.props.onChange(change)\n            }\n            /**\n             * For backwards compatibility, we relay all changes to the\n             * `change$` Subject as well.\n             */\n            this.change$.next(change)\n          }}\n        />\n        <Synchronizer\n          editorActor={this.editor._internal.editorActor}\n          slateEditor={this.editor._internal.slateEditor.instance}\n        />\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <Slate\n            editor={this.editor._internal.slateEditor.instance}\n            initialValue={this.editor._internal.slateEditor.initialValue}\n          >\n            <PortableTextEditorContext.Provider value={this}>\n              <PortableTextEditorSelectionProvider\n                editorActor={this.editor._internal.editorActor}\n              >\n                {this.props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    return editor.editable?.getFragment()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n\nexport function RouteEventsToChanges(props: {\n  editorActor: EditorActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    debug('Subscribing to editor changes')\n    const sub = props.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'blurred': {\n          handleChange({type: 'blur', event: event.event})\n          break\n        }\n        case 'patch':\n          handleChange(event)\n          break\n        case 'loading': {\n          handleChange({type: 'loading', isLoading: true})\n          break\n        }\n        case 'done loading': {\n          handleChange({type: 'loading', isLoading: false})\n          break\n        }\n        case 'focused': {\n          handleChange({type: 'focus', event: event.event})\n          break\n        }\n        case 'value changed': {\n          handleChange({type: 'value', value: event.value})\n          break\n        }\n        case 'invalid value': {\n          handleChange({\n            type: 'invalidValue',\n            resolution: event.resolution,\n            value: event.value,\n          })\n          break\n        }\n        case 'error': {\n          handleChange({\n            ...event,\n            level: 'warning',\n          })\n          break\n        }\n        case 'mutation': {\n          handleChange(event)\n          break\n        }\n        case 'ready': {\n          handleChange(event)\n          break\n        }\n        case 'selection': {\n          handleChange(event)\n          break\n        }\n        case 'unset': {\n          handleChange(event)\n          break\n        }\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes')\n      sub.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return null\n}\n","import {useActorRef} from '@xstate/react'\nimport React, {useMemo} from 'react'\nimport {Slate} from 'slate-react'\nimport {Synchronizer} from './components/Synchronizer'\nimport {\n  createInternalEditor,\n  editorConfigToMachineInput,\n  type Editor,\n  type EditorConfig,\n} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {editorMachine} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  RouteEventsToChanges,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\n\nconst EditorContext = React.createContext<Editor | undefined>(undefined)\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n * The EditorProvider component is used to set up the editor context and configure the Portable Text Editor.\n * @example\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n *\n * function App() {\n *  return (\n *    <EditorProvider initialConfig={{ ... }} >\n *      ...\n *    </EditorProvider>\n *  )\n * }\n *\n * ```\n * @group Components\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const editorActor = useActorRef(editorMachine, {\n    input: editorConfigToMachineInput(props.initialConfig),\n  })\n  const internalEditor = useMemo(\n    () => createInternalEditor(editorActor),\n    [editorActor],\n  )\n  const portableTextEditor = useMemo(\n    () =>\n      new PortableTextEditor({\n        editor: internalEditor,\n      } as unknown as PortableTextEditorProps),\n    [internalEditor],\n  )\n\n  return (\n    <EditorContext.Provider value={internalEditor}>\n      <RouteEventsToChanges\n        editorActor={editorActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <Synchronizer\n        editorActor={editorActor}\n        slateEditor={internalEditor._internal.slateEditor.instance}\n      />\n      <EditorActorContext.Provider value={editorActor}>\n        <Slate\n          editor={internalEditor._internal.slateEditor.instance}\n          initialValue={internalEditor._internal.slateEditor.initialValue}\n        >\n          <PortableTextEditorContext.Provider value={portableTextEditor}>\n            <PortableTextEditorSelectionProvider editorActor={editorActor}>\n              {props.children}\n            </PortableTextEditorSelectionProvider>\n          </PortableTextEditorContext.Provider>\n        </Slate>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n\n/**\n * @public\n * Get the current editor context from the `EditorProvider`.\n * Must be used inside the `EditorProvider` component.\n * @returns The current editor object.\n * @example\n * ```tsx\n * import { useEditor } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  const editor = useEditor()\n * }\n * ```\n * @group Hooks\n */\nexport function useEditor() {\n  const editor = React.useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error('No Editor set. Use EditorProvider to set one.')\n  }\n\n  return editor\n}\n"],"names":["rootName","debug","debugWithName","name","namespace","enabled","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","value","_key","isEqual","toSlateValue","schemaTypes","Array","isArray","map","block","_type","rest","textBlock","hasInlines","hasMissingStyle","style","hasMissingMarkDefs","markDefs","hasMissingChildren","children","child","cType","cKey","cRest","text","marks","__inline","Element","isElement","styles","fromSlateValue","textBlockType","Error","_cType","v","k","t","_i","_c","blockValue","isEqualToEmptyEditor","undefined","length","Text","isText","join","IS_PROCESSING_REMOTE_CHANGES","WeakMap","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","mutationMachine","setup","types","context","events","input","emitted","actions","emit","type","enqueueActions","enqueue","bulk","pendingMutations","patches","snapshot","assign","event","assertEvent","actionId","patch","lastBulk","at","slice","concat","actors","fromCallback","sendBack","originalApply","slateEditor","apply","op","guards","stateIn","typing","no pending mutations","slate is normalizing","Editor","isNormalizing","delays","process","env","NODE_ENV","createMachine","id","schema","states","initial","invoke","src","idle","on","target","after","reenter","mutations","guard","and","not","validateValue","keyGenerator","resolution","valid","validChildTypes","span","inlineObjects","validBlockTypes","blockObjects","unset","description","action","item","i18n","some","blk","index","isPlainObject","String","values","set","includes","currentBlockTypeName","key","expectedTypeName","isPortableTextTextBlock","typeName","newSpan","autoResolve","setIfMissing","insert","allUsedMarks","uniq","flatten","filter","cld","unusedMarkDefs","def","markDefKey","m","toString","orphanedMarks","mark","decorators","dec","find","spanChildren","orphaned","cMrk","cIndex","newChild","childKey","childType","withRemoteChanges","editor","fn","prev","isChangingRemotely","get","PATCHING","withoutPatching","isPatching","cloneDiff","diff2","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","defaultKeyGenerator","randomKey","getByteHexTable","table","i","whatwgRNG","rnds8","Uint8Array","getRandomValues","reduce","str","n","CURRENT_ACTION_ID","withApplyingBehaviorActions","withoutNormalizing","getCurrentActionId","isApplyingBehaviorActions","CURRENT_BEHAVIOR_ACTION_SET","withApplyingBehaviorActionSet","current","actionSetId","getCurrentBehaviorActionSetId","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","options","editorActor","previousSnapshot","getSnapshot","remotePatches","previousBehaviorActionSetId","subscriptions","push","sub","reset","forEach","origin","path","history","undos","redos","splice","time","Date","unsubscribe","matches","operations","step","lastOp","overwrite","shouldOverwrite","save","currentBehaviorActionSetId","merge","shouldMerge","newStep","selection","createSelectOperation","timestamp","shift","shouldClear","historyUndoActionImplementation","otherPatches","transformedOperations","transformOperation","reversedOperations","Operation","inverse","reverse","withoutSaving","err","Transforms","deselect","onChange","pop","historyRedoActionImplementation","operation","transformedOperation","insertBlockIndex","findIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","every","dType","offset","currentFocus","properties","focus","currentAnchor","anchor","newFocus","newProperties","newAnchor","point","level","blockIndex","newPath","Path","equals","syncValueCallback","streamBlocks","syncValueLogic","syncMachine","initialValueSynced","readOnly","pendingValue","previousValue","initial value synced","is busy","editable","isProcessingLocalChanges","isChanging","isBusy","value changed while syncing","pending value equals previous value","entry","exit","always","busy","syncing","updateValue","isChanged","isValid","hadSelection","childrenLength","_","removeNodes","insertNodes","pteCreateTextBlock","select","slateValueFromProps","Promise","resolve","currentBlock","currentBlockIndex","getBlocks","slateValue","blockChanged","blockValid","syncBlock","error","setTimeout","oldBlock","hasChanges","validationValue","validation","console","warn","_updateBlock","_replaceBlock","currentSelection","selectionFocusOnBlock","setNodes","isTextBlock","oldBlockChildrenLength","from","childIndex","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","isSpanNode","delete","insertText","voids","Synchronizer","props","$","incomingValue","useSelector","_temp","_temp2","t0","t1","t2","t3","t4","syncActorRef","useActorRef","t5","t6","mutationActorRef","t7","t8","subscription","send","useEffect","t10","t9","subscription_0","event_0","bb15","t11","t12","t13","t14","t15","event_1","t16","s_0","s","displayName","converterJson","mimeType","serialize","portableTextConverter","converters","converter","originEvent","reason","deserialize","converterPortableText","beta","internalDrag","blocks","sliceBlocks","data","JSON","stringify","parse","parsedBlocks","flatMap","parsedBlock","parseBlock","refreshKeys","hasTag","createConverterTextHtml","legacySchema","html","toHTML","onMissingComponent","components","unknownType","htmlToBlocks","portableText","unstable_whitespaceOnPasteMode","createConverterTextPlain","inlineObjectType","title","blockObjectType","textToHtml","escapeHtml","split","line","replace","entityMap","createCoreConverters","compileType","rawType","Schema","compile","createOperationToPatches","textBlockName","insertTextPatch","beforeValue","textChild","isTextSpan","prevBlock","prevChild","prevText","diffMatchPatch","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","blockKey","keys","Object","keyName","val","indexOf","insertNodePatch","position","targetKey","node","splitNodePatch","splitBlock","targetValue","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","updatedBlock","newBlock","updatedSpan","removedSpan","moveNodePatch","targetBlock","targetChild","childToInsert","insertTextActionImplementation","isPortableTextSpan","isPortableTextBlock","getPreviousSpan","blockPath","spanPath","previousSpan","childPath","Node","isBefore","getNextSpan","nextSpan","isAfter","createWithPortableTextMarkModel","normalizeNode","nodeEntry","nextNode","mergeNodes","parent","decorator","annotations","orphanedAnnotations","markDefKeys","Set","newMarkDefs","markDef","has","add","previousSelectionIsCollapsed","Range","isCollapsed","newSelectionIsCollapsed","focusSpan","nodes","mode","match","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","depth","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","annotation","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","collapsedSelection","marksWithoutAnnotations","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","isExpanded","deletingFromTheEnd","deletingAllText","nextSpanHasSameAnnotation","marksWithoutAnnotationMarks","targetPath","oldDefs","removeDecoratorActionImplementation","hanging","eMark","lonelyEmptySpan","existingMarksWithoutDecorator","existingMark","existingMarks","isDecoratorActive","selectedTextNodes","addAnnotationActionImplementation","parsedAnnotation","parseAnnotation","paths","markDefPath","markDefPaths","selectedBlocks","isBackward","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationActionImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","nextSpansWithSameAnnotation","marksWithoutAnnotation","toSlatePath","isKeySegment","isVoid","toSlateRange","moveRangeByOperation","range","Point","transform","blockSetBehaviorActionImplementation","location","filteredProps","slateBlock","blockUnsetBehaviorActionImplementation","propsToRemove","prop","updatedTextBlock","omit","propsToSet","updatedBlockObject","getFocusBlock","getSelectionStartBlock","selectionStartPoint","start","getPointBlock","getSelectionEndBlock","selectionEndPoint","end","getFocusChild","focusBlock","focusBlockPath","focusChild","getPointChild","pointChild","getFirstBlock","firstBlockPath","getLastBlock","lastBlockPath","getNodeBlock","isEditor","isBlockElement","elementToBlock","element","isInline","blockObject","isListItemActive","listItem","isListBlock","isStyleActive","slateRangeToSelection","anchorBlock","anchorChild","backward","decoratorAddActionImplementation","manualAnchor","utils","blockOffset","direction","manualFocus","manualSelection","editorSelection","anchorOffset","selectionPoint","focusOffset","newValue","newSelection","offsets","trimmedSelection","selectors","activeDecorators","newRange","splitTextNodes","isRange","deleteActionImplementation","deleteBackwardActionImplementation","deleteBackward","unit","deleteBlockActionImplementation","deleteForwardActionImplementation","deleteForward","effectActionImplementation","effect","insertInlineObjectActionImplementation","parsedInlineObject","parseInlineObject","inlineObject","focusTextBlock","insertSpanActionImplementation","insertBlockActionImplementation","fragment","placement","insertBlock","startBlock","startBlockPath","endBlock","endBlockPath","DOMEditor","lastBlock","nextPath","selectionBefore","insertFragment","endBlockEndPoint","adjustedSelection","endBlockStartPoint","next","moveBackwardActionImplementation","move","distance","moveBlockActionImplementation","to","moveNodes","moveForwardActionImplementation","noopActionImplementation","selectActionImplementation","behaviorActionImplementations","performAction","createWithEventListeners","maxBlocks","insertBreak","behaviorEvent","insertData","dataTransfer","insertSoftBreak","redo","setFragmentData","undo","createWithMaxBlocks","rows","createWithObjectKeys","existingKeys","descendants","debugVerbose","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","findBlockAndChildFromPath","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","debugState","targetBlockPath","targetChildPath","blocksToInsert","targetBlockIndex","normalizedIdx","childrenToInsert","targetChildIndex","childInsertPath","newText","nextRest","prevChildren","prevRest","c","newVal","applyAll","previousSelection","_child","isKeyedSegment","segment","stateName","findBlockFromPath","isMatch","createWithPatches","patchFunctions","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","normalize","handlePatches","p","editorWasEmpty","editorIsEmpty","createWithPlaceholderBlock","insertNode","createWithPortableTextBlockStyle","defaultStyle","SlateText","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","ptRange","existing","createWithSchemaTypes","isPortableTextListBlock","obj","createWithUtils","withPlugins","e","operationToPatches","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","slateEditors","createSlateEditor","config","existingSlateEditor","unsubscriptions","instance","withReact","createEditor","initialValue","createLegacySchema","portableTextType","blockType","of","findBlockType","childrenField","fields","field","ofType","spanType","memberType","inlineObjectTypes","blockObjectTypes","resolveEnabledStyles","resolveEnabledDecorators","lists","resolveEnabledListItems","styleField","btField","textStyles","list","listField","listItems","defineSchema","definition","temporaryImageName","temporaryUrlName","temporaryObjectNames","image","url","objectNames","defaultObjectTitles","legacySchemaToEditorSchema","jsonType","compileSchemaDefinitionToLegacySchema","defineType","portableTextSchema","defineField","startCase","SanitySchema","pteSchema","slateChildrenToBlocks","descendant","processedChildren","getActiveDecorators","slateEditorInstance","defaultCompare","a","b","useEditorSelector","selector","compare","editorActorSnapshot","getEditorSnapshot","_internal","tag","createEditableAPI","blur","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","insertChild","focusChildPath","focusNode","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","ReactEditor","toDOMNode","activeAnnotations","spans","isAnnotationActive","annotationType","addAnnotation","SlateElement","removeAnnotation","getSelection","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","selectionMarkDefs","accMarkDefs","markKey","compileSchemasFromEditorConfig","schemaDefinition","hasOwnProperty","editorConfigToMachineInput","behaviors","getLegacySchema","createInternalEditor","registerBehavior","behavior","listener","EditorActorContext","createContext","abstractAnnotationBehaviors","defineBehavior","isActiveAnnotation","raise","abstractDecoratorBehaviors","isActiveDecorator","blockOffsetsToSelection","abstractDeleteBehaviors","abstractInsertBehaviors","getFocusTextBlock","isEmptyTextBlock","abstractListItemBehaviors","selectedTextBlocks","getSelectedTextBlocks","isActiveListItem","abstractMoveBehaviors","previousBlock","getPreviousBlock","nextBlock","getNextBlock","abstractSelectBehaviors","getBlockEndPoint","getBlockStartPoint","abstractSplitBehaviors","getSelectionStartPoint","getSelectionEndPoint","blockEndPoint","newTextBlockSelection","newTextBlock","abstractStyleBehaviors","isActiveStyle","keyIs","lineBreak","shiftKey","raiseInsertSoftBreak","raiseDeserializationSuccessOrFailure","success","failures","getData","deserializeEvent","failure","raiseSerializationSuccessOrFailure","serializeEvents","serializeEvent","defaultBehaviors","selectionCollapsed","setData","dragOrigin","dropPosition","droppingOnDragOrigin","draggingEntireBlocks","draggedBlocks","textRuns","getTextBlockText","textRun","abstractBehaviorEventTypes","isAbstractBehaviorEvent","nativeBehaviorEventTypes","isNativeBehaviorEvent","isCustomBehaviorEvent","startsWith","eventCategory","performEvent","nativeEvent","defaultAction","eventBehaviors","listenedNamespace","eventNamespace","message","guardSnapshot","behaviorOverwritten","eventBehavior","shouldRun","actionSet","actionsSnapshot","internalAction","actionFailed","preventDefault","createEditorSnapshot","editorMachine","tags","pendingEvents","handle blur","handle focus","handle behavior event","self","slate is busy","coreBehaviors","initialReadOnly","dragstart","ghost","parentNode","removeChild","dragend","drop","normalizing","PortableTextEditorContext","usePortableTextEditor","useContext","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","setSelection","useState","startTransition","PortableTextEditor","Component","change$","Subject","constructor","schemaType","createActor","Number","parseInt","componentDidUpdate","prevProps","editorRef","setEditable","render","legacyPatches","incomingPatches$","patches$","change","blockStyle","listStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","subscribe","payload","RouteEventsToChanges","handleChange","useEffectEvent","bb5","isLoading","EditorContext","React","EditorProvider","initialConfig","internalEditor","useMemo","portableTextEditor","useEditor"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"debugId":null}},
    {"offset": {"line": 10504, "column": 0}, "map": {"version":3,"file":"selector.get-focus-inline-object.js","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-inline-object.ts"],"sourcesContent":["import {\n  isPortableTextSpan,\n  type KeyedSegment,\n  type PortableTextObject,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getFocusChild} from './selectors'\n\n/**\n * @public\n */\nexport const getFocusInlineObject: EditorSelector<\n  | {node: PortableTextObject; path: [KeyedSegment, 'children', KeyedSegment]}\n  | undefined\n> = (snapshot) => {\n  const focusChild = getFocusChild(snapshot)\n\n  return focusChild && !isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n"],"names":["getFocusInlineObject","snapshot","focusChild","getFocusChild","isPortableTextSpan","node","path","undefined"],"mappings":";;;;;;;AAWO,MAAMA,uBAGRC,CAAa,aAAA;IACVC,MAAAA,gOAAaC,gBAAAA,EAAcF,QAAQ;IAEzC,OAAOC,cAAc,wJAACE,qBAAAA,EAAmBF,WAAWG,IAAI,IACpD;QAACA,MAAMH,WAAWG,IAAAA;QAAMC,MAAMJ,WAAWI,IAAAA;IAAAA,IACzCC,KAAAA;AACN","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10526, "column": 0}, "map": {"version":3,"file":"util.is-selection-collapsed.js","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.is-selection-collapsed.ts"],"sourcesContent":["import type {EditorSelection} from '../types/editor'\n\n/**\n * @public\n */\nexport function isSelectionCollapsed(selection: EditorSelection) {\n  if (!selection) {\n    return false\n  }\n\n  return (\n    selection.anchor.path.join() === selection.focus.path.join() &&\n    selection.anchor.offset === selection.focus.offset\n  )\n}\n"],"names":["isSelectionCollapsed","selection","anchor","path","join","focus","offset"],"mappings":";;;AAKO,SAASA,qBAAqBC,SAAAA,EAA4B;IAC/D,OAAKA,YAKHA,UAAUC,MAAAA,CAAOC,IAAAA,CAAKC,IAAAA,CAAAA,MAAWH,UAAUI,KAAAA,CAAMF,IAAAA,CAAKC,IAAAA,CAAAA,KACtDH,UAAUC,MAAAA,CAAOI,MAAAA,KAAWL,UAAUI,KAAAA,CAAMC,MAAAA,GALrC,CAAA;AAOX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10540, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor-event-listener.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/compound-client-rect.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/drag-selection.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/event-position.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/selection.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/selection-elements.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/components/DefaultObject.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/components/drop-indicator.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/components/Element.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/components/Leaf.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/plugins/createWithHotKeys.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/range-decorations-machine.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/editor/Editable.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor/editor-machine'\nimport {useEditor} from './editor/editor-provider'\n\n/**\n * @public\n * @deprecated\n * This component has been renamed. Use `EventListenerPlugin` instead.\n *\n * ```\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n * ```\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n","export function getCompoundClientRect(nodes: Array<Node>): DOMRect {\n  if (nodes.length === 0) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  const elements = nodes.filter((node) => node instanceof Element)\n\n  const firstRect = elements.at(0)?.getBoundingClientRect()\n\n  if (!firstRect) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  let left = firstRect.left\n  let top = firstRect.top\n  let right = firstRect.right\n  let bottom = firstRect.bottom\n\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect()\n    left = Math.min(left, rect.left)\n    top = Math.min(top, rect.top)\n    right = Math.max(right, rect.right)\n    bottom = Math.max(bottom, rect.bottom)\n  }\n\n  return new DOMRect(left, top, right - left, bottom - top)\n}\n","import type {EditorSnapshot} from '..'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {EventPosition} from './event-position'\n\n/**\n * Given the current editor `snapshot` and an `eventSelection` representing\n * where the drag event origins from, this function calculates the selection\n * in the editor that should be dragged.\n */\nexport function getDragSelection({\n  eventSelection,\n  snapshot,\n}: {\n  eventSelection: EventPosition['selection']\n  snapshot: EditorSnapshot\n}) {\n  let dragSelection = eventSelection\n\n  const draggedInlineObject = selectors.getFocusInlineObject({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggedInlineObject) {\n    return dragSelection\n  }\n\n  const draggingCollapsedSelection = selectors.isSelectionCollapsed({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedTextBlock = selectors.getFocusTextBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedSpan = selectors.getFocusSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggingCollapsedSelection && draggedTextBlock && draggedSpan) {\n    // Looks like we are dragging an empty span\n    // Let's drag the entire block instead\n    dragSelection = {\n      anchor: utils.getBlockStartPoint(draggedTextBlock),\n      focus: utils.getBlockEndPoint(draggedTextBlock),\n    }\n  }\n\n  const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n\n  if (\n    snapshot.context.selection &&\n    selectors.isSelectionExpanded(snapshot) &&\n    selectedBlocks.length > 1\n  ) {\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return dragSelection\n    }\n\n    const selectionStartPoint = utils.getBlockStartPoint(selectionStartBlock)\n    const selectionEndPoint = utils.getBlockEndPoint(selectionEndBlock)\n\n    const eventSelectionInsideBlocks = selectors.isOverlappingSelection(\n      eventSelection,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {anchor: selectionStartPoint, focus: selectionEndPoint},\n      },\n    })\n\n    if (eventSelectionInsideBlocks) {\n      dragSelection = {\n        anchor: selectionStartPoint,\n        focus: selectionEndPoint,\n      }\n    }\n  }\n\n  return dragSelection\n}\n","import {Editor, type BaseRange, type Node} from 'slate'\nimport {DOMEditor, isDOMNode} from 'slate-dom'\nimport type {EditorSchema, EditorSelection} from '..'\nimport type {EditorActor} from '../editor/editor-machine'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport * as utils from '../utils'\nimport {\n  getFirstBlock,\n  getLastBlock,\n  getNodeBlock,\n  slateRangeToSelection,\n} from './slate-utils'\n\nexport type EventPosition = {\n  block: 'start' | 'end'\n  /**\n   * Did the event origin from the editor DOM node itself or from a child node?\n   */\n  isEditor: boolean\n  selection: NonNullable<EditorSelection>\n}\nexport type EventPositionBlock = EventPosition['block']\n\nexport function getEventPosition({\n  editorActor,\n  slateEditor,\n  event,\n}: {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPosition | undefined {\n  if (editorActor.getSnapshot().matches({setup: 'setting up'})) {\n    return undefined\n  }\n\n  const node = getEventNode({slateEditor, event})\n\n  if (!node) {\n    return undefined\n  }\n\n  const block = getNodeBlock({\n    editor: slateEditor,\n    schema: editorActor.getSnapshot().context.schema,\n    node,\n  })\n\n  const positionBlock = getEventPositionBlock({node, slateEditor, event})\n  const selection = getEventSelection({\n    schema: editorActor.getSnapshot().context.schema,\n    slateEditor,\n    event,\n  })\n\n  if (block && positionBlock && !selection && !Editor.isEditor(node)) {\n    return {\n      block: positionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          node: block,\n          path: [{_key: block._key}],\n        }),\n        focus: utils.getBlockEndPoint({\n          node: block,\n          path: [{_key: block._key}],\n        }),\n      },\n    }\n  }\n\n  if (!positionBlock || !selection) {\n    return undefined\n  }\n\n  const focusBlockPath = selection.focus.path.at(0)\n  const focusBlockKey = utils.isKeyedSegment(focusBlockPath)\n    ? focusBlockPath._key\n    : undefined\n\n  if (!focusBlockKey) {\n    return undefined\n  }\n\n  if (\n    utils.isSelectionCollapsed(selection) &&\n    block &&\n    focusBlockKey !== block._key\n  ) {\n    return {\n      block: positionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          node: block,\n          path: [{_key: block._key}],\n        }),\n        focus: utils.getBlockEndPoint({\n          node: block,\n          path: [{_key: block._key}],\n        }),\n      },\n    }\n  }\n\n  return {\n    block: positionBlock,\n    isEditor: Editor.isEditor(node),\n    selection,\n  }\n}\n\nexport function getEventNode({\n  slateEditor,\n  event,\n}: {\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}) {\n  if (!DOMEditor.hasTarget(slateEditor, event.target)) {\n    return undefined\n  }\n\n  const node = DOMEditor.toSlateNode(slateEditor, event.target)\n\n  return node\n}\n\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event,\n}: {\n  node: Node\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPositionBlock | undefined {\n  const [firstBlock] = getFirstBlock({editor: slateEditor})\n\n  if (!firstBlock) {\n    return undefined\n  }\n\n  const firstBlockElement = DOMEditor.toDOMNode(slateEditor, firstBlock)\n  const firstBlockRect = firstBlockElement.getBoundingClientRect()\n\n  if (event.pageY < firstBlockRect.top) {\n    return 'start'\n  }\n\n  const [lastBlock] = getLastBlock({editor: slateEditor})\n\n  if (!lastBlock) {\n    return undefined\n  }\n\n  const lastBlockElement = DOMEditor.toDOMNode(slateEditor, lastBlock)\n  const lastBlockRef = lastBlockElement.getBoundingClientRect()\n\n  if (event.pageY > lastBlockRef.bottom) {\n    return 'end'\n  }\n\n  const element = DOMEditor.toDOMNode(slateEditor, node)\n  const elementRect = element.getBoundingClientRect()\n  const top = elementRect.top\n  const height = elementRect.height\n  const location = Math.abs(top - event.pageY)\n\n  return location < height / 2 ? 'start' : 'end'\n}\n\nexport function getEventSelection({\n  schema,\n  slateEditor,\n  event,\n}: {\n  schema: EditorSchema\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EditorSelection {\n  const range = getSlateRangeFromEvent(slateEditor, event)\n\n  const selection = range\n    ? slateRangeToSelection({\n        schema,\n        editor: slateEditor,\n        range,\n      })\n    : null\n\n  return selection\n}\n\nfunction getSlateRangeFromEvent(\n  editor: PortableTextSlateEditor,\n  event: DragEvent | MouseEvent,\n) {\n  if (!event.target) {\n    return undefined\n  }\n\n  if (!isDOMNode(event.target)) {\n    return undefined\n  }\n\n  const window = DOMEditor.getWindow(editor)\n\n  let domRange: Range | undefined\n\n  if (window.document.caretPositionFromPoint !== undefined) {\n    const position = window.document.caretPositionFromPoint(\n      event.clientX,\n      event.clientY,\n    )\n\n    if (position) {\n      try {\n        domRange = window.document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      } catch {}\n    }\n  } else if (window.document.caretRangeFromPoint !== undefined) {\n    // Use WebKit-proprietary fallback method\n    domRange =\n      window.document.caretRangeFromPoint(event.clientX, event.clientY) ??\n      undefined\n  } else {\n    console.warn(\n      'Neither caretPositionFromPoint nor caretRangeFromPoint is supported',\n    )\n    return undefined\n  }\n\n  if (!domRange) {\n    return undefined\n  }\n\n  let range: BaseRange | undefined\n\n  try {\n    range = DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      // It can still throw even with this option set to true\n      suppressThrow: false,\n    })\n  } catch {}\n\n  return range\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import {Editor} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSnapshot} from '..'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {toSlateRange} from './ranges'\n\nexport type SelectionDomNodes = {\n  blockNodes: Array<Node>\n  childNodes: Array<Node>\n}\n\nexport function getSelectionDomNodes({\n  slateEditor,\n  snapshot,\n}: {\n  slateEditor: PortableTextSlateEditor\n  snapshot: EditorSnapshot\n}): SelectionDomNodes {\n  if (!snapshot.context.selection) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const range = toSlateRange(snapshot.context.selection, slateEditor)\n\n  if (!range) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const blockEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'highest',\n      match: (n) => !Editor.isEditor(n),\n    }),\n  )\n\n  const childEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'lowest',\n      match: (n) =>\n        (!Editor.isEditor(n) && slateEditor.isTextSpan(n)) ||\n        !slateEditor.isBlock(n),\n    }),\n  )\n\n  return {\n    blockNodes: blockEntries.map(([blockNode]) =>\n      DOMEditor.toDOMNode(slateEditor, blockNode),\n    ),\n    childNodes: childEntries.map(([childNode]) =>\n      DOMEditor.toDOMNode(slateEditor, childNode),\n    ),\n  }\n}\n","import type {PortableTextBlock, PortableTextChild} from '@sanity/types'\n\nexport function DefaultBlockObject(props: {\n  value: PortableTextBlock | PortableTextChild\n}) {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.value._type}: {props.value._key}]\n    </div>\n  )\n}\n\nexport function DefaultInlineObject(props: {\n  value: PortableTextBlock | PortableTextChild\n}) {\n  return (\n    <span style={{userSelect: 'none'}}>\n      [{props.value._type}: {props.value._key}]\n    </span>\n  )\n}\n","export function DropIndicator() {\n  return (\n    <div\n      contentEditable={false}\n      className=\"pt-drop-indicator\"\n      style={{\n        position: 'absolute',\n        width: '100%',\n        height: 1,\n        borderBottom: '1px solid currentColor',\n        zIndex: 5,\n      }}\n    >\n      <span />\n    </div>\n  )\n}\n","import type {\n  Path,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type FunctionComponent,\n  type JSX,\n  type ReactElement,\n} from 'react'\nimport {Editor, Range, Element as SlateElement} from 'slate'\nimport {\n  ReactEditor,\n  useSelected,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport {defineBehavior} from '../../behaviors'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../internal-utils/weakMaps'\nimport * as selectors from '../../selectors'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {DefaultBlockObject, DefaultInlineObject} from './DefaultObject'\nimport {DropIndicator} from './drop-indicator'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement<any>\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editorActor = useContext(EditorActorContext)\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused =\n    (selected &&\n      slateEditor.selection &&\n      Range.isCollapsed(slateEditor.selection)) ||\n    false\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n\n  useEffect(() => {\n    const behavior = defineBehavior({\n      on: 'drag.dragover',\n      guard: ({snapshot, event}) => {\n        const dropFocusBlock = selectors.getFocusBlock({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: event.position.selection,\n          },\n        })\n\n        if (!dropFocusBlock || dropFocusBlock.node._key !== element._key) {\n          return false\n        }\n\n        const dragOrigin = snapshot.beta.internalDrag?.origin\n\n        if (!dragOrigin) {\n          return false\n        }\n\n        const draggedBlocks = selectors.getSelectedBlocks({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragOrigin.selection,\n          },\n        })\n\n        if (\n          draggedBlocks.some(\n            (draggedBlock) => draggedBlock.node._key === element._key,\n          )\n        ) {\n          return false\n        }\n\n        const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragOrigin.selection,\n          },\n        })\n\n        return draggingEntireBlocks\n      },\n      actions: [\n        ({event}) => [\n          {\n            type: 'effect',\n            effect: () => {\n              setDragPositionBlock(event.position.block)\n            },\n          },\n          {\n            type: 'noop',\n          },\n        ],\n      ],\n    })\n\n    editorActor.send({\n      type: 'add behavior',\n      behavior,\n    })\n\n    return () => {\n      editorActor.send({\n        type: 'remove behavior',\n        behavior,\n      })\n    }\n  }, [editorActor, element._key])\n\n  useEffect(() => {\n    const behavior = defineBehavior({\n      on: 'drag.*',\n      guard: ({event}) => {\n        return event.type !== 'drag.dragover'\n      },\n      actions: [\n        () => [\n          {\n            type: 'effect',\n            effect: () => {\n              setDragPositionBlock(undefined)\n            },\n          },\n        ],\n      ],\n    })\n\n    editorActor.send({\n      type: 'add behavior',\n      behavior,\n    })\n\n    return () => {\n      editorActor.send({\n        type: 'remove behavior',\n        behavior,\n      })\n    }\n  }, [editorActor])\n\n  const value = useMemo(\n    () =>\n      fromSlateValue(\n        [element],\n        schemaTypes.block.name,\n        KEY_TO_VALUE_ELEMENT.get(slateEditor),\n      )[0],\n    [slateEditor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className: string | undefined\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (slateEditor.isInline(element)) {\n    const path = ReactEditor.findPath(slateEditor, element)\n    const [block] = Editor.node(slateEditor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find(\n      (_type) => _type.name === element._type,\n    )\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [\n        {_key: block._key},\n        'children',\n        {_key: element._key},\n      ]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            data-testid=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <DefaultInlineObject value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <DefaultInlineObject value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find(\n      (item) => item.value === style,\n    )\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level: number | undefined\n\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n\n    if (slateEditor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find(\n        (item) => item.value === element.listItem,\n      )\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      }\n    }\n\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n\n    return (\n      <div\n        key={element._key}\n        {...attributes}\n        className={className}\n        spellCheck={spellCheck}\n      >\n        {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n        <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n      </div>\n    )\n  }\n\n  const schemaType = schemaTypes.blockObjects.find(\n    (_type) => _type.name === element._type,\n  )\n\n  if (!schemaType) {\n    throw new Error(\n      `Could not find schema type for block element of _type ${element._type}`,\n    )\n  }\n\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n\n  className = 'pt-block pt-object-block'\n\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(slateEditor),\n  )[0]\n\n  let renderedBlockFromProps: JSX.Element | undefined\n\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <DefaultBlockObject value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      {children}\n      <div ref={blockRef} contentEditable={false} draggable={!readOnly}>\n        {renderedBlockFromProps ? (\n          renderedBlockFromProps\n        ) : (\n          <DefaultBlockObject value={value} />\n        )}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n\nElement.displayName = 'Element'\n","import type {\n  Path,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {Text} from 'slate'\nimport {useSelected, type RenderLeafProps} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  editorActor: EditorActor\n  children: ReactElement<any>\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation,\n  } = props\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () =>\n      uniq(\n        (leaf.marks || EMPTY_MARKS).filter((mark) =>\n          decoratorValues.includes(mark),\n        ),\n      ),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) &&\n            block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blurred', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focused', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find(\n          (dec) => dec.value === mark,\n        )\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                children: returnedChildren,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                selected,\n                schemaType,\n                value: mark,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaType\n                },\n              },\n            )\n          returnedChildren = renderDecorator(\n            _props as BlockDecoratorRenderProps,\n          )\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find(\n            (t) => t.name === annotation._type,\n          )\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> =\n                Object.defineProperty(\n                  {\n                    block,\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType,\n                    value: annotation,\n                  },\n                  'type',\n                  {\n                    enumerable: false,\n                    get() {\n                      console.warn(\n                        \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                      )\n                      return schemaType\n                    },\n                  },\n                )\n\n              returnedChildren = (\n                <span ref={spanRef}>\n                  {renderAnnotation(_props as BlockAnnotationRenderProps)}\n                </span>\n              )\n            } else {\n              returnedChildren = <span ref={spanRef}>{returnedChildren}</span>\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                annotations,\n                children: defaultRendered,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                schemaType: schemaTypes.span,\n                selected,\n                value: child,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaTypes.span\n                },\n              },\n            )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n\nLeaf.displayName = 'Leaf'\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {isEqual} from 'lodash'\nimport {\n  Element,\n  Path,\n  Range,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n} from 'slate'\nimport {\n  and,\n  assign,\n  fromCallback,\n  setup,\n  type ActorRefFrom,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {moveRangeByOperation, toSlateRange} from '../internal-utils/ranges'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor} from '../internal-utils/values'\nimport type {PortableTextSlateEditor, RangeDecoration} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\nconst slateOperationCallback: CallbackLogicFunction<\n  AnyEventObject,\n  {type: 'slate operation'; operation: Operation},\n  {slateEditor: PortableTextSlateEditor}\n> = ({input, sendBack}) => {\n  const originalApply = input.slateEditor.apply\n\n  input.slateEditor.apply = (op) => {\n    if (op.type !== 'set_selection') {\n      sendBack({type: 'slate operation', operation: op})\n    }\n\n    originalApply(op)\n  }\n\n  return () => {\n    input.slateEditor.apply = originalApply\n  }\n}\n\ntype DecoratedRange = BaseRange & {rangeDecoration: RangeDecoration}\n\nexport const rangeDecorationsMachine = setup({\n  types: {\n    context: {} as {\n      decoratedRanges: Array<DecoratedRange>\n      pendingRangeDecorations: Array<RangeDecoration>\n      skipSetup: boolean\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n      updateCount: number\n    },\n    input: {} as {\n      rangeDecorations: Array<RangeDecoration>\n      readOnly: boolean\n      schema: EditorSchema\n      skipSetup: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'ready'\n        }\n      | {\n          type: 'range decorations updated'\n          rangeDecorations: Array<RangeDecoration>\n        }\n      | {\n          type: 'slate operation'\n          operation: Operation\n        }\n      | {\n          type: 'update read only'\n          readOnly: boolean\n        },\n  },\n  actions: {\n    'update pending range decorations': assign({\n      pendingRangeDecorations: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.pendingRangeDecorations\n        }\n\n        return event.rangeDecorations\n      },\n    }),\n    'set up initial range decorations': assign({\n      decoratedRanges: ({context}) => {\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const rangeDecoration of context.pendingRangeDecorations) {\n          const slateRange = toSlateRange(\n            rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          rangeDecorationState.push({\n            rangeDecoration,\n            ...slateRange,\n          })\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'update range decorations': assign({\n      decoratedRanges: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.decoratedRanges\n        }\n\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const rangeDecoration of event.rangeDecorations) {\n          const slateRange = toSlateRange(\n            rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          rangeDecorationState.push({\n            rangeDecoration,\n            ...slateRange,\n          })\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'move range decorations': assign({\n      decoratedRanges: ({context, event}) => {\n        if (event.type !== 'slate operation') {\n          return context.decoratedRanges\n        }\n\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const decoratedRange of context.decoratedRanges) {\n          const slateRange = toSlateRange(\n            decoratedRange.rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            decoratedRange.rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration: decoratedRange.rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          let newRange: BaseRange | null | undefined\n\n          newRange = moveRangeByOperation(slateRange, event.operation)\n          if (\n            (newRange && newRange !== slateRange) ||\n            (newRange === null && slateRange)\n          ) {\n            const newRangeSelection = newRange\n              ? slateRangeToSelection({\n                  schema: context.schema,\n                  editor: context.slateEditor,\n                  range: newRange,\n                })\n              : null\n\n            decoratedRange.rangeDecoration.onMoved?.({\n              newSelection: newRangeSelection,\n              rangeDecoration: decoratedRange.rangeDecoration,\n              origin: 'local',\n            })\n          }\n\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            rangeDecorationState.push({\n              ...(newRange || slateRange),\n              rangeDecoration: {\n                ...decoratedRange.rangeDecoration,\n                selection: slateRangeToSelection({\n                  schema: context.schema,\n                  editor: context.slateEditor,\n                  range: newRange,\n                }),\n              },\n            })\n          }\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'assign readOnly': assign({\n      readOnly: ({context, event}) => {\n        if (event.type !== 'update read only') {\n          return context.readOnly\n        }\n\n        return event.readOnly\n      },\n    }),\n    'increment update count': assign({\n      updateCount: ({context}) => {\n        return context.updateCount + 1\n      },\n    }),\n  },\n  actors: {\n    'slate operation listener': fromCallback(slateOperationCallback),\n  },\n  guards: {\n    'has pending range decorations': ({context}) =>\n      context.pendingRangeDecorations.length > 0,\n    'has range decorations': ({context}) => context.decoratedRanges.length > 0,\n    'has different decorations': ({context, event}) => {\n      if (event.type !== 'range decorations updated') {\n        return false\n      }\n\n      const existingRangeDecorations = context.decoratedRanges.map(\n        (decoratedRange) => ({\n          anchor: decoratedRange.rangeDecoration.selection?.anchor,\n          focus: decoratedRange.rangeDecoration.selection?.focus,\n        }),\n      )\n\n      const newRangeDecorations = event.rangeDecorations.map(\n        (rangeDecoration) => ({\n          anchor: rangeDecoration.selection?.anchor,\n          focus: rangeDecoration.selection?.focus,\n        }),\n      )\n\n      const different = !isEqual(existingRangeDecorations, newRangeDecorations)\n\n      return different\n    },\n    'not read only': ({context}) => !context.readOnly,\n    'should skip setup': ({context}) => context.skipSetup,\n  },\n}).createMachine({\n  id: 'range decorations',\n  context: ({input}) => ({\n    readOnly: input.readOnly,\n    pendingRangeDecorations: input.rangeDecorations,\n    decoratedRanges: [],\n    skipSetup: input.skipSetup,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n    updateCount: 0,\n  }),\n  invoke: {\n    src: 'slate operation listener',\n    input: ({context}) => ({slateEditor: context.slateEditor}),\n  },\n  on: {\n    'update read only': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'setting up',\n  states: {\n    'setting up': {\n      always: [\n        {\n          guard: and(['should skip setup', 'has pending range decorations']),\n          target: 'ready',\n          actions: [\n            'set up initial range decorations',\n            'increment update count',\n          ],\n        },\n        {\n          guard: 'should skip setup',\n          target: 'ready',\n        },\n      ],\n      on: {\n        'range decorations updated': {\n          actions: ['update pending range decorations'],\n        },\n        'ready': [\n          {\n            target: 'ready',\n            guard: 'has pending range decorations',\n            actions: [\n              'set up initial range decorations',\n              'increment update count',\n            ],\n          },\n          {\n            target: 'ready',\n          },\n        ],\n      },\n    },\n    'ready': {\n      initial: 'idle',\n      on: {\n        'range decorations updated': {\n          target: '.idle',\n          guard: 'has different decorations',\n          actions: ['update range decorations', 'increment update count'],\n        },\n      },\n      states: {\n        'idle': {\n          on: {\n            'slate operation': {\n              target: 'moving range decorations',\n              guard: and(['has range decorations', 'not read only']),\n            },\n          },\n        },\n        'moving range decorations': {\n          entry: ['move range decorations'],\n          always: {\n            target: 'idle',\n          },\n        },\n      },\n    },\n  },\n})\n\nexport function createDecorate(\n  rangeDecorationActor: ActorRefFrom<typeof rangeDecorationsMachine>,\n) {\n  return function decorate([node, path]: NodeEntry): Array<BaseRange> {\n    if (\n      isEqualToEmptyEditor(\n        rangeDecorationActor.getSnapshot().context.slateEditor.children,\n        rangeDecorationActor.getSnapshot().context.schema,\n      )\n    ) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        } as BaseRange,\n      ]\n    }\n\n    // Editor node has a path length of 0 (should never be decorated)\n    if (path.length === 0) {\n      return []\n    }\n\n    if (!Element.isElement(node) || node.children.length === 0) {\n      return []\n    }\n\n    const blockIndex = path.at(0)\n\n    if (blockIndex === undefined) {\n      return []\n    }\n\n    return rangeDecorationActor\n      .getSnapshot()\n      .context.decoratedRanges.filter((decoratedRange) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (Range.isCollapsed(decoratedRange)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          return node.children.some(\n            (_, childIndex) =>\n              Path.equals(decoratedRange.anchor.path, [\n                blockIndex,\n                childIndex,\n              ]) &&\n              Path.equals(decoratedRange.focus.path, [blockIndex, childIndex]),\n          )\n        }\n\n        return (\n          Range.intersection(decoratedRange, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || Range.includes(decoratedRange, path)\n        )\n      })\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type CSSProperties,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {Editor, Transforms, type Text} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {getCompoundClientRect} from '../internal-utils/compound-client-rect'\nimport {debugWithName} from '../internal-utils/debug'\nimport {getDragSelection} from '../internal-utils/drag-selection'\nimport {getEventPosition} from '../internal-utils/event-position'\nimport {parseBlocks} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {getSelectionDomNodes} from '../internal-utils/selection-elements'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport {isSelectionCollapsed} from '../utils'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {Element} from './components/Element'\nimport {Leaf} from './components/Leaf'\nimport {EditorActorContext} from './editor-actor-context'\nimport {getEditorSnapshot} from './editor-selector'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {\n  createDecorate,\n  rangeDecorationsMachine,\n} from './range-decorations-machine'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n *\n *\n * The core component that renders the editor. Must be placed within the {@link EditorProvider} component.\n *\n * @example\n * ```tsx\n * import { PortableTextEditable, EditorProvider } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  return (\n *   <EditorProvider>\n *    <PortableTextEditable />\n *  </EditorProvider>\n *  )\n * }\n * ```\n * @group Components\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const editorActor = useContext(EditorActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const slateEditor = useSlate()\n\n  const rangeDecorationsActor = useActorRef(rangeDecorationsMachine, {\n    input: {\n      rangeDecorations: rangeDecorations ?? [],\n      readOnly,\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n      skipSetup: !editorActor.getSnapshot().matches({setup: 'setting up'}),\n    },\n  })\n  useSelector(rangeDecorationsActor, (s) => s.context.updateCount)\n  const decorate = useMemo(\n    () => createDecorate(rangeDecorationsActor),\n    [rangeDecorationsActor],\n  )\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'update read only',\n      readOnly,\n    })\n  }, [rangeDecorationsActor, readOnly])\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'range decorations updated',\n      rangeDecorations: rangeDecorations ?? [],\n    })\n  }, [rangeDecorationsActor, rangeDecorations])\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return slateEditor\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    debug('Editable is in edit mode')\n    return withHotKeys(slateEditor)\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={portableTextEditor.schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      portableTextEditor,\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      lProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => {\n      if (lProps.leaf._type === 'span') {\n        let rendered = (\n          <Leaf\n            {...lProps}\n            editorActor={editorActor}\n            schemaTypes={portableTextEditor.schemaTypes}\n            renderAnnotation={renderAnnotation}\n            renderChild={renderChild}\n            renderDecorator={renderDecorator}\n            readOnly={readOnly}\n          />\n        )\n        if (\n          renderPlaceholder &&\n          lProps.leaf.placeholder &&\n          lProps.text.text === ''\n        ) {\n          return (\n            <>\n              <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n                {renderPlaceholder()}\n              </span>\n              {rendered}\n            </>\n          )\n        }\n        const decoration = lProps.leaf.rangeDecoration\n        if (decoration) {\n          rendered = decoration.component({children: rendered})\n        }\n        return rendered\n      }\n      return lProps.children\n    },\n    [\n      editorActor,\n      portableTextEditor,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n    ],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(\n          slateEditor.children,\n          editorActor.getSnapshot().context.schema.block.name,\n        ),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'notify.selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [editorActor, propsSelection, slateEditor])\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      rangeDecorationsActor.send({\n        type: 'ready',\n      })\n\n      restoreSelectionFromProps()\n    })\n\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [rangeDecorationsActor, editorActor, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = slateEditor.selection\n          ? slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor: slateEditor,\n              range: slateEditor.selection,\n            })\n          : undefined\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for copy event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.copy',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  const handleCut = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>) => {\n      if (onCut) {\n        const result = onCut(event)\n        // CutFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for cut event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.cut',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCut, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = fromSlateValue(\n        slateEditor.children,\n        editorActor.getSnapshot().context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(slateEditor),\n      )\n      const ptRange = slateEditor.selection\n        ? slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor: slateEditor,\n            range: slateEditor.selection,\n          })\n        : null\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({\n        event,\n        value,\n        path,\n        schemaTypes: portableTextEditor.schemaTypes,\n      })\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        editorActor.send({type: 'notify.loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              const selection = editorActor.getSnapshot().context.selection\n              const position = selection ? {selection} : undefined\n\n              if (!position) {\n                console.warn('Could not find position for paste event')\n                return\n              }\n\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'clipboard.paste',\n                  originEvent: {\n                    dataTransfer: event.clipboardData,\n                  },\n                  position,\n                },\n                editor: slateEditor,\n                nativeEvent: event,\n              })\n            } else if (result.insert) {\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'insert.blocks',\n                  blocks: parseBlocks({\n                    context: {\n                      keyGenerator:\n                        editorActor.getSnapshot().context.keyGenerator,\n                      schema: editorActor.getSnapshot().context.schema,\n                    },\n                    blocks: result.insert,\n                    options: {\n                      refreshKeys: true,\n                    },\n                  }),\n                  placement: 'auto',\n                },\n                editor: slateEditor,\n              })\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.warn(error)\n\n            return error\n          })\n          .finally(() => {\n            editorActor.send({type: 'notify.done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.preventDefault()\n        event.stopPropagation()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for paste event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.paste',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'notify.focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'notify.selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, slateEditor, portableTextEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (position) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'mouse.click',\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onClick, editorActor, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        editorActor.send({type: 'notify.blurred', event})\n      }\n    },\n    [editorActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keydown',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keyup',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  useEffect(() => {\n    const window = ReactEditor.getWindow(slateEditor)\n\n    const onDragEnd = () => {\n      editorActor.send({type: 'dragend'})\n    }\n    const onDrop = () => {\n      editorActor.send({type: 'drop'})\n    }\n\n    window.document.addEventListener('dragend', onDragEnd)\n    window.document.addEventListener('drop', onDrop)\n\n    return () => {\n      window.document.removeEventListener('dragend', onDragEnd)\n      window.document.removeEventListener('drop', onDrop)\n    }\n  }, [slateEditor, editorActor])\n\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragStart?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for dragstart event')\n        return\n      }\n\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor,\n      })\n      const dragSelection = getDragSelection({\n        eventSelection: position.selection,\n        snapshot,\n      })\n\n      const selectingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      const dragGhost = document.createElement('div')\n\n      const draggedDomNodes = getSelectionDomNodes({\n        snapshot: {\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        },\n        slateEditor,\n      })\n\n      if (selectingEntireBlocks) {\n        // Clone the DOM Nodes so they won't be visually clipped by scroll-containers etc.\n        const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) =>\n          node.cloneNode(true),\n        )\n\n        for (const block of clonedBlockNodes) {\n          if (block instanceof HTMLElement) {\n            block.style.position = 'relative'\n          }\n          dragGhost.appendChild(block)\n        }\n\n        // A custom drag ghost element can be configured using this data attribute\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost.replaceChildren(customGhost)\n        }\n\n        // Setting the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        dragGhost.style.position = 'absolute'\n        dragGhost.style.left = '-99999px'\n        dragGhost.style.boxSizing = 'border-box'\n        document.body.appendChild(dragGhost)\n\n        if (customGhost) {\n          const customGhostRect = customGhost.getBoundingClientRect()\n          const x = event.clientX - customGhostRect.left\n          const y = event.clientY - customGhostRect.top\n          dragGhost.style.width = `${customGhostRect.width}px`\n          dragGhost.style.height = `${customGhostRect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        } else {\n          const blocksDomRect = getCompoundClientRect(\n            draggedDomNodes.blockNodes,\n          )\n          const x = event.clientX - blocksDomRect.left\n          const y = event.clientY - blocksDomRect.top\n          dragGhost.style.width = `${blocksDomRect.width}px`\n          dragGhost.style.height = `${blocksDomRect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      } else {\n        const clonedChildNodes = draggedDomNodes.childNodes.map((node) =>\n          node.cloneNode(true),\n        )\n\n        for (const child of clonedChildNodes) {\n          dragGhost.appendChild(child)\n        }\n\n        dragGhost.style.position = 'absolute'\n        dragGhost.style.left = '-99999px'\n        dragGhost.style.boxSizing = 'border-box'\n        document.body.appendChild(dragGhost)\n\n        const childrenDomRect = getCompoundClientRect(\n          draggedDomNodes.childNodes,\n        )\n        const x = event.clientX - childrenDomRect.left\n        const y = event.clientY - childrenDomRect.top\n        dragGhost.style.width = `${childrenDomRect.width}px`\n        dragGhost.style.height = `${childrenDomRect.height}px`\n\n        event.dataTransfer.setDragImage(dragGhost, x, y)\n      }\n\n      // Select drag selection\n      // If the selection is expanded then we just select the end of the\n      // selection\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          at: isSelectionCollapsed(dragSelection)\n            ? dragSelection\n            : {\n                anchor: getSelectionEndPoint(dragSelection),\n                focus: getSelectionEndPoint(dragSelection),\n                backward: false,\n              },\n        },\n        editor: slateEditor,\n      })\n\n      editorActor.send({\n        type: 'dragstart',\n        origin: {\n          selection: dragSelection,\n        },\n        ghost: dragGhost,\n      })\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragstart',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position: {\n            selection: dragSelection,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragStart, editorActor, slateEditor],\n  )\n\n  const handleDrag = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrag?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drag',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrag, editorActor, slateEditor],\n  )\n\n  const handleDragEnd = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnd?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragend',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnd, editorActor, slateEditor],\n  )\n\n  const handleDragEnter = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnter?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragenter',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnter, editorActor, slateEditor],\n  )\n\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragOver?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragover',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragOver, editorActor, slateEditor],\n  )\n\n  const handleDrop = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrop?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for drop event')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drop',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrop, editorActor, slateEditor],\n  )\n\n  const handleDragLeave = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragLeave?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragleave',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragLeave, editorActor, slateEditor],\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onCut={handleCut}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragEnd={handleDragEnd}\n      onDragEnter={handleDragEnter}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      onDragLeave={handleDragLeave}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n"],"names":["EditorEventListener","props","$","_c","editor","useEditor","on","useEffectEvent","t0","subscription","unsubscribe","t1","useEffect","getCompoundClientRect","nodes","length","DOMRect","elements","filter","node","Element","firstRect","at","getBoundingClientRect","left","top","right","bottom","i","rect","Math","min","max","getDragSelection","eventSelection","snapshot","dragSelection","selectors","context","selection","draggingCollapsedSelection","draggedTextBlock","draggedSpan","anchor","utils","focus","selectedBlocks","selectionStartBlock","selectionEndBlock","selectionStartPoint","selectionEndPoint","getEventPosition","editorActor","slateEditor","event","getSnapshot","matches","setup","getEventNode","block","getNodeBlock","schema","positionBlock","getEventPositionBlock","getEventSelection","Editor","isEditor","path","_key","focusBlockPath","focusBlockKey","undefined","DOMEditor","hasTarget","target","toSlateNode","firstBlock","getFirstBlock","firstBlockRect","toDOMNode","pageY","lastBlock","getLastBlock","lastBlockRef","elementRect","height","abs","range","getSlateRangeFromEvent","slateRangeToSelection","isDOMNode","window","getWindow","domRange","document","caretPositionFromPoint","position","clientX","clientY","createRange","setStart","offsetNode","offset","setEnd","caretRangeFromPoint","console","warn","toSlateRange","exactMatch","suppressThrow","normalizePoint","point","value","newPath","newOffset","blockKey","childKey","find","blk","push","children","Array","isArray","child","cld","text","normalizeSelection","newAnchor","newFocus","isEqual","backward","getSelectionDomNodes","blockNodes","childNodes","blockEntries","from","mode","match","n","childEntries","isTextSpan","isBlock","map","blockNode","childNode","DefaultBlockObject","Symbol","for","userSelect","_type","DefaultInlineObject","DropIndicator","width","borderBottom","zIndex","debugWithName","EMPTY_ANNOTATIONS","inlineBlockStyle","display","attributes","element","schemaTypes","readOnly","renderBlock","renderChild","renderListItem","renderStyle","spellCheck","useContext","EditorActorContext","useSlateStatic","selected","useSelected","blockRef","useRef","inlineBlockObjectRef","focused","Range","isCollapsed","dragPositionBlock","setDragPositionBlock","useState","behavior","defineBehavior","guard","dropFocusBlock","dragOrigin","beta","internalDrag","origin","some","draggedBlock","actions","type","effect","send","useMemo","fromSlateValue","name","KEY_TO_VALUE_ELEMENT","get","renderedBlock","className","blockPath","Error","isInline","ReactEditor","findPath","depth","schemaType","inlineObjects","SlateElement","isElement","elmPath","debugRenders","annotations","editorElementRef","isListItem","style","blockStyleType","styles","item","level","listItem","isListBlock","listType","lists","renderProps","Object","defineProperty","enumerable","propsOrDefaultRendered","blockObjects","renderedBlockFromProps","_props","displayName","debug","EMPTY_MARKS","Leaf","leaf","renderDecorator","renderAnnotation","spanRef","portableTextEditor","usePortableTextEditor","blockSelected","setFocused","setSelected","parent","decoratorValues","decorators","dec","marks","uniq","mark","includes","annotationMarks","markDefs","def","Boolean","shouldTrackSelectionAndFocus","sel","PortableTextEditor","getSelection","isCollapsedSelection","startTransition","setSelectedFromRange","useCallback","winSelection","rangeCount","getRangeAt","current","intersectsNode","onBlur","onFocus","onSelection","content","returnedChildren","Text","isText","span","forEach","annotation","t","_child","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","keys","cat","hotkey","isHotkey","nativeEvent","preventDefault","possibleMark","behaviorEvent","decorator","possibleCommand","command","slateOperationCallback","input","sendBack","originalApply","apply","op","operation","rangeDecorationsMachine","types","events","assign","pendingRangeDecorations","rangeDecorations","decoratedRanges","rangeDecorationState","rangeDecoration","slateRange","isRange","onMoved","newSelection","decoratedRange","newRange","moveRangeByOperation","newRangeSelection","updateCount","actors","fromCallback","guards","has pending range decorations","has range decorations","has different decorations","existingRangeDecorations","newRangeDecorations","not read only","should skip setup","skipSetup","createMachine","id","invoke","src","initial","states","always","and","entry","createDecorate","rangeDecorationActor","isEqualToEmptyEditor","placeholder","blockIndex","_","childIndex","Path","equals","intersection","PLACEHOLDER_STYLE","pointerEvents","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onCut","onClick","onDragStart","onDrag","onDragEnd","onDragEnter","onDragOver","onDrop","onDragLeave","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","ref","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","useSelector","s","useSlate","rangeDecorationsActor","useActorRef","decorate","withHotKeys","renderElement","eProps","renderLeaf","lProps","rendered","decoration","component","restoreSelectionFromProps","JSON","stringify","normalizedSelection","Transforms","select","operations","o","onChange","onReady","onInvalidValue","onValueChanged","handleCopy","clipboardData","stopPropagation","originEvent","dataTransfer","handleCut","handlePaste","onPasteResult","Promise","resolve","then","result","insert","blocks","parseBlocks","keyGenerator","options","refreshKeys","placement","catch","error","finally","handleOnFocus","isDefaultPrevented","start","handleClick","isPropagationStopped","handleOnBlur","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","domSelection","existingDOMRange","newDOMRange","toDOMRange","startOffset","endOffset","removeAllRanges","addRange","deselect","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","key","code","altKey","ctrlKey","metaKey","shiftKey","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","noop","_editor","addEventListener","removeEventListener","handleDragStart","getEditorSnapshot","editorActorSnapshot","slateEditorInstance","selectingEntireBlocks","dragGhost","createElement","draggedDomNodes","clonedBlockNodes","cloneNode","HTMLElement","appendChild","customGhost","querySelector","replaceChildren","setAttribute","boxSizing","body","customGhostRect","x","y","setDragImage","blocksDomRect","clonedChildNodes","childrenDomRect","isSelectionCollapsed","getSelectionEndPoint","ghost","handleDrag","handleDragEnd","handleDragEnter","handleDragOver","handleDrop","handleDragLeave","SlateEditable"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12],"debugId":null}},
    {"offset": {"line": 12355, "column": 0}, "map": {"version":3,"file":"selector.get-text-before.js","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/selectors/selector.get-text-before.ts"],"sourcesContent":["import type {EditorSelector} from '../editor/editor-selector'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {isKeyedSegment} from '../utils/util.is-keyed-segment'\nimport {reverseSelection} from '../utils/util.reverse-selection'\nimport {getSelectionText} from './selector.get-selection-text'\n\n/**\n * @public\n */\nexport const getBlockTextBefore: EditorSelector<string> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return ''\n  }\n\n  const selection = snapshot.context.selection.backward\n    ? reverseSelection(snapshot.context.selection)\n    : snapshot.context.selection\n  const point = selection.anchor\n  const key = isKeyedSegment(point.path[0]) ? point.path[0]._key : undefined\n\n  const block = key\n    ? snapshot.context.value.find((block) => block._key === key)\n    : undefined\n\n  if (!block) {\n    return ''\n  }\n\n  const startOfBlock = getBlockStartPoint({\n    node: block,\n    path: [{_key: block._key}],\n  })\n\n  return getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startOfBlock,\n        focus: point,\n      },\n    },\n  })\n}\n"],"names":["getBlockTextBefore","snapshot","context","selection","point","backward","reverseSelection","anchor","key","isKeyedSegment","path","_key","undefined","block","value","find","startOfBlock","getBlockStartPoint","node","getSelectionText","focus"],"mappings":";;;;;;;AASO,MAAMA,qBAA8CC,CAAa,aAAA;IAClE,IAAA,CAACA,SAASC,OAAAA,CAAQC,SAAAA,EACb,OAAA;IAMT,MAAMC,QAAAA,CAHYH,SAASC,OAAAA,CAAQC,SAAAA,CAAUE,QAAAA,mMACzCC,mBAAAA,EAAiBL,SAASC,OAAAA,CAAQC,SAAS,IAC3CF,SAASC,OAAAA,CAAQC,SAAAA,EACGI,MAAAA,EAClBC,sMAAMC,iBAAAA,EAAeL,MAAMM,IAAAA,CAAK,CAAC,CAAC,IAAIN,MAAMM,IAAAA,CAAK,CAAC,CAAA,CAAEC,IAAAA,GAAOC,KAAAA,GAE3DC,QAAQL,MACVP,SAASC,OAAAA,CAAQY,KAAAA,CAAMC,IAAAA,CAAMF,CAAAA,SAAUA,OAAMF,IAAAA,KAASH,GAAG,IACzDI,KAAAA;IAEJ,IAAI,CAACC,OACI,OAAA;IAGT,MAAMG,+MAAeC,qBAAAA,EAAmB;QACtCC,MAAML;QACNH,MAAM;YAAC;gBAACC,MAAME,MAAMF,IAAAA;YAAK,CAAA;SAAA;IAAA,CAC1B;IAED,0NAAOQ,mBAAAA,EAAiB;QAEtBjB,SAAS;YACP,GAAGD,SAASC,OAAAA;YACZC,WAAW;gBACTI,QAAQS;gBACRI,OAAOhB;YAAAA;QACT;IACF,CACD;AACH","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12392, "column": 0}, "map": {"version":3,"file":"behavior.markdown.js","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.markdown.ts"],"sourcesContent":["import {isPortableTextTextBlock} from '@sanity/types'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport * as selectors from '../selectors'\nimport {spanSelectionPointToBlockOffset} from '../utils/util.block-offset'\nimport {getTextBlockText} from '../utils/util.get-text-block-text'\nimport {execute} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\n/**\n * @beta\n */\nexport type MarkdownBehaviorsConfig = {\n  horizontalRuleObject?: (context: {\n    schema: EditorSchema\n  }) => {name: string; value?: {[prop: string]: unknown}} | undefined\n  defaultStyle?: (context: {schema: EditorSchema}) => string | undefined\n  headingStyle?: (context: {\n    schema: EditorSchema\n    level: number\n  }) => string | undefined\n  blockquoteStyle?: (context: {schema: EditorSchema}) => string | undefined\n  unorderedListStyle?: (context: {schema: EditorSchema}) => string | undefined\n  orderedListStyle?: (context: {schema: EditorSchema}) => string | undefined\n}\n\n/**\n * @beta\n * Create markdown behaviors for common markdown actions such as converting ### to headings, --- to HRs, and more.\n *\n * @example\n * Configure the bundled markdown behaviors\n * ```ts\n * import {EditorProvider} from '@portabletext/editor'\n * import {createMarkdownBehaviors, coreBehaviors} from '@portabletext/editor/behaviors'\n *\n * function App() {\n *  return (\n *   <EditorProvider\n *    initialConfig={{\n *    behaviors: [\n *    ...coreBehaviors,\n *    ...createMarkdownBehaviors({\n *        horizontalRuleObject: ({schema}) => {\n *          const name = schema.blockObjects.find(\n *            (object) => object.name === 'break',\n *          )?.name\n *          return name ? {name} : undefined\n *        },\n *        defaultStyle: ({schema}) => schema.styles[0].value,\n *        headingStyle: ({schema, level}) =>\n *          schema.styles.find((style) => style.value === `h${level}`)\n *            ?.value,\n *        blockquoteStyle: ({schema}) =>\n *          schema.styles.find((style) => style.value === 'blockquote')\n *            ?.value,\n *        unorderedListStyle: ({schema}) =>\n *          schema.lists.find((list) => list.value === 'bullet')?.value,\n *        orderedListStyle: ({schema}) =>\n *          schema.lists.find((list) => list.value === 'number')?.value,\n *      }),\n *      ]\n *    }}\n *    >\n *    {...}\n *    </EditorProvider>\n *  )\n * }\n * ```\n *\n */\nexport function createMarkdownBehaviors(config: MarkdownBehaviorsConfig) {\n  const automaticBlockquoteOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const blockOffset = spanSelectionPointToBlockOffset({\n        value: snapshot.context.value,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (previousInlineObject || !blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const caretAtTheEndOfQuote = blockOffset.offset === 1\n      const looksLikeMarkdownQuote = /^>/.test(blockText)\n      const blockquoteStyle = config.blockquoteStyle?.(snapshot.context)\n\n      if (\n        caretAtTheEndOfQuote &&\n        looksLikeMarkdownQuote &&\n        blockquoteStyle !== undefined\n      ) {\n        return {focusTextBlock, style: blockquoteStyle}\n      }\n\n      return false\n    },\n    actions: [\n      () => [\n        execute({\n          type: 'insert.text',\n          text: ' ',\n        }),\n      ],\n      (_, {focusTextBlock, style}) => [\n        execute({\n          type: 'block.unset',\n          props: ['listItem', 'level'],\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'block.set',\n          props: {style},\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'delete.text',\n          at: {\n            anchor: {\n              path: focusTextBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              offset: 2,\n            },\n          },\n        }),\n      ],\n    ],\n  })\n  const automaticHr = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const hrCharacter =\n        event.text === '-'\n          ? '-'\n          : event.text === '*'\n            ? '*'\n            : event.text === '_'\n              ? '_'\n              : undefined\n\n      if (hrCharacter === undefined) {\n        return false\n      }\n\n      const hrObject = config.horizontalRuleObject?.(snapshot.context)\n      const focusBlock = selectors.getFocusTextBlock(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      if (!hrObject || !focusBlock || !selectionCollapsed) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const textBefore = selectors.getBlockTextBefore(snapshot)\n      const hrBlockOffsets = {\n        anchor: {\n          path: focusBlock.path,\n          offset: 0,\n        },\n        focus: {\n          path: focusBlock.path,\n          offset: 3,\n        },\n      }\n\n      if (\n        !previousInlineObject &&\n        textBefore === `${hrCharacter}${hrCharacter}`\n      ) {\n        return {hrObject, focusBlock, hrCharacter, hrBlockOffsets}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {hrCharacter}) => [\n        execute({\n          type: 'insert.text',\n          text: hrCharacter,\n        }),\n      ],\n      (_, {hrObject, hrBlockOffsets}) => [\n        execute({\n          type: 'insert.block',\n          placement: 'before',\n          block: {\n            _type: hrObject.name,\n            ...(hrObject.value ?? {}),\n          },\n        }),\n        execute({\n          type: 'delete.text',\n          at: hrBlockOffsets,\n        }),\n      ],\n    ],\n  })\n  const automaticHrOnPaste = defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot, event}) => {\n      const text = event.originEvent.dataTransfer.getData('text/plain')\n      const hrRegExp = /^(---)$|(___)$|(\\*\\*\\*)$/\n      const hrCharacters = text.match(hrRegExp)?.[0]\n      const hrObject = config.horizontalRuleObject?.(snapshot.context)\n      const focusBlock = selectors.getFocusBlock(snapshot)\n\n      if (!hrCharacters || !hrObject || !focusBlock) {\n        return false\n      }\n\n      return {hrCharacters, hrObject, focusBlock}\n    },\n    actions: [\n      (_, {hrCharacters}) => [\n        execute({\n          type: 'insert.text',\n          text: hrCharacters,\n        }),\n      ],\n      ({snapshot}, {hrObject, focusBlock}) =>\n        isPortableTextTextBlock(focusBlock.node)\n          ? [\n              execute({\n                type: 'insert.block',\n                block: {\n                  _type: snapshot.context.schema.block.name,\n                  children: focusBlock.node.children,\n                },\n                placement: 'after',\n              }),\n              execute({\n                type: 'insert.block',\n                block: {\n                  _type: hrObject.name,\n                  ...(hrObject.value ?? {}),\n                },\n                placement: 'after',\n              }),\n              execute({\n                type: 'delete.block',\n                at: focusBlock.path,\n              }),\n            ]\n          : [\n              execute({\n                type: 'insert.block',\n                block: {\n                  _type: hrObject.name,\n                  ...(hrObject.value ?? {}),\n                },\n                placement: 'after',\n              }),\n            ],\n    ],\n  })\n  const automaticHeadingOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const blockOffset = spanSelectionPointToBlockOffset({\n        value: snapshot.context.value,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (!blockOffset) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const markdownHeadingSearch = /^#+/.exec(blockText)\n      const level = markdownHeadingSearch\n        ? markdownHeadingSearch[0].length\n        : undefined\n      const caretAtTheEndOfHeading = blockOffset.offset === level\n\n      if (previousInlineObject || !caretAtTheEndOfHeading) {\n        return false\n      }\n\n      const style =\n        level !== undefined\n          ? config.headingStyle?.({schema: snapshot.context.schema, level})\n          : undefined\n\n      if (level !== undefined && style !== undefined) {\n        return {\n          focusTextBlock,\n          style: style,\n          level,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      ({event}) => [execute(event)],\n      (_, {focusTextBlock, style, level}) => [\n        execute({\n          type: 'block.unset',\n          props: ['listItem', 'level'],\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'block.set',\n          props: {style},\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'delete.text',\n          at: {\n            anchor: {\n              path: focusTextBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              offset: level + 1,\n            },\n          },\n        }),\n      ],\n    ],\n  })\n  const clearStyleOnBackspace = defineBehavior({\n    on: 'delete.backward',\n    guard: ({snapshot}) => {\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const atTheBeginningOfBLock =\n        focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n        snapshot.context.selection?.focus.offset === 0\n\n      const defaultStyle = config.defaultStyle?.(snapshot.context)\n\n      if (\n        atTheBeginningOfBLock &&\n        defaultStyle &&\n        focusTextBlock.node.style !== defaultStyle\n      ) {\n        return {defaultStyle, focusTextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {defaultStyle, focusTextBlock}) => [\n        execute({\n          type: 'block.set',\n          props: {style: defaultStyle},\n          at: focusTextBlock.path,\n        }),\n      ],\n    ],\n  })\n  const automaticListOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const blockOffset = spanSelectionPointToBlockOffset({\n        value: snapshot.context.value,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (previousInlineObject || !blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const defaultStyle = config.defaultStyle?.(snapshot.context)\n      const looksLikeUnorderedList = /^(-|\\*)/.test(blockText)\n      const unorderedListStyle = config.unorderedListStyle?.(snapshot.context)\n      const caretAtTheEndOfUnorderedList = blockOffset.offset === 1\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfUnorderedList &&\n        looksLikeUnorderedList &&\n        unorderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          listItem: unorderedListStyle,\n          listItemLength: 1,\n          style: defaultStyle,\n        }\n      }\n\n      const looksLikeOrderedList = /^1\\./.test(blockText)\n      const orderedListStyle = config.orderedListStyle?.(snapshot.context)\n      const caretAtTheEndOfOrderedList = blockOffset.offset === 2\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfOrderedList &&\n        looksLikeOrderedList &&\n        orderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          listItem: orderedListStyle,\n          listItemLength: 2,\n          style: defaultStyle,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      ({event}) => [execute(event)],\n      (_, {focusTextBlock, style, listItem, listItemLength}) => [\n        execute({\n          type: 'block.set',\n          props: {\n            listItem,\n            level: 1,\n            style,\n          },\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'delete.text',\n          at: {\n            anchor: {\n              path: focusTextBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              offset: listItemLength + 1,\n            },\n          },\n        }),\n      ],\n    ],\n  })\n\n  const markdownBehaviors = [\n    automaticBlockquoteOnSpace,\n    automaticHeadingOnSpace,\n    automaticHr,\n    automaticHrOnPaste,\n    clearStyleOnBackspace,\n    automaticListOnSpace,\n  ]\n\n  return markdownBehaviors\n}\n"],"names":["createMarkdownBehaviors","config","automaticBlockquoteOnSpace","defineBehavior","on","guard","snapshot","event","text","selectionCollapsed","selectors","focusTextBlock","focusSpan","previousInlineObject","blockOffset","spanSelectionPointToBlockOffset","value","context","selectionPoint","path","_key","node","offset","selection","focus","blockText","getTextBlockText","caretAtTheEndOfQuote","looksLikeMarkdownQuote","test","blockquoteStyle","undefined","style","actions","execute","type","_","props","at","anchor","automaticHr","hrCharacter","hrObject","horizontalRuleObject","focusBlock","textBefore","hrBlockOffsets","placement","block","_type","name","automaticHrOnPaste","originEvent","dataTransfer","getData","hrRegExp","hrCharacters","match","isPortableTextTextBlock","schema","children","automaticHeadingOnSpace","markdownHeadingSearch","exec","level","length","caretAtTheEndOfHeading","headingStyle","clearStyleOnBackspace","atTheBeginningOfBLock","defaultStyle","automaticListOnSpace","looksLikeUnorderedList","unorderedListStyle","caretAtTheEndOfUnorderedList","listItem","listItemLength","looksLikeOrderedList","orderedListStyle","caretAtTheEndOfOrderedList"],"mappings":";;;;;;;;;;;;;AAsEO,SAASA,wBAAwBC,MAAAA,EAAiC;IACvE,MAAMC,iCAA6BC,sMAAAA,EAAe;QAChDC,IAAI;QACJC,OAAOA,CAAC,EAACC,QAAAA,EAAUC,KAAAA,EAAAA,KAAW;YAGxB,IAFYA,MAAMC,IAAAA,KAAS,KAGtB,OAAA,CAAA;YAGT,MAAMC,wOAAqBC,uBAAAA,EAA+BJ,QAAQ,GAC5DK,iBAAiBD,uOAAAA,EAA4BJ,QAAQ,GACrDM,+NAAYF,eAAAA,EAAuBJ,QAAQ;YAEjD,IAAI,CAACG,sBAAsB,CAACE,kBAAkB,CAACC,WACtC,OAAA,CAAA;YAGT,MAAMC,0OAAuBH,0BAAAA,EAAkCJ,QAAQ,GACjEQ,kBAAcC,8NAAAA,EAAgC;gBAClDC,OAAOV,SAASW,OAAAA,CAAQD,KAAAA;gBACxBE,gBAAgB;oBACdC,MAAM;wBACJ;4BAACC,MAAMT,eAAeU,IAAAA,CAAKD,IAAAA;wBAAAA;wBAC3B;wBACA;4BAACA,MAAMR,UAAUS,IAAAA,CAAKD,IAAAA;wBAAAA,CAAK;qBAAA;oBAE7BE,QAAQhB,SAASW,OAAAA,CAAQM,SAAAA,EAAWC,MAAMF,UAAU;gBAAA;YACtD,CACD;YAED,IAAIT,wBAAwB,CAACC,aACpB,OAAA,CAAA;YAGT,MAAMW,4MAAYC,mBAAAA,EAAiBf,eAAeU,IAAI,GAChDM,uBAAuBb,YAAYQ,MAAAA,KAAW,GAC9CM,yBAAyB,KAAKC,IAAAA,CAAKJ,SAAS,GAC5CK,kBAAkB7B,OAAO6B,eAAAA,GAAkBxB,SAASW,OAAO;YAG/DU,OAAAA,wBACAC,0BACAE,oBAAoBC,KAAAA,IAEb;gBAACpB;gBAAgBqB,OAAOF;YAAAA,IAG1B,CAAA;QACT;QACAG,SAAS;YACP,IAAM;6MACJC,UAAAA,EAAQ;wBACNC,MAAM;wBACN3B,MAAM;oBAAA,CACP,CAAC;iBAAA;YAEJ,CAAC4B,GAAG,EAACzB,cAAAA,EAAgBqB,KAAAA,EAAK,GAAM;6MAC9BE,UAAAA,EAAQ;wBACNC,MAAM;wBACNE,OAAO;4BAAC;4BAAY,OAAO;yBAAA;wBAC3BC,IAAI3B,eAAeQ,IAAAA;oBACpB,CAAA;6MACDe,UAAAA,EAAQ;wBACNC,MAAM;wBACNE,OAAO;4BAACL;wBAAK;wBACbM,IAAI3B,eAAeQ,IAAAA;oBACpB,CAAA;6MACDe,UAAAA,EAAQ;wBACNC,MAAM;wBACNG,IAAI;4BACFC,QAAQ;gCACNpB,MAAMR,eAAeQ,IAAAA;gCACrBG,QAAQ;4BACV;4BACAE,OAAO;gCACLL,MAAMR,eAAeQ,IAAAA;gCACrBG,QAAQ;4BAAA;wBACV;oBACF,CACD,CAAC;iBACH;SAAA;IAAA,CAEJ,GACKkB,uMAAcrC,iBAAAA,EAAe;QACjCC,IAAI;QACJC,OAAOA,CAAC,EAACC,QAAAA,EAAUC,KAAAA,EAAAA,KAAW;YAC5B,MAAMkC,cACJlC,MAAMC,IAAAA,KAAS,MACX,MACAD,MAAMC,IAAAA,KAAS,MACb,MACAD,MAAMC,IAAAA,KAAS,MACb,MACAuB,KAAAA;YAEV,IAAIU,gBAAgBV,KAAAA,GACX,OAAA,CAAA;YAGT,MAAMW,WAAWzC,OAAO0C,oBAAAA,GAAuBrC,SAASW,OAAO,GACzD2B,gOAAalC,oBAAAA,EAA4BJ,QAAQ,GACjDG,wOAAqBC,uBAAAA,EAA+BJ,QAAQ;YAElE,IAAI,CAACoC,YAAY,CAACE,cAAc,CAACnC,oBACxB,OAAA,CAAA;YAGHI,MAAAA,0OAAuBH,0BAAAA,EAAkCJ,QAAQ,GACjEuC,uNAAanC,qBAAAA,EAA6BJ,QAAQ,GAClDwC,iBAAiB;gBACrBP,QAAQ;oBACNpB,MAAMyB,WAAWzB,IAAAA;oBACjBG,QAAQ;gBACV;gBACAE,OAAO;oBACLL,MAAMyB,WAAWzB,IAAAA;oBACjBG,QAAQ;gBAAA;YAEZ;YAEA,OACE,CAACT,wBACDgC,eAAe,GAAGJ,WAAW,GAAGA,WAAW,EAAA,GAEpC;gBAACC;gBAAUE;gBAAYH;gBAAaK;YAAAA,IAGtC,CAAA;QACT;QACAb,SAAS;YACP,CAACG,GAAG,EAACK,WAAAA,EAAW,GAAM;oBACpBP,mMAAAA,EAAQ;wBACNC,MAAM;wBACN3B,MAAMiC;oBAAAA,CACP,CAAC;iBAAA;YAEJ,CAACL,GAAG,EAACM,QAAAA,EAAUI,cAAAA,EAAc,GAAM;wBACjCZ,+LAAAA,EAAQ;wBACNC,MAAM;wBACNY,WAAW;wBACXC,OAAO;4BACLC,OAAOP,SAASQ,IAAAA;4BAChB,GAAIR,SAAS1B,KAAAA,IAAS,CAAA,CAAA;wBAAC;oBAE1B,CAAA;6MACDkB,UAAAA,EAAQ;wBACNC,MAAM;wBACNG,IAAIQ;oBAAAA,CACL,CAAC;iBACH;SAAA;IAAA,CAEJ,GACKK,8MAAqBhD,iBAAAA,EAAe;QACxCC,IAAI;QACJC,OAAOA,CAAC,EAACC,QAAAA,EAAUC,KAAAA,EAAAA,KAAW;YACtBC,MAAAA,OAAOD,MAAM6C,WAAAA,CAAYC,YAAAA,CAAaC,OAAAA,CAAQ,YAAY,GAC1DC,WAAW,4BACXC,eAAehD,KAAKiD,KAAAA,CAAMF,QAAQ,GAAA,CAAI,CAAC,CAAA,EACvCb,WAAWzC,OAAO0C,oBAAAA,GAAuBrC,SAASW,OAAO,GACzD2B,gOAAalC,gBAAAA,EAAwBJ,QAAQ;YAEnD,OAAI,CAACkD,gBAAgB,CAACd,YAAY,CAACE,aAC1B,CAAA,IAGF;gBAACY;gBAAcd;gBAAUE;YAAU;QAC5C;QACAX,SAAS;YACP,CAACG,GAAG,EAACoB,YAAAA,EAAY,GAAM;6MACrBtB,UAAAA,EAAQ;wBACNC,MAAM;wBACN3B,MAAMgD;oBACP,CAAA,CAAC;iBAAA;YAEJ,CAAC,EAAClD,QAAAA,EAAAA,EAAW,EAACoC,QAAAA,EAAUE,UAAAA,EAAAA,0JACtBc,0BAAAA,EAAwBd,WAAWvB,IAAI,IACnC;6MACEa,UAAAA,EAAQ;wBACNC,MAAM;wBACNa,OAAO;4BACLC,OAAO3C,SAASW,OAAAA,CAAQ0C,MAAAA,CAAOX,KAAAA,CAAME,IAAAA;4BACrCU,UAAUhB,WAAWvB,IAAAA,CAAKuC,QAAAA;wBAC5B;wBACAb,WAAW;oBACZ,CAAA;6MACDb,UAAAA,EAAQ;wBACNC,MAAM;wBACNa,OAAO;4BACLC,OAAOP,SAASQ,IAAAA;4BAChB,GAAIR,SAAS1B,KAAAA,IAAS,CAAA,CAAA;wBACxB;wBACA+B,WAAW;oBACZ,CAAA;qBACDb,kMAAAA,EAAQ;wBACNC,MAAM;wBACNG,IAAIM,WAAWzB,IAAAA;oBAAAA,CAChB,CAAC;iBAAA,GAEJ;6MACEe,UAAAA,EAAQ;wBACNC,MAAM;wBACNa,OAAO;4BACLC,OAAOP,SAASQ,IAAAA;4BAChB,GAAIR,SAAS1B,KAAAA,IAAS,CAAA,CAAA;wBACxB;wBACA+B,WAAW;oBAAA,CACZ,CAAC;iBACH;SAAA;IAAA,CAEV,GACKc,8BAA0B1D,sMAAAA,EAAe;QAC7CC,IAAI;QACJC,OAAOA,CAAC,EAACC,QAAAA,EAAUC,KAAAA,EAAAA,KAAW;YAGxB,IAFYA,MAAMC,IAAAA,KAAS,KAGtB,OAAA,CAAA;YAGT,MAAMC,wOAAqBC,uBAAAA,EAA+BJ,QAAQ,GAC5DK,oOAAiBD,oBAAAA,EAA4BJ,QAAQ,GACrDM,YAAYF,kOAAAA,EAAuBJ,QAAQ;YAEjD,IAAI,CAACG,sBAAsB,CAACE,kBAAkB,CAACC,WACtC,OAAA,CAAA;YAGT,MAAME,kBAAcC,8NAAAA,EAAgC;gBAClDC,OAAOV,SAASW,OAAAA,CAAQD,KAAAA;gBACxBE,gBAAgB;oBACdC,MAAM;wBACJ;4BAACC,MAAMT,eAAeU,IAAAA,CAAKD,IAAAA;wBAAAA;wBAC3B;wBACA;4BAACA,MAAMR,UAAUS,IAAAA,CAAKD,IAAAA;wBAAAA,CAAK;qBAAA;oBAE7BE,QAAQhB,SAASW,OAAAA,CAAQM,SAAAA,EAAWC,MAAMF,UAAU;gBAAA;YACtD,CACD;YAED,IAAI,CAACR,aACI,OAAA,CAAA;YAGHD,MAAAA,uBAAuBH,6OAAAA,EAAkCJ,QAAQ,GACjEmB,4MAAYC,mBAAAA,EAAiBf,eAAeU,IAAI,GAChDyC,wBAAwB,MAAMC,IAAAA,CAAKtC,SAAS,GAC5CuC,QAAQF,wBACVA,qBAAAA,CAAsB,CAAC,CAAA,CAAEG,MAAAA,GACzBlC,KAAAA,GACEmC,yBAAyBpD,YAAYQ,MAAAA,KAAW0C;YAEtD,IAAInD,wBAAwB,CAACqD,wBACpB,OAAA,CAAA;YAGT,MAAMlC,QACJgC,UAAUjC,KAAAA,IACN9B,OAAOkE,YAAAA,GAAe;gBAACR,QAAQrD,SAASW,OAAAA,CAAQ0C,MAAAA;gBAAQK;YAAM,CAAA,IAC9DjC,KAAAA;YAEFiC,OAAAA,UAAUjC,KAAAA,KAAaC,UAAUD,KAAAA,IAC5B;gBACLpB;gBACAqB;gBACAgC;YAAAA,IAIG,CAAA;QACT;QACA/B,SAAS;YACP,CAAC,EAAC1B,KAAAA,EAAAA,GAAW;6MAAC2B,UAAAA,EAAQ3B,KAAK,CAAC;iBAAA;YAC5B,CAAC6B,GAAG,EAACzB,cAAAA,EAAgBqB,KAAAA,EAAOgC,KAAAA,EAAK,GAAM;wBACrC9B,+LAAAA,EAAQ;wBACNC,MAAM;wBACNE,OAAO;4BAAC;4BAAY,OAAO;yBAAA;wBAC3BC,IAAI3B,eAAeQ,IAAAA;oBACpB,CAAA;6MACDe,UAAAA,EAAQ;wBACNC,MAAM;wBACNE,OAAO;4BAACL;wBAAK;wBACbM,IAAI3B,eAAeQ,IAAAA;oBACpB,CAAA;6MACDe,UAAAA,EAAQ;wBACNC,MAAM;wBACNG,IAAI;4BACFC,QAAQ;gCACNpB,MAAMR,eAAeQ,IAAAA;gCACrBG,QAAQ;4BACV;4BACAE,OAAO;gCACLL,MAAMR,eAAeQ,IAAAA;gCACrBG,QAAQ0C,QAAQ;4BAAA;wBAClB;oBACF,CACD,CAAC;iBACH;SAAA;IAAA,CAEJ,GACKI,iNAAwBjE,iBAAAA,EAAe;QAC3CC,IAAI;QACJC,OAAOA,CAAC,EAACC,QAAAA,EAAAA,KAAc;YACrB,MAAMG,qBAAqBC,0OAAAA,EAA+BJ,QAAQ,GAC5DK,oOAAiBD,oBAAAA,EAA4BJ,QAAQ,GACrDM,8NAAYF,gBAAAA,EAAuBJ,QAAQ;YAEjD,IAAI,CAACG,sBAAsB,CAACE,kBAAkB,CAACC,WACtC,OAAA,CAAA;YAGHyD,MAAAA,wBACJ1D,eAAeU,IAAAA,CAAKuC,QAAAA,CAAS,CAAC,CAAA,CAAExC,IAAAA,KAASR,UAAUS,IAAAA,CAAKD,IAAAA,IACxDd,SAASW,OAAAA,CAAQM,SAAAA,EAAWC,MAAMF,WAAW,GAEzCgD,eAAerE,OAAOqE,YAAAA,GAAehE,SAASW,OAAO;YAE3D,OACEoD,yBACAC,gBACA3D,eAAeU,IAAAA,CAAKW,KAAAA,KAAUsC,eAEvB;gBAACA;gBAAc3D;YAAAA,IAGjB,CAAA;QACT;QACAsB,SAAS;YACP,CAACG,GAAG,EAACkC,YAAAA,EAAc3D,cAAAA,EAAc,GAAM;6MACrCuB,UAAAA,EAAQ;wBACNC,MAAM;wBACNE,OAAO;4BAACL,OAAOsC;wBAAY;wBAC3BhC,IAAI3B,eAAeQ,IAAAA;oBAAAA,CACpB,CAAC;iBACH;SAAA;IAAA,CAEJ,GACKoD,gNAAuBpE,iBAAAA,EAAe;QAC1CC,IAAI;QACJC,OAAOA,CAAC,EAACC,QAAAA,EAAUC,KAAAA,EAAAA,KAAW;YAGxB,IAFYA,MAAMC,IAAAA,KAAS,KAGtB,OAAA,CAAA;YAGT,MAAMC,wOAAqBC,uBAAAA,EAA+BJ,QAAQ,GAC5DK,kBAAiBD,sOAAAA,EAA4BJ,QAAQ,GACrDM,+NAAYF,eAAAA,EAAuBJ,QAAQ;YAEjD,IAAI,CAACG,sBAAsB,CAACE,kBAAkB,CAACC,WACtC,OAAA,CAAA;YAGT,MAAMC,0OAAuBH,0BAAAA,EAAkCJ,QAAQ,GACjEQ,8MAAcC,kCAAAA,EAAgC;gBAClDC,OAAOV,SAASW,OAAAA,CAAQD,KAAAA;gBACxBE,gBAAgB;oBACdC,MAAM;wBACJ;4BAACC,MAAMT,eAAeU,IAAAA,CAAKD,IAAAA;wBAAAA;wBAC3B;wBACA;4BAACA,MAAMR,UAAUS,IAAAA,CAAKD,IAAAA;wBAAAA,CAAK;qBAAA;oBAE7BE,QAAQhB,SAASW,OAAAA,CAAQM,SAAAA,EAAWC,MAAMF,UAAU;gBAAA;YACtD,CACD;YAED,IAAIT,wBAAwB,CAACC,aACpB,OAAA,CAAA;YAGHW,MAAAA,4MAAYC,mBAAAA,EAAiBf,eAAeU,IAAI,GAChDiD,eAAerE,OAAOqE,YAAAA,GAAehE,SAASW,OAAO,GACrDuD,yBAAyB,UAAU3C,IAAAA,CAAKJ,SAAS,GACjDgD,qBAAqBxE,OAAOwE,kBAAAA,GAAqBnE,SAASW,OAAO,GACjEyD,+BAA+B5D,YAAYQ,MAAAA,KAAW;YAG1DgD,IAAAA,gBACAI,gCACAF,0BACAC,uBAAuB1C,KAAAA,GAEhB,OAAA;gBACLpB;gBACAgE,UAAUF;gBACVG,gBAAgB;gBAChB5C,OAAOsC;YACT;YAGF,MAAMO,uBAAuB,OAAOhD,IAAAA,CAAKJ,SAAS,GAC5CqD,mBAAmB7E,OAAO6E,gBAAAA,GAAmBxE,SAASW,OAAO,GAC7D8D,6BAA6BjE,YAAYQ,MAAAA,KAAW;YAE1D,OACEgD,gBACAS,8BACAF,wBACAC,qBAAqB/C,KAAAA,IAEd;gBACLpB;gBACAgE,UAAUG;gBACVF,gBAAgB;gBAChB5C,OAAOsC;YAAAA,IAIJ,CAAA;QACT;QACArC,SAAS;YACP,CAAC,EAAC1B,KAAAA,EAAAA,GAAW;6MAAC2B,UAAAA,EAAQ3B,KAAK,CAAC;iBAAA;YAC5B,CAAC6B,GAAG,EAACzB,cAAAA,EAAgBqB,KAAAA,EAAO2C,QAAAA,EAAUC,cAAAA,EAAc,GAAM;6MACxD1C,UAAAA,EAAQ;wBACNC,MAAM;wBACNE,OAAO;4BACLsC;4BACAX,OAAO;4BACPhC;wBACF;wBACAM,IAAI3B,eAAeQ,IAAAA;oBACpB,CAAA;6MACDe,UAAAA,EAAQ;wBACNC,MAAM;wBACNG,IAAI;4BACFC,QAAQ;gCACNpB,MAAMR,eAAeQ,IAAAA;gCACrBG,QAAQ;4BACV;4BACAE,OAAO;gCACLL,MAAMR,eAAeQ,IAAAA;gCACrBG,QAAQsD,iBAAiB;4BAAA;wBAC3B;oBACF,CACD,CAAC;iBACH;SAAA;IAAA,CAEJ;IAWD,OAT0B;QACxB1E;QACA2D;QACArB;QACAW;QACAiB;QACAG,oBAAoB;KAAA;AAIxB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12742, "column": 0}, "map": {"version":3,"file":"util.merge-text-blocks.js","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.is-text-block.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/utils/util.merge-text-blocks.ts"],"sourcesContent":["import type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorContext} from '..'\nimport {isTypedObject} from '../internal-utils/asserters'\n\n/**\n * @public\n */\nexport function isTextBlock(\n  context: Pick<EditorContext, 'schema'>,\n  block: unknown,\n): block is PortableTextTextBlock {\n  return isTypedObject(block) && block._type === context.schema.block.name\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorContext} from '..'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {isTextBlock} from './util.is-text-block'\n\n/**\n * @beta\n */\nexport function mergeTextBlocks({\n  context,\n  targetBlock,\n  incomingBlock,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  targetBlock: PortableTextTextBlock\n  incomingBlock: PortableTextTextBlock\n}) {\n  const parsedIncomingBlock = parseBlock({\n    context,\n    block: incomingBlock,\n    options: {refreshKeys: true},\n  })\n\n  if (!parsedIncomingBlock || !isTextBlock(context, parsedIncomingBlock)) {\n    return targetBlock\n  }\n\n  return {\n    ...targetBlock,\n    children: [...targetBlock.children, ...parsedIncomingBlock.children],\n    markDefs: [\n      ...(targetBlock.markDefs ?? []),\n      ...(parsedIncomingBlock.markDefs ?? []),\n    ],\n  }\n}\n"],"names":["isTextBlock","context","block","isTypedObject","_type","schema","name","mergeTextBlocks","targetBlock","incomingBlock","parsedIncomingBlock","parseBlock","options","refreshKeys","children","markDefs"],"mappings":";;;;;;AAOgBA,SAAAA,YACdC,OAAAA,EACAC,KAAAA,EACgC;IAChC,+LAAOC,gBAAAA,EAAcD,KAAK,KAAKA,MAAME,KAAAA,KAAUH,QAAQI,MAAAA,CAAOH,KAAAA,CAAMI,IAAAA;AACtE;ACJO,SAASC,gBAAgB,EAC9BN,OAAAA,EACAO,WAAAA,EACAC,aAAAA,EAKF,EAAG;IACD,MAAMC,8MAAsBC,aAAAA,EAAW;QACrCV;QACAC,OAAOO;QACPG,SAAS;YAACC,aAAa,CAAA;QAAA;IAAI,CAC5B;IAED,OAAI,CAACH,uBAAuB,CAACV,YAAYC,SAASS,mBAAmB,IAC5DF,cAGF;QACL,GAAGA,WAAAA;QACHM,UAAU,CAAC;eAAGN,YAAYM,QAAAA,EAAU;eAAGJ,oBAAoBI,QAAQ;SAAA;QACnEC,UAAU,CACR;eAAIP,YAAYO,QAAAA,IAAY,CAAA,CAAA,EAC5B;eAAIL,oBAAoBK,QAAAA,IAAY,CAAG,CAAA;SAAA;IAE3C;AACF","ignoreList":[0,1],"debugId":null}},
    {"offset": {"line": 12779, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/plugins/plugin.behavior.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/plugins/plugin.core.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/internal-utils/get-text-to-emphasize.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/behaviors/behavior.decorator-pair.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/plugins/plugin.decorator-shortcut.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/plugins/plugin.editor-ref.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/plugins/plugin.event-listener.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/plugins/plugin.markdown.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/%40portabletext/editor/src/plugins/plugin.one-line.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport type {Behavior} from '../behaviors'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @beta\n */\nexport function BehaviorPlugin(props: {behaviors: Array<Behavior>}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const unregisterBehaviors = props.behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      unregisterBehaviors.forEach((unregister) => unregister())\n    }\n  }, [editor, props.behaviors])\n\n  return null\n}\n","import {coreBehaviors} from '../behaviors'\nimport {BehaviorPlugin} from './plugin.behavior'\n\n/**\n * @beta\n */\nexport function CoreBehaviorsPlugin() {\n  return <BehaviorPlugin behaviors={coreBehaviors} />\n}\n","export function createPairRegex(char: string, amount: number) {\n  // Negative lookbehind: Ensures that the matched sequence is not preceded by the same character\n  const prePrefix = `(?<!\\\\${char})`\n\n  // Repeats the character `amount` times\n  const prefix = `\\\\${char}`.repeat(Math.max(amount, 1))\n\n  // Negative lookahead: Ensures that the opening pair (**, *, etc.) is not followed by a space\n  const postPrefix = `(?!\\\\s)`\n\n  // Captures the content inside the pair\n  const content = `([^${char}\\\\n]+?)`\n\n  // Negative lookbehind: Ensures that the content is not followed by a space\n  const preSuffix = `(?<!\\\\s)`\n\n  // Repeats the character `amount` times\n  const suffix = `\\\\${char}`.repeat(Math.max(amount, 1))\n\n  // Negative lookahead: Ensures that the matched sequence is not followed by the same character\n  const postSuffix = `(?!\\\\${char})`\n\n  return `${prePrefix}${prefix}${postPrefix}${content}${preSuffix}${suffix}${postSuffix}`\n}\n\nconst italicRegex = new RegExp(\n  `(${createPairRegex('*', 1)}|${createPairRegex('_', 1)})$`,\n)\n\nconst boldRegex = new RegExp(\n  `(${createPairRegex('*', 2)}|${createPairRegex('_', 2)})$`,\n)\n\nexport function getTextToItalic(text: string) {\n  return text.match(italicRegex)?.at(0)\n}\n\nexport function getTextToBold(text: string) {\n  return text.match(boldRegex)?.at(0)\n}\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {createPairRegex} from '../internal-utils/get-text-to-emphasize'\nimport * as selectors from '../selectors'\nimport type {BlockOffset} from '../types/block-offset'\nimport * as utils from '../utils'\nimport {effect, execute} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport function createDecoratorPairBehavior(config: {\n  decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n  pair: {char: string; amount: number}\n  onDecorate: (offset: BlockOffset) => void\n}) {\n  if (config.pair.amount < 1) {\n    console.warn(\n      `The amount of characters in the pair should be greater than 0`,\n    )\n  }\n\n  const pairRegex = createPairRegex(config.pair.char, config.pair.amount)\n  const regEx = new RegExp(`(${pairRegex})$`)\n\n  return defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      if (config.pair.amount < 1) {\n        return false\n      }\n\n      const decorator = config.decorator({schema: snapshot.context.schema})\n\n      if (decorator === undefined) {\n        return false\n      }\n\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const selectionStartPoint = selectors.getSelectionStartPoint(snapshot)\n      const selectionStartOffset = selectionStartPoint\n        ? utils.spanSelectionPointToBlockOffset({\n            value: snapshot.context.value,\n            selectionPoint: selectionStartPoint,\n          })\n        : undefined\n\n      if (!focusTextBlock || !selectionStartOffset) {\n        return false\n      }\n\n      const textBefore = selectors.getBlockTextBefore(snapshot)\n      const newText = `${textBefore}${event.text}`\n      const textToDecorate = newText.match(regEx)?.at(0)\n\n      if (textToDecorate === undefined) {\n        return false\n      }\n\n      const prefixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length = 4\n          offset: newText.length - textToDecorate.length,\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length + \"*\".length * 2 = 6\n          offset:\n            newText.length -\n            textToDecorate.length +\n            config.pair.char.length * config.pair.amount,\n        },\n      }\n\n      const suffixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length - 2 = 9\n          offset:\n            selectionStartOffset.offset +\n            event.text.length -\n            config.pair.char.length * config.pair.amount,\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length = 11\n          offset: selectionStartOffset.offset + event.text.length,\n        },\n      }\n\n      // If the prefix is more than one character, then we need to check if\n      // there is an inline object inside it\n      if (prefixOffsets.focus.offset - prefixOffsets.anchor.offset > 1) {\n        const prefixSelection = utils.blockOffsetsToSelection({\n          value: snapshot.context.value,\n          offsets: prefixOffsets,\n        })\n        const inlineObjectBeforePrefixFocus = selectors.getPreviousInlineObject(\n          {\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: prefixSelection\n                ? {\n                    anchor: prefixSelection.focus,\n                    focus: prefixSelection.focus,\n                  }\n                : null,\n            },\n          },\n        )\n        const inlineObjectBeforePrefixFocusOffset =\n          inlineObjectBeforePrefixFocus\n            ? utils.childSelectionPointToBlockOffset({\n                value: snapshot.context.value,\n                selectionPoint: {\n                  path: inlineObjectBeforePrefixFocus.path,\n                  offset: 0,\n                },\n              })\n            : undefined\n\n        if (\n          inlineObjectBeforePrefixFocusOffset &&\n          inlineObjectBeforePrefixFocusOffset.offset >\n            prefixOffsets.anchor.offset &&\n          inlineObjectBeforePrefixFocusOffset.offset <\n            prefixOffsets.focus.offset\n        ) {\n          return false\n        }\n      }\n\n      // If the suffix is more than one character, then we need to check if\n      // there is an inline object inside it\n      if (suffixOffsets.focus.offset - suffixOffsets.anchor.offset > 1) {\n        const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n        const previousInlineObjectOffset = previousInlineObject\n          ? utils.childSelectionPointToBlockOffset({\n              value: snapshot.context.value,\n              selectionPoint: {\n                path: previousInlineObject.path,\n                offset: 0,\n              },\n            })\n          : undefined\n\n        if (\n          previousInlineObjectOffset &&\n          previousInlineObjectOffset.offset > suffixOffsets.anchor.offset &&\n          previousInlineObjectOffset.offset < suffixOffsets.focus.offset\n        ) {\n          return false\n        }\n      }\n\n      return {\n        prefixOffsets,\n        suffixOffsets,\n        decorator,\n      }\n    },\n    actions: [\n      // Insert the text as usual in its own undo step\n      ({event}) => [execute(event)],\n      (_, {prefixOffsets, suffixOffsets, decorator}) => [\n        // Decorate the text between the prefix and suffix\n        execute({\n          type: 'decorator.add',\n          decorator,\n          at: {\n            anchor: prefixOffsets.focus,\n            focus: suffixOffsets.anchor,\n          },\n        }),\n        // Delete the suffix\n        execute({\n          type: 'delete.text',\n          at: suffixOffsets,\n        }),\n        // Delete the prefix\n        execute({\n          type: 'delete.text',\n          at: prefixOffsets,\n        }),\n        // Toggle the decorator off so the next inserted text isn't emphasized\n        execute({\n          type: 'decorator.remove',\n          decorator,\n        }),\n        effect(() => {\n          config.onDecorate({\n            ...suffixOffsets.anchor,\n            offset:\n              suffixOffsets.anchor.offset -\n              (prefixOffsets.focus.offset - prefixOffsets.anchor.offset),\n          })\n        }),\n      ],\n    ],\n  })\n}\n","import {useActorRef} from '@xstate/react'\nimport {isEqual} from 'lodash'\nimport {\n  assign,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {createDecoratorPairBehavior} from '../behaviors/behavior.decorator-pair'\nimport {effect, execute} from '../behaviors/behavior.types.action'\nimport {defineBehavior} from '../behaviors/behavior.types.behavior'\nimport type {Editor} from '../editor/create-editor'\nimport {useEditor} from '../editor/editor-provider'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {BlockOffset} from '../types/block-offset'\nimport * as utils from '../utils'\n\n/**\n * @beta\n */\nexport function DecoratorShortcutPlugin(config: {\n  decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n  pair: {char: string; amount: number}\n}) {\n  const editor = useEditor()\n\n  useActorRef(decoratorPairMachine, {\n    input: {\n      editor,\n      decorator: config.decorator,\n      pair: config.pair,\n    },\n  })\n\n  return null\n}\n\ntype MarkdownEmphasisEvent =\n  | {\n      type: 'emphasis.add'\n      blockOffset: BlockOffset\n    }\n  | {\n      type: 'selection'\n      blockOffsets?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: 'delete.backward'\n    }\n\nconst emphasisListener: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {\n    decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n    editor: Editor\n    pair: {char: string; amount: number}\n  }\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: createDecoratorPairBehavior({\n      decorator: input.decorator,\n      pair: input.pair,\n      onDecorate: (offset) => {\n        sendBack({type: 'emphasis.add', blockOffset: offset})\n      },\n    }),\n  })\n\n  return unregister\n}\n\nconst selectionListenerCallback: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'select',\n      guard: ({snapshot, event}) => {\n        if (!event.at) {\n          return {blockOffsets: undefined}\n        }\n\n        const anchor = utils.spanSelectionPointToBlockOffset({\n          value: snapshot.context.value,\n          selectionPoint: event.at.anchor,\n        })\n        const focus = utils.spanSelectionPointToBlockOffset({\n          value: snapshot.context.value,\n          selectionPoint: event.at.focus,\n        })\n\n        if (!anchor || !focus) {\n          return {blockOffsets: undefined}\n        }\n\n        return {\n          blockOffsets: {\n            anchor,\n            focus,\n          },\n        }\n      },\n      actions: [\n        (_, {blockOffsets}) => [\n          {\n            type: 'effect',\n            effect: () => {\n              sendBack({type: 'selection', blockOffsets})\n            },\n          },\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst deleteBackwardListenerCallback: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'delete.backward',\n      actions: [\n        () => [\n          execute({\n            type: 'history.undo',\n          }),\n          effect(() => {\n            sendBack({type: 'delete.backward'})\n          }),\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst decoratorPairMachine = setup({\n  types: {\n    context: {} as {\n      decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n      editor: Editor\n      offsetAfterEmphasis?: BlockOffset\n      pair: {char: string; amount: number}\n    },\n    input: {} as {\n      decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n      editor: Editor\n      pair: {char: string; amount: number}\n    },\n    events: {} as MarkdownEmphasisEvent,\n  },\n  actors: {\n    'emphasis listener': fromCallback(emphasisListener),\n    'delete.backward listener': fromCallback(deleteBackwardListenerCallback),\n    'selection listener': fromCallback(selectionListenerCallback),\n  },\n}).createMachine({\n  id: 'decorator pair',\n  context: ({input}) => ({\n    decorator: input.decorator,\n    editor: input.editor,\n    pair: input.pair,\n  }),\n  initial: 'idle',\n  states: {\n    'idle': {\n      invoke: [\n        {\n          src: 'emphasis listener',\n          input: ({context}) => ({\n            decorator: context.decorator,\n            editor: context.editor,\n            pair: context.pair,\n          }),\n        },\n      ],\n      on: {\n        'emphasis.add': {\n          target: 'emphasis added',\n          actions: assign({\n            offsetAfterEmphasis: ({event}) => event.blockOffset,\n          }),\n        },\n      },\n    },\n    'emphasis added': {\n      exit: [\n        assign({\n          offsetAfterEmphasis: undefined,\n        }),\n      ],\n      invoke: [\n        {\n          src: 'selection listener',\n          input: ({context}) => ({editor: context.editor}),\n        },\n        {\n          src: 'delete.backward listener',\n          input: ({context}) => ({editor: context.editor}),\n        },\n      ],\n      on: {\n        'selection': {\n          target: 'idle',\n          guard: ({context, event}) => {\n            const selectionChanged = !isEqual(\n              {\n                anchor: context.offsetAfterEmphasis,\n                focus: context.offsetAfterEmphasis,\n              },\n              event.blockOffsets,\n            )\n\n            return selectionChanged\n          },\n        },\n        'delete.backward': {\n          target: 'idle',\n        },\n      },\n    },\n  },\n})\n","import React from 'react'\nimport type {Editor} from '../editor/create-editor'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @beta\n */\nexport const EditorRefPlugin = React.forwardRef<Editor | null>((_, ref) => {\n  const editor = useEditor()\n\n  const portableTextEditorRef = React.useRef(editor)\n\n  React.useImperativeHandle(ref, () => portableTextEditorRef.current, [])\n\n  return null\n})\nEditorRefPlugin.displayName = 'EditorRefPlugin'\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from '../editor/editor-machine'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @public\n * Listen for events emitted by the editor. Must be used inside `EditorProvider`. Events available include:\n *  - 'blurred'\n *  - 'done loading'\n *  - 'editable'\n *  - 'error'\n *  - 'focused'\n *  - 'invalid value'\n *  - 'loading'\n *  - 'mutation'\n *  - 'patch'\n *  - 'read only'\n *  - 'ready'\n *  - 'selection'\n *  - 'value changed'\n *\n * @example\n * Listen and log events.\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n *\n * function MyComponent() {\n *  return (\n *  <EditorProvider>\n *   <EventListenerPlugin\n *    on={(event) => {\n *     console.log(event)\n *    }\n *   } />\n *   { ... }\n * </EditorProvider>\n *  )\n * }\n * ```\n * @example\n * Handle events when there is a mutation.\n * ```tsx\n * <EventListenerPlugin\n *  on={(event) => {\n *    if (event.type === 'mutation') {\n *      console.log('Value changed:', event.snapshot)\n *    }\n *  }}\n * />\n * ```\n * @group Components\n */\nexport function EventListenerPlugin(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n","import {useEffect} from 'react'\nimport {\n  createMarkdownBehaviors,\n  type MarkdownBehaviorsConfig,\n} from '../behaviors/behavior.markdown'\nimport {useEditor} from '../editor/editor-provider'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {DecoratorShortcutPlugin} from './plugin.decorator-shortcut'\n\n/**\n * @beta\n */\nexport type MarkdownPluginConfig = MarkdownBehaviorsConfig & {\n  boldDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  codeDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  italicDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  strikeThroughDecorator?: ({\n    schema,\n  }: {\n    schema: EditorSchema\n  }) => string | undefined\n}\n\n/**\n * @beta\n * Add markdown behaviors for common markdown actions such as converting ### to headings, --- to HRs, and more.\n *\n * @example\n * Configure the bundled markdown behaviors\n * ```ts\n * import {EditorProvider} from '@portabletext/editor'\n * import {MarkdownPlugin} from '@portabletext/editor/plugins'\n *\n * function App() {\n *   return (\n *    <EditorProvider>\n *      <MarkdownPlugin\n *        config={{\n *          boldDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'strong')?.value,\n *          codeDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'code')?.value,\n *          italicDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'em')?.value,\n *          strikeThroughDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'strike-through')?.value,\n *          horizontalRuleObject: ({schema}) => {\n *            const name = schema.blockObjects.find(\n *              (object) => object.name === 'break',\n *            )?.name\n *            return name ? {name} : undefined\n *          },\n *          defaultStyle: ({schema}) => schema.styles[0].value,\n *          headingStyle: ({schema, level}) =>\n *            schema.styles.find((style) => style.value === `h${level}`)\n *              ?.value,\n *          blockquoteStyle: ({schema}) =>\n *            schema.styles.find((style) => style.value === 'blockquote')\n *              ?.value,\n *          unorderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'bullet')?.value,\n *          orderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'number')?.value,\n *        }}\n *      />\n *      {...}\n *    </EditorProvider>\n *  )\n * }\n * ```\n */\nexport function MarkdownPlugin(props: {config: MarkdownPluginConfig}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const behaviors = createMarkdownBehaviors(props.config)\n\n    const unregisterBehaviors = behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      for (const unregisterBehavior of unregisterBehaviors) {\n        unregisterBehavior()\n      }\n    }\n  }, [editor, props.config])\n\n  return (\n    <>\n      {props.config.boldDecorator ? (\n        <>\n          <DecoratorShortcutPlugin\n            decorator={props.config.boldDecorator}\n            pair={{char: '*', amount: 2}}\n          />\n          <DecoratorShortcutPlugin\n            decorator={props.config.boldDecorator}\n            pair={{char: '_', amount: 2}}\n          />\n        </>\n      ) : null}\n      {props.config.codeDecorator ? (\n        <DecoratorShortcutPlugin\n          decorator={props.config.codeDecorator}\n          pair={{char: '`', amount: 1}}\n        />\n      ) : null}\n      {props.config.italicDecorator ? (\n        <>\n          <DecoratorShortcutPlugin\n            decorator={props.config.italicDecorator}\n            pair={{char: '*', amount: 1}}\n          />\n          <DecoratorShortcutPlugin\n            decorator={props.config.italicDecorator}\n            pair={{char: '_', amount: 1}}\n          />\n        </>\n      ) : null}\n      {props.config.strikeThroughDecorator ? (\n        <DecoratorShortcutPlugin\n          decorator={props.config.strikeThroughDecorator}\n          pair={{char: '~', amount: 2}}\n        />\n      ) : null}\n    </>\n  )\n}\n","import {defineBehavior, execute, raise} from '../behaviors'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {BehaviorPlugin} from './plugin.behavior'\n\nconst oneLineBehaviors = [\n  /**\n   * Hitting Enter on an expanded selection should just delete that selection\n   * without causing a line break.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    guard: ({snapshot}) =>\n      snapshot.context.selection && selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false,\n    actions: [(_, {selection}) => [execute({type: 'delete', at: selection})]],\n  }),\n  /**\n   * All other cases of `insert.break` should be aborted.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * `insert.block` `before` or `after` is not allowed in a one-line editor.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({event}) =>\n      event.placement === 'before' || event.placement === 'after',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * An ordinary `insert.block` is acceptable if it's a text block. In that\n   * case it will get merged into the existing text block.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        !focusTextBlock ||\n        !utils.isTextBlock(snapshot.context, event.block)\n      ) {\n        return false\n      }\n\n      return true\n    },\n    actions: [\n      ({event}) => [\n        execute({\n          type: 'insert.block',\n          block: event.block,\n          placement: 'auto',\n          select: 'end',\n        }),\n      ],\n    ],\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.block` in case the Behaviors above all\n   * end up with a falsy guard.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * If multiple blocks are inserted, then the non-text blocks are filtered out\n   * and the text blocks are merged into one block\n   */\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      return event.blocks\n        .filter((block) => utils.isTextBlock(snapshot.context, block))\n        .reduce((targetBlock, incomingBlock) => {\n          return utils.mergeTextBlocks({\n            context: snapshot.context,\n            targetBlock,\n            incomingBlock,\n          })\n        })\n    },\n    actions: [\n      // `insert.block` is raised so the Behavior above can handle the\n      // insertion\n      (_, block) => [raise({type: 'insert.block', block, placement: 'auto'})],\n    ],\n  }),\n]\n\n/**\n * @beta\n * Restrict the editor to one line. The plugin takes care of blocking\n * `insert.break` events and smart handling of other `insert.*` events.\n *\n * Place it with as high priority as possible to make sure other plugins don't\n * overwrite `insert.*` events before this plugin gets a chance to do so.\n */\nexport function OneLinePlugin() {\n  return <BehaviorPlugin behaviors={oneLineBehaviors} />\n}\n"],"names":["BehaviorPlugin","props","$","_c","editor","useEditor","t0","t1","behaviors","unregisterBehaviors","map","behavior","registerBehavior","forEach","_temp","useEffect","unregister","CoreBehaviorsPlugin","Symbol","for","coreBehaviors","createPairRegex","char","amount","prePrefix","prefix","repeat","Math","max","postPrefix","content","preSuffix","suffix","postSuffix","createDecoratorPairBehavior","config","pair","console","warn","pairRegex","regEx","RegExp","defineBehavior","on","guard","snapshot","event","decorator","schema","context","undefined","focusTextBlock","selectors","selectionStartPoint","selectionStartOffset","utils","value","selectionPoint","newText","text","textToDecorate","match","at","prefixOffsets","anchor","path","offset","length","focus","suffixOffsets","prefixSelection","offsets","inlineObjectBeforePrefixFocus","selection","inlineObjectBeforePrefixFocusOffset","previousInlineObject","previousInlineObjectOffset","actions","execute","_","type","effect","onDecorate","DecoratorShortcutPlugin","input","useActorRef","decoratorPairMachine","emphasisListener","sendBack","blockOffset","selectionListenerCallback","blockOffsets","deleteBackwardListenerCallback","setup","types","events","actors","fromCallback","createMachine","id","initial","states","invoke","src","target","assign","offsetAfterEmphasis","exit","isEqual","EditorRefPlugin","React","forwardRef","ref","portableTextEditorRef","useRef","current","useImperativeHandle","displayName","EventListenerPlugin","useEffectEvent","subscription","unsubscribe","MarkdownPlugin","createMarkdownBehaviors","unregisterBehavior","t2","boldDecorator","t3","codeDecorator","t4","italicDecorator","t5","strikeThroughDecorator","t6","oneLineBehaviors","placement","block","select","blocks","filter","reduce","targetBlock","incomingBlock","raise","OneLinePlugin"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8],"debugId":null}}]
}