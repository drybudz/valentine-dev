{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"version.mjs","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/core/version.ts"],"sourcesContent":["import {version} from '../../package.json'\n/**\n * This version is provided by `@sanity/pkg-utils` at build time\n * @hidden\n * @beta\n */\nexport const SANITY_VERSION = process.env.PKG_VERSION || `${version}-development`\n"],"names":["SANITY_VERSION"],"mappings":";;;AAMO,MAAMA,iBAAiB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"file":"generate-help-url.esm.mjs","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/ui-components/conditionalWrapper/ConditionalWrapper.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/ui-components/button/Button.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/ui-components/dialog/Dialog.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/ui-components/errorBoundary/ErrorBoundary.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/ui-components/menuButton/MenuButton.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/core/components/Hotkeys.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/ui-components/tooltip/constants.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/ui-components/tooltip/Tooltip.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/ui-components/menuItem/MenuItem.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/ui-components/popover/Popover.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/ui-components/tab/Tab.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/ui-components/tooltipDelayGroupProvider/TooltipDelayGroupProvider.tsx","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/.pnpm/%40sanity%2Bgenerate-help-url%403.0.0/node_modules/%40sanity/generate-help-url/dist/generate-help-url.esm.js"],"sourcesContent":["export type ConditionalWrapperRenderWrapperCallback = (children: React.ReactNode) => React.ReactNode\n\n/**\n * A helper component that conditionally wraps its children in a wrapper component.\n *\n * @internal\n */\nexport function ConditionalWrapper({\n  children,\n  condition,\n  wrapper,\n}: {\n  children: React.ReactNode\n  condition: boolean\n  wrapper: ConditionalWrapperRenderWrapperCallback\n}): React.ReactNode {\n  if (!condition) {\n    return children\n  }\n\n  return wrapper(children)\n}\n","/* eslint-disable no-restricted-imports */\n\nimport {Button as UIButton, type ButtonProps as UIButtonProps} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type HTMLProps, useCallback} from 'react'\nimport {styled} from 'styled-components'\n\nimport {Tooltip, type TooltipProps} from '..'\nimport {\n  ConditionalWrapper,\n  type ConditionalWrapperRenderWrapperCallback,\n} from '../conditionalWrapper'\n\ntype BaseButtonProps = Pick<\n  UIButtonProps,\n  | 'as'\n  | 'icon'\n  | 'iconRight'\n  | 'justify'\n  | 'loading'\n  | 'mode'\n  | 'paddingY'\n  | 'selected'\n  | 'tone'\n  | 'type'\n  | 'width'\n> & {\n  size?: 'default' | 'large'\n  radius?: 'full'\n}\n\ntype ButtonWithText = {\n  text: string\n  tooltipProps?: TooltipProps | null\n  icon?: UIButtonProps['icon']\n}\n\ntype IconButton = {\n  text?: undefined\n  icon?: UIButtonProps['icon']\n  /**\n   * When using a button with an icon, tooltipProps are required to enforce consistency in UI.\n   */\n  tooltipProps: TooltipProps | null\n}\n\n/** @internal */\nexport type ButtonProps = BaseButtonProps & (ButtonWithText | IconButton)\n\nconst LARGE_BUTTON_PROPS = {\n  space: 3,\n  padding: 3,\n}\nconst DEFAULT_BUTTON_PROPS = {\n  space: 2,\n  padding: 2,\n}\n\nconst TooltipButtonWrapper = styled.span`\n  display: inline-flex;\n`\n/**\n * Customized Sanity UI <Button> with pre-defined layout options.\n *\n * @internal\n */\nexport const Button = forwardRef(function Button(\n  {\n    size = 'default',\n    mode = 'default',\n    paddingY,\n    tone = 'default',\n    tooltipProps,\n    ...rest\n  }: ButtonProps & Omit<HTMLProps<HTMLButtonElement>, 'as' | 'size' | 'title'>,\n  ref: ForwardedRef<HTMLButtonElement>,\n) {\n  const renderWrapper = useCallback<ConditionalWrapperRenderWrapperCallback>(\n    (children) => {\n      return (\n        <Tooltip content={tooltipProps?.content} portal {...tooltipProps}>\n          {/* This span is needed to make the tooltip work in disabled buttons */}\n          <TooltipButtonWrapper>{children}</TooltipButtonWrapper>\n        </Tooltip>\n      )\n    },\n    [tooltipProps],\n  )\n\n  const sizeProps = size === 'default' ? DEFAULT_BUTTON_PROPS : LARGE_BUTTON_PROPS\n\n  return (\n    <ConditionalWrapper condition={!!tooltipProps} wrapper={renderWrapper}>\n      <UIButton {...rest} {...sizeProps} paddingY={paddingY} ref={ref} mode={mode} tone={tone} />\n    </ConditionalWrapper>\n  )\n})\n","/* eslint-disable no-restricted-imports */\nimport {\n  Box,\n  type BoxHeight,\n  Button as UIButton,\n  Dialog as UIDialog,\n  type DialogProps as UIDialogProps,\n  Flex,\n} from '@sanity/ui'\nimport {type ComponentProps, forwardRef, type HTMLProps, type ReactNode, type Ref} from 'react'\nimport {useTranslation} from 'react-i18next'\n\n/** @internal */\nexport type DialogProps = Pick<\n  UIDialogProps,\n  | '__unstable_autoFocus'\n  | '__unstable_hideCloseButton'\n  | 'contentRef'\n  | 'header'\n  | 'id'\n  | 'onActivate'\n  | 'onClickOutside'\n  | 'onClose'\n  | 'portal'\n  | 'position'\n  | 'scheme'\n  | 'width'\n> & {\n  /**\n   * Dialog body height.\n   * Set this to 'fill' (i.e. 100%) if you want overflow body content to be contained\n   * and not trigger dynamic border visibility.\n   */\n  bodyHeight?: BoxHeight\n  children?: ReactNode\n  footer?: {\n    cancelButton?: Omit<ComponentProps<typeof UIButton>, 'fontSize' | 'padding'>\n    confirmButton?: Omit<ComponentProps<typeof UIButton>, 'fontSize' | 'padding'>\n  }\n  /**\n   * If enabled, removes all default padding from dialog content.\n   */\n  padding?: boolean\n}\n\n/**\n * Customized Sanity UI <Dialog> that enforces an opinionated footer layout with a max of two buttons (confirm and cancel).\n *\n * @internal\n */\nexport const Dialog = forwardRef(function Dialog(\n  {\n    bodyHeight,\n    children,\n    footer,\n    padding = true,\n    ...props\n  }: DialogProps & Pick<HTMLProps<HTMLDivElement>, 'onDragEnter' | 'onDrop'>,\n  ref: Ref<HTMLDivElement>,\n) {\n  const {t} = useTranslation()\n\n  return (\n    <UIDialog\n      {...props}\n      animate\n      ref={ref}\n      footer={\n        (footer?.confirmButton || footer?.cancelButton) && (\n          <Flex width=\"full\" gap={3} justify=\"flex-end\" padding={3}>\n            {props.onClose && (\n              <UIButton\n                mode=\"bleed\"\n                padding={2}\n                text={t('common.dialog.cancel-button.text')}\n                tone=\"default\"\n                onClick={props.onClose}\n                data-testid=\"cancel-button\"\n                {...footer.cancelButton}\n              />\n            )}\n            {footer.confirmButton && (\n              <UIButton\n                mode=\"default\"\n                padding={2}\n                text={t('common.dialog.confirm-button.text')}\n                tone=\"critical\"\n                data-testid=\"confirm-button\"\n                {...footer.confirmButton}\n              />\n            )}\n          </Flex>\n        )\n      }\n    >\n      <Box height={bodyHeight} padding={padding ? 4 : 0}>\n        {children}\n      </Box>\n    </UIDialog>\n  )\n})\n","import {\n  // eslint-disable-next-line no-restricted-imports\n  ErrorBoundary as UIErrorBoundary,\n  type ErrorBoundaryProps as UIErrorBoundaryProps,\n} from '@sanity/ui'\nimport {useCallback, useContext} from 'react'\n\nimport {SourceContext} from '../../_singletons'\n\nexport type ErrorBoundaryProps = UIErrorBoundaryProps\n\n/**\n * ErrorBoundary component that catches errors and uses onUncaughtError config property\n * It also calls the onCatch prop if it exists.\n */\nexport function ErrorBoundary({onCatch, ...rest}: ErrorBoundaryProps): React.JSX.Element {\n  // Use context, because source could be undefined and we don't want to throw in that case\n  const source = useContext(SourceContext)\n\n  const handleCatch = useCallback(\n    ({error: caughtError, info: caughtInfo}: {error: Error; info: React.ErrorInfo}) => {\n      // Send the error to the source if it has an onUncaughtError method\n      source?.onUncaughtError?.(caughtError, caughtInfo)\n\n      // Call the onCatch prop if it exists\n      onCatch?.({error: caughtError, info: caughtInfo})\n    },\n    [source, onCatch],\n  )\n\n  return <UIErrorBoundary {...rest} onCatch={handleCatch} />\n}\n","/* eslint-disable no-restricted-imports */\nimport {\n  MenuButton as UIMenuButton,\n  type MenuButtonProps as UIMenuButtonProps,\n  type PopoverProps,\n} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef} from 'react'\n\n/** @internal */\nexport type MenuButtonProps = Omit<UIMenuButtonProps, 'popover'> & {\n  popover?: Omit<PopoverProps, 'animate' | 'content' | 'open'>\n}\n\n/**\n * Customized Sanity UI <MenuButton> that enforces popover animation.\n *\n * @internal\n */\nexport const MenuButton = forwardRef(function MenuButton(\n  props: MenuButtonProps,\n  ref: ForwardedRef<HTMLButtonElement>,\n) {\n  return (\n    <UIMenuButton\n      {...props}\n      ref={ref}\n      popover={{\n        ...props.popover,\n        animate: true,\n      }}\n    />\n  )\n})\n","import {Hotkeys as UIHotkeys, type HotkeysProps as UIHotkeysProps} from '@sanity/ui'\nimport {type HTMLProps, type RefAttributes} from 'react'\n\n/**\n * Properties for the `Hotkeys` component.\n *\n * @public\n */\nexport type HotkeysProps = UIHotkeysProps & {\n  /**\n   * Whether to make the keys platform-aware (eg `alt` to `option` on Apple devices).\n   *\n   * @defaultValue true\n   */\n  makePlatformAware?: boolean\n} & Omit<HTMLProps<HTMLElement>, 'ref' | 'size' | 'as'> &\n  RefAttributes<HTMLElement>\n\n/**\n * Renders given `keys` as \"keycaps\" visually.\n *\n * This is a wrapper around `@sanity/ui`'s `Hotkeys` component, which allows for altering keys\n * (eg `alt` to `option`) on Apple devices unless `makePlatformAware` is set to `false`.\n *\n * @param props - Properties to render with\n * @returns React element\n * @public\n */\nexport function Hotkeys({makePlatformAware = true, keys: hotKeys = [], ...props}: HotkeysProps) {\n  const keys = makePlatformAware ? hotKeys.map(platformifyKey) : hotKeys\n  return <UIHotkeys {...props} keys={keys} />\n}\n\n/**\n * @internal\n */\nconst IS_APPLE_DEVICE =\n  typeof navigator === 'undefined' || typeof navigator.platform !== 'string'\n    ? false\n    : /Mac|iPod|iPhone|iPad/.test(navigator.platform || '')\n\n/**\n * Given key 'Alt', or 'Option' (case-insensitive), return the platform-appropriate key name\n * (eg 'Alt' on non-Apple devices, 'Option' on Apple devices).\n *\n * @param key - Key to platformify\n * @returns Platform-appropriate key name\n * @internal\n */\nfunction platformifyKey(key: string): string {\n  const lowerKey = key.toLowerCase()\n\n  if (lowerKey === 'alt' && IS_APPLE_DEVICE) {\n    return matchCase(key, 'option')\n  }\n\n  if (lowerKey === 'option' && !IS_APPLE_DEVICE) {\n    return matchCase(key, 'alt')\n  }\n\n  return key\n}\n\n/**\n * Apply the case (lowercase/uppercase) of `original` to `target`, character by character,\n * eg matching ALL CAPS, all lowercase or Mixed Case.\n *\n * @param original - The original string to match case of\n * @param target - The target string to apply case to\n * @returns Target string with case applied from original\n * @internal\n */\nfunction matchCase(original: string, target: string): string {\n  const orgLength = original.length\n\n  return target.replace(/./g, (char, i) => {\n    // Replace character by character matching case of original\n    // If running out of original, just return the target case as-is\n    return i < orgLength && original[i] === original[i].toUpperCase() ? char.toUpperCase() : char\n  })\n}\n","export const TOOLTIP_DELAY_PROPS = {\n  open: 400,\n}\n","import {\n  Box,\n  Flex,\n  type HotkeysProps,\n  Text,\n  // eslint-disable-next-line no-restricted-imports\n  Tooltip as UITooltip,\n  // eslint-disable-next-line no-restricted-imports\n  type TooltipProps as UITooltipProps,\n} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef} from 'react'\n\nimport {Hotkeys} from '../../core/components/Hotkeys'\nimport {TOOLTIP_DELAY_PROPS} from './constants'\n\n/** @internal */\n\nexport type TooltipProps = Omit<UITooltipProps, 'arrow' | 'padding' | 'shadow'> & {\n  hotkeys?: HotkeysProps['keys']\n}\n\nconst TOOLTIP_SHARED_PROPS: UITooltipProps = {\n  animate: true,\n  arrow: false,\n  boundaryElement: null,\n  delay: TOOLTIP_DELAY_PROPS,\n  fallbackPlacements: ['bottom-start', 'bottom-end', 'top-start', 'top-end'],\n  placement: 'bottom',\n  portal: true,\n}\n\n/**\n * Customized Sanity UI <Tooltip> with limited layout options and support for showing hotkeys.\n *\n * In just about all cases, its strongly recommended that you pass a string to the `content` prop.\n * This helps simplify i18n and encourages short and concise.\n *\n * Passing ReactNode values to `content` is supported, but discouraged.\n *\n * @internal\n */\nexport const Tooltip = forwardRef(function Tooltip(\n  props: TooltipProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {content, hotkeys, ...rest} = props\n\n  if (typeof content === 'string') {\n    return (\n      <UITooltip\n        {...TOOLTIP_SHARED_PROPS}\n        content={\n          <Flex align=\"center\">\n            {content && (\n              <Box flex={1} padding={1}>\n                <Text size={1}>{content}</Text>\n              </Box>\n            )}\n            {hotkeys && (\n              <Box flex=\"none\">\n                <Hotkeys keys={hotkeys} />\n              </Box>\n            )}\n          </Flex>\n        }\n        padding={1}\n        ref={ref}\n        {...rest}\n      />\n    )\n  }\n\n  return <UITooltip {...TOOLTIP_SHARED_PROPS} content={content} ref={ref} {...rest} />\n})\n","/* eslint-disable no-restricted-imports */\nimport {\n  Badge,\n  Box,\n  Flex,\n  MenuItem as UIMenuItem,\n  type MenuItemProps as UIMenuItemProps,\n  Stack,\n  Text,\n} from '@sanity/ui'\nimport {\n  forwardRef,\n  type HTMLProps,\n  isValidElement,\n  type ReactNode,\n  type Ref,\n  useCallback,\n  useMemo,\n} from 'react'\nimport {isValidElementType} from 'react-is'\nimport {styled} from 'styled-components'\n\nimport {Hotkeys} from '../../core/components/Hotkeys'\nimport {Tooltip, type TooltipProps} from '..'\nimport {\n  ConditionalWrapper,\n  type ConditionalWrapperRenderWrapperCallback,\n} from '../conditionalWrapper'\n\nconst FONT_SIZE = 1\nconst SUBTITLE_FONT_SIZE = 0\n\n/* Using px value here to make title/subtitles align with icon */\nconst SubtitleText = styled(Text)`\n  margin-top: 2px;\n`\n\n/** @internal */\nexport type MenuItemProps = Pick<\n  UIMenuItemProps,\n  'as' | 'icon' | 'iconRight' | 'pressed' | 'selected' | 'tone' | 'hotkeys'\n> & {\n  badgeText?: string\n  /**\n   * Usage of `children` is not supported, import `MenuItem` from `@sanity/ui` instead.\n   */\n  children?: undefined\n  /**\n   * Previews should be 25x25.\n   */\n  preview?: ReactNode\n  /**\n   * Optional render callback which receives menu item content.\n   */\n  renderMenuItem?: (menuItemContent: React.JSX.Element) => ReactNode\n  text?: string\n  tooltipProps?: TooltipProps | null\n  /**\n   * Optional subtitle prop for the menu item.\n   * While not recommended, it is utilized for the workspace menu button.\n   */\n  __unstable_subtitle?: string\n  /**\n   * An optional property to adjust spacing in the preview between the icon and the text.\n   * Not recommended, but is applied to the workspace menu button..\n   */\n  __unstable_space?: number\n}\n\nconst PreviewWrapper = styled(Box)`\n  height: 25px;\n  width: 25px;\n  overflow: hidden;\n`\n\n/**\n * Customized Sanity UI <MenuItem> that restricts usage of `children` to encourage simple,\n * single line menu items.\n *\n * The workspace menu button needed a subtitle - hence, the StudioUI MenuIten now takes a subtitle prop.\n * This is only an escape hatch for the workspace menu button and is not recommended for general use.\n *\n * It also accepts a prop to attach tooltips as well as custom badges too.\n *\n * @internal\n */\nexport const MenuItem = forwardRef(function MenuItem(\n  {\n    badgeText,\n    children: childrenProp,\n    disabled,\n    hotkeys,\n    icon: Icon,\n    iconRight: IconRight,\n    preview = null,\n    renderMenuItem,\n    text,\n    tooltipProps,\n    __unstable_subtitle,\n    __unstable_space,\n    ...rest\n  }: MenuItemProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'selected' | 'tabIndex' | 'size'>,\n  ref: Ref<HTMLDivElement>,\n) {\n  const menuItemContent = useMemo(() => {\n    return (\n      <Flex align=\"center\" gap={2}>\n        {preview && (\n          <PreviewWrapper\n            style={{opacity: disabled ? 0.25 : undefined}}\n            paddingRight={__unstable_space ? 1 : 0}\n          >\n            <Flex align=\"center\" height=\"fill\" justify=\"center\">\n              {preview}\n            </Flex>\n          </PreviewWrapper>\n        )}\n        {Icon && (\n          <Box paddingRight={1}>\n            <Text size={FONT_SIZE}>\n              {isValidElement(Icon) && Icon}\n              {isValidElementType(Icon) && <Icon />}\n            </Text>\n          </Box>\n        )}\n        {text && (\n          <Stack\n            flex={1}\n            space={__unstable_subtitle ? 1 : 2}\n            paddingLeft={__unstable_subtitle ? 1 : 0}\n          >\n            <Text size={FONT_SIZE} textOverflow=\"ellipsis\" weight=\"medium\">\n              {text}\n            </Text>\n            {__unstable_subtitle && (\n              <SubtitleText size={SUBTITLE_FONT_SIZE} textOverflow=\"ellipsis\" weight=\"medium\" muted>\n                {__unstable_subtitle}\n              </SubtitleText>\n            )}\n          </Stack>\n        )}\n        {(badgeText || hotkeys || IconRight) && (\n          <Flex align=\"center\" gap={3} marginLeft={3}>\n            {hotkeys && <Hotkeys keys={hotkeys} style={{marginTop: -4, marginBottom: -4}} />}\n\n            {badgeText && (\n              <Badge fontSize={0} style={{marginTop: -4, marginBottom: -4}}>\n                {badgeText}\n              </Badge>\n            )}\n\n            {IconRight && (\n              <Text size={FONT_SIZE}>\n                {isValidElement(IconRight) && IconRight}\n                {isValidElementType(IconRight) && <IconRight />}\n              </Text>\n            )}\n          </Flex>\n        )}\n      </Flex>\n    )\n  }, [\n    preview,\n    disabled,\n    __unstable_space,\n    Icon,\n    text,\n    __unstable_subtitle,\n    badgeText,\n    hotkeys,\n    IconRight,\n  ])\n\n  const renderWrapper = useCallback<ConditionalWrapperRenderWrapperCallback>(\n    (children) => {\n      return (\n        <Tooltip content={tooltipProps?.content} portal {...tooltipProps}>\n          {/* This div is needed to make the tooltip work in disabled menu items */}\n          <div>{children}</div>\n        </Tooltip>\n      )\n    },\n    [tooltipProps],\n  )\n\n  return (\n    <ConditionalWrapper condition={!!tooltipProps} wrapper={renderWrapper}>\n      <UIMenuItem\n        disabled={disabled}\n        paddingLeft={preview ? 1 : 3}\n        paddingRight={3}\n        paddingY={preview ? 1 : 3}\n        ref={ref}\n        {...rest}\n      >\n        {typeof childrenProp === 'undefined' && typeof renderMenuItem === 'function'\n          ? renderMenuItem(menuItemContent)\n          : menuItemContent}\n      </UIMenuItem>\n    </ConditionalWrapper>\n  )\n})\n","/* eslint-disable no-restricted-imports */\nimport {Popover as UIPopover, type PopoverProps as UIPopoverProps} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\n/** @internal */\nexport type PopoverProps = Omit<UIPopoverProps, 'animate'>\n\n/**\n * Customized Sanity UI <Popover> that forces `animate=true`\n *\n * All Popovers in the studio should be animated.\n *\n * @internal\n */\nexport const Popover = forwardRef(function Popover(\n  props: PopoverProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'children' | 'content' | 'width'>,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  return <UIPopover {...props} animate ref={ref} />\n})\n","/* eslint-disable no-restricted-imports */\nimport {Tab as UITab, type TabProps as UITabProps} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\n/**\n * @internal\n *\n * Padding and font sizes are fixed in Studio UI <Tab> components.\n */\nexport type TabProps = Pick<\n  UITabProps,\n  'aria-controls' | 'focused' | 'icon' | 'id' | 'label' | 'selected' | 'tone'\n>\n\n/**\n * Customized Sanity UI <Tab> with limited layout options.\n *\n * @internal\n */\nexport const Tab = forwardRef(function Tab(\n  {tone = 'default', ...props}: TabProps & Omit<HTMLProps<HTMLButtonElement>, 'as' | 'size'>,\n  ref: ForwardedRef<HTMLButtonElement>,\n) {\n  return <UITab {...props} muted padding={2} ref={ref} tone={tone} />\n})\n","/* eslint-disable no-restricted-imports */\nimport {\n  TooltipDelayGroupProvider as UITooltipDelayGroupProvider,\n  type TooltipDelayGroupProviderProps as UITooltipDelayGroupProviderProps,\n} from '@sanity/ui'\n\nimport {TOOLTIP_DELAY_PROPS} from '../tooltip/constants'\n\n/** @internal */\nexport type TooltipDelayGroupProviderProps = Omit<UITooltipDelayGroupProviderProps, 'delay'>\n\n/**\n * Opinionated Sanity UI <TooltipDelayGroupProvider> which forces the same delay to all tooltips.\n *\n * @internal\n */\nexport const TooltipDelayGroupProvider = (props: TooltipDelayGroupProviderProps) => {\n  return (\n    <UITooltipDelayGroupProvider delay={TOOLTIP_DELAY_PROPS}>\n      {props.children}\n    </UITooltipDelayGroupProvider>\n  )\n}\n","const BASE_URL = \"https://docs.sanity.io/help/\";\nfunction generateHelpUrl(slug) {\n  return BASE_URL + slug;\n}\nexport { generateHelpUrl };\n//# sourceMappingURL=generate-help-url.esm.js.map\n"],"names":["ConditionalWrapper","children","condition","wrapper","LARGE_BUTTON_PROPS","space","padding","DEFAULT_BUTTON_PROPS","TooltipButtonWrapper","styled","span","Button","forwardRef","t0","ref","$","_c","paddingY","rest","t1","t2","t3","tooltipProps","size","mode","tone","undefined","t4","content","renderWrapper","sizeProps","t5","t6","UIButton","t7","Dialog","bodyHeight","footer","props","t","useTranslation","confirmButton","cancelButton","onClose","UIDialog","ErrorBoundary","onCatch","source","useContext","SourceContext","error","caughtError","info","caughtInfo","onUncaughtError","handleCatch","UIErrorBoundary","MenuButton","popover","animate","UIMenuButton","Hotkeys","makePlatformAware","keys","hotKeys","map","platformifyKey","UIHotkeys","IS_APPLE_DEVICE","navigator","platform","test","key","lowerKey","toLowerCase","matchCase","original","target","orgLength","length","replace","char","i","toUpperCase","TOOLTIP_DELAY_PROPS","open","TOOLTIP_SHARED_PROPS","arrow","boundaryElement","delay","fallbackPlacements","placement","portal","Tooltip","hotkeys","UITooltip","FONT_SIZE","SUBTITLE_FONT_SIZE","SubtitleText","Text","PreviewWrapper","Box","MenuItem","Icon","IconRight","__unstable_space","__unstable_subtitle","badgeText","childrenProp","disabled","renderMenuItem","text","icon","iconRight","preview","opacity","isValidElement","isValidElementType","marginTop","marginBottom","menuItemContent","t8","t9","t10","t11","t12","t13","UIMenuItem","t14","Popover","UIPopover","Tab","UITab","TooltipDelayGroupProvider","UITooltipDelayGroupProvider","BASE_URL","slug"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOO,SAASA,mBAAmB,EACjCC,QAAAA,EACAC,SAAAA,EACAC,OAAAA,EAKF,EAAoB;IACbD,OAAAA,YAIEC,QAAQF,QAAQ,IAHdA;AAIX;AC2BA,MAAMG,qBAAqB;IACzBC,OAAO;IACPC,SAAS;AACX,GACMC,uBAAuB;IAC3BF,OAAO;IACPC,SAAS;AACX,GAEME,iNAAuBC,SAAAA,CAAOC,IAAAA,CAAAA;;AAAAA,CAAAA,EAQvBC,2KAASC,aAAAA,EAAW,SAAAC,EAAAA,EAAAC,GAAAA,EAAA;IAAAC,MAAAA,6KAAAC,EAAA,EAAA;IAAA,IAAAC,UAAAC,MAAAC,IAAAC,IAAAC,IAAAC;IAAAP,CAAAA,CAAAA,EAAAA,KAAAF,KAAAA,CAC/B,EAAAU,MAAAJ,EAAAA,EAAAK,MAAAJ,EAAAA,EAAAH,QAAAA,EAAAQ,MAAAJ,EAAAA,EAAAC,YAAAA,EAAA,GAAAJ,MAAA,GAAAL,IAO4EE,CAAAA,CAAAA,EAAAA,GAAAF,IAAAE,CAAAA,CAAAA,EAAAA,GAAAE,UAAAF,CAAAA,CAAAA,EAAAA,GAAAG,MAAAH,CAAAA,CAAAA,EAAAA,GAAAI,IAAAJ,CAAAA,CAAAA,EAAAA,GAAAK,IAAAL,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAO,YAAAA,IAAAA,CAAAL,WAAAF,CAAAA,CAAA,CAAA,CAAA,EAAAG,OAAAH,CAAAA,CAAA,CAAA,CAAA,EAAAI,KAAAJ,CAAAA,CAAA,CAAA,CAAA,EAAAK,KAAAL,CAAAA,CAAA,CAAA,CAAA,EAAAM,KAAAN,CAAAA,CAAA,CAAA,CAAA,EAAAO,eAAAP,CAAAA,CAAA,CAAA,CAAA;IAN1E,MAAAQ,OAAAJ,OAAgBO,KAAAA,IAAT,YAAPP,IACAK,OAAAJ,OAAgBM,KAAAA,IAAT,YAAPN,IAEAK,OAAAJ,OAAgBK,KAAAA,IAAT,YAAPL;IAAgBM,IAAAA;IAAAZ,CAAAA,CAAAA,EAAAA,KAAAO,eAAAA,CAOhBK,KAAA1B,CAAAA,WAEK,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAA,SAAA;YAAiB,SAAAqB,cAAYM;YAAW,QAAA,CAAA;YAAM,GAAKN,YAAAA;YAElD,UAAC,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAA,sBAAA;gBAA6B;YAAE,CAAA;QAAA,CAClC,GAEHP,CAAAA,CAAAA,EAAAA,GAAAO,cAAAP,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IARHc,MAAAA,gBAAsBF,IAYtBG,YAAkBP,SAAS,YAAShB,uBAAAH,oBAGH2B,KAAAA,CAAAA,CAAET;IAAYU,IAAAA;IAAAjB,CAAAA,CAAAA,EAAAA,KAAAS,QAAAT,CAAAA,CAAAE,EAAAA,CAAAA,KAAAA,YAAAF,CAAAA,CAAAD,EAAAA,CAAAA,KAAAA,OAAAC,CAAAA,CAAA,EAAA,CAAA,KAAAG,QAAAH,CAAAA,CAAAA,GAAAA,KAAAe,aAAAf,CAAAA,CAAA,EAAA,CAAA,KAAAU,OAAAA,CAC3CO,KAAA,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,oLAACC,SAAAA,EAAQ;QAAA,GAAKf,IAAAA;QAAI,GAAMY,SAAAA;QAAqBb;QAAeH;QAAWU;QAAYC;IAAQ,CAAA,GAAAV,CAAAA,CAAAA,EAAAA,GAAAS,MAAAT,CAAAA,CAAAA,GAAAA,GAAAE,UAAAF,CAAAA,CAAAA,GAAAA,GAAAD,KAAAC,CAAAA,CAAAA,GAAAA,GAAAG,MAAAH,CAAAA,CAAAA,GAAAA,GAAAe,WAAAf,CAAAA,CAAAA,GAAAA,GAAAU,MAAAV,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA;IAAAmB,IAAAA;IAAA,OAAAnB,CAAAA,CAAAc,EAAAA,CAAAA,KAAAA,iBAAAd,CAAAA,CAAAA,GAAAA,KAAAgB,MAAAhB,CAAAA,CAAA,EAAA,CAAA,KAAAiB,KAAAA,CAD7FE,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,sKAAAA,CAAAA,MAAAA,EAAC,oBAAA;QAA8B,WAAAH;QAAyBF,SAAAA;QACtDG,UAAAA;IAAAA,CACF,GAAqBjB,CAAAA,CAAAA,GAAAA,GAAAc,eAAAd,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAAmB,EAAAA,IAAAA,KAAAnB,CAAAA,CAAA,EAAA,CAAA,EAFrBmB;AAEqB,CAExB,GC7CYC,2KAASvB,aAAAA,EAAW,SAAAC,EAAAA,EAAAC,GAAAA,EAAA;IAAAC,MAAAA,6KAAAC,EAAA,EAAA;IAAAoB,IAAAA,YAAAnC,UAAAoC,QAAAC,OAAAnB;IAAAJ,CAAAA,CAAAA,EAAAA,KAAAF,KAAAA,CAC/B,EAAAuB,UAAAA,EAAAnC,QAAAA,EAAAoC,MAAAA,EAAA/B,SAAAa,EAAAA,EAAA,GAAAmB,OAAAA,GAAAzB,IAM0EE,CAAAA,CAAAA,EAAAA,GAAAF,IAAAE,CAAAA,CAAAA,EAAAA,GAAAqB,YAAArB,CAAAA,CAAAA,EAAAA,GAAAd,UAAAc,CAAAA,CAAAA,EAAAA,GAAAsB,QAAAtB,CAAAA,CAAAA,EAAAA,GAAAuB,OAAAvB,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,CAAAiB,aAAArB,CAAAA,CAAA,CAAA,CAAA,EAAAd,WAAAc,CAAAA,CAAA,CAAA,CAAA,EAAAsB,SAAAtB,CAAAA,CAAA,CAAA,CAAA,EAAAuB,QAAAvB,CAAAA,CAAA,CAAA,CAAA,EAAAI,KAAAJ,CAAAA,CAAA,CAAA,CAAA;IAFxE,MAAAT,UAAAa,OAAcO,KAAAA,IAAAA,CAAAA,IAAdP,IAKF,EAAAoB,CAAAA,EAAAA,2KAAYC,iBAAAA,CAAe;IAACpB,IAAAA;IAAAL,CAAAA,CAAAsB,CAAAA,CAAAA,KAAAA,UAAAtB,CAAAA,CAAAA,EAAAA,KAAAuB,SAAAvB,CAAAA,CAAA,CAAA,CAAA,KAAAwB,IAAAA,CAQtBnB,KAAAA,CAACiB,QAAMI,iBAAmBJ,QAAMK,YAAAA,KAC9B,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,OAAA,oLAAC,OAAA,EAAW;QAAA,OAAA;QAAY,KAAA;QAAW,SAAA;QAAoB,SAAA;QACpDJ,UAAAA;YAAKK,MAAAA,OAAAA,IAAAA,aAAAA,GAAAA,CAAAA,GAAAA,sKAAAA,CAAAA,MAAAA,EACHV,2LAAAA,EACM;gBAAA,MAAA;gBACI,SAAC;gBACJ,MAAAM,EAAE,kCAAkC;gBACrC,MAAA;gBACI,SAAAD,MAAKK,OAAAA;gBACF,eAAA;gBAAe,GACvBN,OAAMK,YAAAA;YAAAA,CAEd;YACCL,OAAMI,aAAAA,IACL,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,oLAACR,SAAAA,EAAAA;gBACM,MAAA;gBACI,SAAA;gBACH,MAAAM,EAAE,mCAAmC;gBACtC,MAAA;gBACO,eAAA;gBACRF,GAAAA,OAAMI,aAAAA;YAEd,CAAA;SAAA;IAAA,CACF,GACD1B,CAAAA,CAAAA,EAAAA,GAAAsB,QAAAtB,CAAAA,CAAAA,EAAAA,GAAAuB,OAAAvB,CAAAA,CAAAA,EAAAA,GAAAwB,GAAAxB,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,KAAAL,CAAAA,CAAA,CAAA,CAAA;IAG+BM,MAAAA,KAAAf,UAAe,IAAA;IAAAqB,IAAAA;IAAAZ,CAAAA,CAAAqB,EAAAA,CAAAA,KAAAA,cAAArB,CAAAA,CAAAA,GAAAA,KAAAd,YAAAc,CAAAA,CAAA,EAAA,CAAA,KAAAM,KAAAA,CAAjDM,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,sKAAAA,CAAAA,MAAAA,oLAAC,MAAA,EAAYS;QAAAA,QAAAA;QAAqB,SAAAf;QAAAA;IAElC,CAAA,GAAMN,CAAAA,CAAAA,GAAAA,GAAAqB,YAAArB,CAAAA,CAAAA,GAAAA,GAAAd,UAAAc,CAAAA,CAAAA,GAAAA,GAAAM,IAAAN,CAAAA,CAAAA,GAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,EAAA,CAAA;IAAAgB,IAAAA;IAAAhB,OAAAA,CAAAA,CAAA,EAAA,CAAA,KAAAuB,SAAAvB,CAAAA,CAAAD,EAAAA,CAAAA,KAAAA,OAAAC,CAAAA,CAAAK,EAAAA,CAAAA,KAAAA,MAAAL,CAAAA,CAAAA,GAAAA,KAAAY,KAAAA,CAlCRI,KAAA,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,sKAACa,SAAAA,EAAAA;QAAQ,GACHN,KAAAA;QACJ,SAAM,CAAA;QACDxB;QAEH,QAAAM;QA2BFO,UAGF;IAAA,CAAA,GAAWZ,CAAAA,CAAAA,GAAAA,GAAAuB,OAAAvB,CAAAA,CAAAA,GAAAA,GAAAD,KAAAC,CAAAA,CAAAA,GAAAA,GAAAK,IAAAL,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA,EAnCXgB;AAmCW,CAEd;ACrFM,SAAAc,cAAAhC,EAAAA,EAAA;IAAAE,MAAAA,6KAAAC,EAAA,CAAA;IAAA,IAAA8B,SAAA5B;IAAAH,CAAAA,CAAAA,EAAAA,KAAAF,KAAAA,CAAuB,EAAAiC,OAAAA,EAAA,GAAA5B,MAAAA,GAAAL,IAAsCE,CAAAA,CAAAA,EAAAA,GAAAF,IAAAE,CAAAA,CAAAA,EAAAA,GAAA+B,SAAA/B,CAAAA,CAAAA,EAAAA,GAAAG,IAAAA,IAAAA,CAAA4B,UAAA/B,CAAAA,CAAA,CAAA,CAAA,EAAAG,OAAAH,CAAAA,CAAA,CAAA,CAAA;IAElEgC,MAAAA,2KAAeC,aAAAA,mJAAAC,gBAAwB;IAAC9B,IAAAA;IAAAJ,CAAAA,CAAA+B,CAAAA,CAAAA,KAAAA,WAAA/B,CAAAA,CAAAA,EAAAA,KAAAgC,SAAAA,CAGtC5B,KAAAC,CAAAA,QAAA;QAAC,MAAA,EAAA8B,OAAAC,WAAAA,EAAAC,MAAAC,UAAAA,EAAAA,GAAAjC;QAEC2B,QAAMO,kBAAoBH,aAAaE,UAAU,GAGjDP,UAAO;YAAAI,OAAWC;YAAWC,MAAQC;QAAAA,CAAU;IAChDtC,GAAAA,CAAAA,CAAAA,EAAAA,GAAA+B,SAAA/B,CAAAA,CAAAA,EAAAA,GAAAgC,QAAAhC,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA;IAPH,MAAAwC,cAAoBpC;IASnBC,IAAAA;IAAA,OAAAL,CAAAA,CAAAwC,CAAAA,CAAAA,KAAAA,eAAAxC,CAAAA,CAAAA,EAAAA,KAAAG,OAAAA,CAEME,KAAA,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,sKAACoC,gBAAAA,EAAoBtC;QAAAA,GAAAA,IAAAA;QAAeqC,SAAU;IAAA,CAAK,GAAAxC,CAAAA,CAAAA,EAAAA,GAAAwC,aAAAxC,CAAAA,CAAAA,EAAAA,GAAAG,MAAAH,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,KAAAL,CAAAA,CAAA,CAAA,CAAA,EAAnDK;AAAmD;ACZrD,MAAMqC,+KAAa7C,aAAAA,EAAW,SAAA0B,KAAAA,EAAAxB,GAAAA,EAAA;IAAAC,MAAAA,6KAAAC,EAAA,CAAA;IAAAH,IAAAA;IAAAE,CAAAA,CAAA,CAAA,CAAA,KAAAuB,MAAAoB,OAAAA,GAAAA,CAQtB7C,KAAA;QAAA,GACJyB,MAAKoB,OAAAA;QAAAC,SAAA,CAAA;IAET5C,GAAAA,CAAAA,CAAA,CAAA,CAAA,GAAAuB,MAAAoB,OAAAA,EAAA3C,CAAAA,CAAAA,EAAAA,GAAAF,EAAAA,IAAAA,KAAAE,CAAAA,CAAA,CAAA,CAAA;IAAAI,IAAAA;IAAA,OAAAJ,CAAAA,CAAAuB,CAAAA,CAAAA,KAAAA,SAAAvB,CAAAA,CAAAA,EAAAA,KAAAD,OAAAC,CAAAA,CAAA,CAAA,CAAA,KAAAF,KAAAA,CANHM,KAAC,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,sKAAAyC,aAAAA,EAAAA;QACKtB,GAAAA,KAAAA;QACCxB;QACI,SAAAD;IAIT,CAAA,GAAAE,CAAAA,CAAAA,EAAAA,GAAAuB,OAAAvB,CAAAA,CAAAA,EAAAA,GAAAD,KAAAC,CAAAA,CAAAA,EAAAA,GAAAF,IAAAE,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA,EAPFI;AAOE,CAEL;ACJM,SAAA0C,QAAAhD,EAAAA,EAAA;IAAAE,MAAAA,6KAAAC,EAAA,EAAA;IAAA,IAAAsB,OAAAnB,IAAAC;IAAAL,CAAAA,CAAAA,EAAAA,KAAAF,KAAAA,CAAiB,EAAAiD,mBAAA3C,EAAAA,EAAA4C,MAAA3C,EAAAA,EAAA,GAAAkB,OAAAzB,GAAAA,IAAsEE,CAAAA,CAAAA,EAAAA,GAAAF,IAAAE,CAAAA,CAAAA,EAAAA,GAAAuB,OAAAvB,CAAAA,CAAAA,EAAAA,GAAAI,IAAAJ,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,CAAAkB,QAAAvB,CAAAA,CAAA,CAAA,CAAA,EAAAI,KAAAJ,CAAAA,CAAA,CAAA,CAAA,EAAAK,KAAAL,CAAAA,CAAA,CAAA,CAAA;IAArE+C,MAAAA,oBAAA3C,OAAwBO,KAAAA,IAAAA,CAAAA,IAAxBP;IAAwBE,IAAAA;IAAAN,CAAAA,CAAAA,EAAAA,KAAAK,KAAAA,CAAQC,KAAAD,OAAYM,KAAAA,IAAAA,CAAZN,CAAAA,GAAAA,IAAYL,CAAAA,CAAAA,EAAAA,GAAAK,IAAAL,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAZ,MAAAiD,UAAA3C;IAAYM,IAAAA;IAAAZ,CAAAA,CAAAiD,CAAAA,CAAAA,KAAAA,WAAAjD,CAAAA,CAAAA,EAAAA,KAAA+C,oBAAAA,CACtDnC,KAAAmC,oBAAoBE,QAAOC,GAAAA,CAAAC,cAAmB,IAAIF,SAAOjD,CAAAA,CAAAA,EAAAA,GAAAiD,SAAAjD,CAAAA,CAAAA,EAAAA,GAAA+C,mBAAA/C,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA;IAAtE,MAAAgD,OAAapC;IAAyDI,IAAAA;IAAA,OAAAhB,CAAAA,CAAAgD,CAAAA,CAAAA,KAAAA,QAAAhD,CAAAA,CAAAA,GAAAA,KAAAuB,QAAAA,CAC/DP,KAAA,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,oLAACoC,UAAAA,EAAc7B;QAAAA,GAAAA,KAAAA;QAAayB;IAAQ,CAAA,GAAAhD,CAAAA,CAAAA,EAAAA,GAAAgD,MAAAhD,CAAAA,CAAAA,GAAAA,GAAAuB,OAAAvB,CAAAA,CAAAA,GAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA,EAApCgB;AAAoC;AAM7C,MAAMqC,kBACJ,OAAOC,YAAc,OAAe,OAAOA,UAAUC,QAAAA,IAAa,WAC9D,CAAA,IACA,uBAAuBC,IAAAA,CAAKF,UAAUC,QAAAA,IAAY,EAAE;AAU1D,SAASJ,eAAeM,GAAAA,EAAqB;IACrCC,MAAAA,WAAWD,IAAIE,WAAAA,CAAY;IAEjC,OAAID,aAAa,SAASL,kBACjBO,UAAUH,KAAK,QAAQ,IAG5BC,aAAa,YAAY,CAACL,kBACrBO,UAAUH,KAAK,KAAK,IAGtBA;AACT;AAWA,SAASG,UAAUC,QAAAA,EAAkBC,MAAAA,EAAwB;IAC3D,MAAMC,YAAYF,SAASG,MAAAA;IAE3B,OAAOF,OAAOG,OAAAA,CAAQ,MAAM,CAACC,MAAMC,IAG1BA,IAAIJ,aAAaF,QAAAA,CAASM,CAAC,CAAA,KAAMN,QAAAA,CAASM,CAAC,CAAA,CAAEC,WAAAA,KAAgBF,KAAKE,WAAAA,KAAgBF,IAC1F;AACH;AChFO,MAAMG,sBAAsB;IACjCC,MAAM;AACR,GCmBMC,uBAAuC;IAC3C3B,SAAS,CAAA;IACT4B,OAAO,CAAA;IACPC,iBAAiB;IACjBC,OAAOL;IACPM,oBAAoB;QAAC;QAAgB;QAAc;QAAa,SAAS;KAAA;IACzEC,WAAW;IACXC,QAAQ,CAAA;AACV,GAYaC,4KAAUjF,aAAAA,EAAW,SAAA0B,KAAAA,EAAAxB,GAAAA,EAAA;IAAAC,MAAAA,IAAAC,yKAAAA,EAAA,EAAA;IAAA,IAAAY,SAAAkE,SAAA5E;IAAAH,IAAAA,CAAAA,CAAAA,EAAAA,KAAAuB,QAAAA,CAIhC,EAAAV,OAAAA,EAAAkE,OAAAA,EAAA,GAAA5E,MAAoCoB,GAAAA,OAAKvB,CAAAA,CAAAA,EAAAA,GAAAuB,OAAAvB,CAAAA,CAAAA,EAAAA,GAAAa,SAAAb,CAAAA,CAAAA,EAAAA,GAAA+E,SAAA/E,CAAAA,CAAAA,EAAAA,GAAAG,IAAAA,IAAAA,CAAAU,UAAAb,CAAAA,CAAA,CAAA,CAAA,EAAA+E,UAAA/E,CAAAA,CAAA,CAAA,CAAA,EAAAG,OAAAH,CAAAA,CAAA,CAAA,CAAA,GAErC,OAAOa,WAAY,UAAQ;QAAAf,IAAAA;QAAAE,CAAAA,CAAAA,EAAAA,KAAAa,UAAAA,CAMpBf,MAAAe,WACE,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,oLAAA,MAAA,EAAA;YAAU,MAAC;YAAW,SAAC;YACtB,UAAC,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAA,yLAAA,EAAA;gBAAW,MAAA;gBAAIA,UAAQ;YAAA,CAAA;QAAA,CAC1B,GACDb,CAAAA,CAAAA,EAAAA,GAAAa,SAAAb,CAAAA,CAAAA,EAAAA,GAAAF,GAAAA,IAAAA,MAAAE,CAAAA,CAAA,CAAA,CAAA;QAAAI,IAAAA;QAAAJ,CAAAA,CAAAA,EAAAA,KAAA+E,UAAAA,CACA3E,KAAA2E,WACC,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,oLAAC,MAAA,EAAS;YAAA,MAAA;YACR,UAAA,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAC,SAAcA;gBAAAA,MAAAA;YACjB,CAAA;QAAA,CAAA,GACD/E,CAAAA,CAAAA,EAAAA,GAAA+E,SAAA/E,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA;QAAAK,IAAAA;QAAAL,CAAAA,CAAAF,CAAAA,CAAAA,KAAAA,OAAAE,CAAAA,CAAAA,EAAAA,KAAAI,KAAAA,CAVHC,KAAC,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,OAAA,oLAAA,OAAA,EAAW;YAAA,OAAA;YACTP,UAAAA;gBAAAA;gBAKAM;aAAAA;QAKH,CAAA,GAAOJ,CAAAA,CAAAA,EAAAA,GAAAF,KAAAE,CAAAA,CAAAA,EAAAA,GAAAI,IAAAJ,CAAAA,CAAAA,GAAAA,GAAAK,EAAAA,IAAAA,KAAAL,CAAAA,CAAA,EAAA,CAAA;QAAAM,IAAAA;QAAAN,OAAAA,CAAAA,CAAAD,EAAAA,CAAAA,KAAAA,OAAAC,CAAAA,CAAAA,GAAAA,KAAAG,QAAAH,CAAAA,CAAA,EAAA,CAAA,KAAAK,KAAAA,CAdXC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,sKAAAA,CAAAA,MAAAA,oLAAC0E,UAAAA,EAAST;YAAAA,GAAAA,oBAAAA;YAGN,SAAAlE;YAaO,SAAA;YACJN;YACDI,GAAAA,IAAAA;QACJ,CAAA,GAAAH,CAAAA,CAAAA,GAAAA,GAAAD,KAAAC,CAAAA,CAAAA,GAAAA,GAAAG,MAAAH,CAAAA,CAAAA,GAAAA,GAAAK,IAAAL,CAAAA,CAAAA,GAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,EAAA,CAAA,EAnBFM;IAAAA;IAmBER,IAAAA;IAAA,OAAAE,CAAAA,CAAAa,EAAAA,CAAAA,KAAAA,WAAAb,CAAAA,CAAAA,GAAAA,KAAAD,OAAAC,CAAAA,CAAA,EAAA,CAAA,KAAAG,OAAAA,CAICL,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,sKAAAA,CAAAA,MAAAA,EAACkF,4LAAAA,EAAAA;QAAS,GAAAT,oBAAAA;QAAoC1D;QAAcd;QAAG,GAAMI,IAAAA;IAAQ,CAAA,GAAAH,CAAAA,CAAAA,GAAAA,GAAAa,SAAAb,CAAAA,CAAAA,GAAAA,GAAAD,KAAAC,CAAAA,CAAAA,GAAAA,GAAAG,MAAAH,CAAAA,CAAAA,GAAAA,GAAAF,EAAAA,IAAAA,KAAAE,CAAAA,CAAA,EAAA,CAAA,EAA7EF;AAA6E,CACrF,GC5CKmF,YAAY,GACZC,qBAAqB,GAGrBC,6MAAezF,SAAAA,oLAAO0F,OAAI,CAAA,CAAA;;AAAA,CAAA,EAoC1BC,8MAAiB3F,UAAAA,oLAAO4F,MAAG,CAAA,CAAA;;;;AAAA,CAAA,EAiBpBC,6KAAW1F,aAAAA,EAAW,SAAAC,EAAAA,EAAAC,GAAAA,EAAA;IAAAC,MAAAA,6KAAAC,EAAA,EAAA;IAAAuF,IAAAA,MAAAC,WAAAC,kBAAAC,qBAAAC,WAAAC,cAAAC,UAAAf,SAAAgB,gBAAA5F,MAAAC,IAAA4F,MAAAzF;IAAAP,CAAAA,CAAAA,EAAAA,KAAAF,KAAAA,CACjC,EAAA8F,SAAAA,EAAA1G,UAAA2G,YAAAA,EAAAC,QAAAA,EAAAf,OAAAA,EAAAkB,MAAAT,IAAAA,EAAAU,WAAAT,SAAAA,EAAAU,SAAA/F,EAAAA,EAAA2F,cAAAA,EAAAC,IAAAA,EAAAzF,YAAAA,EAAAoF,mBAAAA,EAAAD,gBAAAA,EAAA,GAAAvF,MAAA,GAAAL,IAe6FE,CAAAA,CAAAA,EAAAA,GAAAF,IAAAE,CAAAA,CAAAA,EAAAA,GAAAwF,MAAAxF,CAAAA,CAAAA,EAAAA,GAAAyF,WAAAzF,CAAAA,CAAAA,EAAAA,GAAA0F,kBAAA1F,CAAAA,CAAAA,EAAAA,GAAA2F,qBAAA3F,CAAAA,CAAAA,EAAAA,GAAA4F,WAAA5F,CAAAA,CAAAA,EAAAA,GAAA6F,cAAA7F,CAAAA,CAAAA,EAAAA,GAAA8F,UAAA9F,CAAAA,CAAAA,EAAAA,GAAA+E,SAAA/E,CAAAA,CAAAA,EAAAA,GAAA+F,gBAAA/F,CAAAA,CAAAA,GAAAA,GAAAG,MAAAH,CAAAA,CAAAA,GAAAA,GAAAI,IAAAJ,CAAAA,CAAAA,GAAAA,GAAAgG,MAAAhG,CAAAA,CAAAA,GAAAA,GAAAO,YAAAA,IAAAA,CAAAiF,OAAAxF,CAAAA,CAAA,CAAA,CAAA,EAAAyF,YAAAzF,CAAAA,CAAA,CAAA,CAAA,EAAA0F,mBAAA1F,CAAAA,CAAA,CAAA,CAAA,EAAA2F,sBAAA3F,CAAAA,CAAA,CAAA,CAAA,EAAA4F,YAAA5F,CAAAA,CAAA,CAAA,CAAA,EAAA6F,eAAA7F,CAAAA,CAAA,CAAA,CAAA,EAAA8F,WAAA9F,CAAAA,CAAA,CAAA,CAAA,EAAA+E,UAAA/E,CAAAA,CAAA,CAAA,CAAA,EAAA+F,iBAAA/F,CAAAA,CAAA,CAAA,CAAA,EAAAG,OAAAH,CAAAA,CAAA,EAAA,CAAA,EAAAI,KAAAJ,CAAAA,CAAA,EAAA,CAAA,EAAAgG,OAAAhG,CAAAA,CAAA,EAAA,CAAA,EAAAO,eAAAP,CAAAA,CAAA,EAAA,CAAA;IAR3FmG,MAAAA,UAAA/F,OAAcO,KAAAA,IAAAA,OAAdP;IAAc,IAAAC,IAAAC;IAAAN,CAAAA,CAAA0F,EAAAA,CAAAA,KAAAA,oBAAA1F,CAAAA,CAAAA,GAAAA,KAAA8F,YAAA9F,CAAAA,CAAA,EAAA,CAAA,KAAAmG,UAAAA,CAcT7F,KAAA6F,WACC,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAC,gBAAA;QACQ,OAAA;YAAAC,SAAUN,WAAQnF,OAAAA,KAAAA;QAAAA;QACX,cAAA+E,mBAAgB,IAAA;QAE9B,UAAC,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,oLAAA,OAAA,EAAA;YAAW,OAAA;YAAgB,QAAA;YAAe,SAAA;YAClC,UAAA;QAAA,CACT;IAAA,CACF,GACD1F,CAAAA,CAAAA,GAAAA,GAAA0F,kBAAA1F,CAAAA,CAAAA,GAAAA,GAAA8F,UAAA9F,CAAAA,CAAAA,GAAAA,GAAAmG,SAAAnG,CAAAA,CAAAA,GAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,EAAA,CAAA;IAAAY,IAAAA;IAAAZ,CAAAA,CAAAA,GAAAA,KAAAwF,OAAAA,CACA5E,KAAA4E,QACE,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,oLAAA,MAAA,EAAA;QAAkB,cAAA;QACjB,UAAC,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,OAAA,oLAAA,OAAA,EAAA;YAAWP,MAAQA;YACjBoB,UAAAA;kLAAAA,iBAAAA,EAAeb,IAAI,KAAKA;iBACxBc,0LAAAA,EAAmBd,IAAI,KAAK,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAC,MAAA,CAAA;;SAChC;IACF,CAAA,GACDxF,CAAAA,CAAAA,GAAAA,GAAAwF,MAAAxF,CAAAA,CAAAA,GAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,EAAA,CAAA;IAAAgB,IAAAA;IAAAhB,CAAAA,CAAA2F,EAAAA,CAAAA,KAAAA,uBAAA3F,CAAAA,CAAAA,GAAAA,KAAAgG,OAAAA,CACAhF,KAAAgF,QAAAA,aAAAA,GAAAA,CAAAA,GAAAA,sKAAAA,CAAAA,OAAAA,oLACE,QAAA,EACO;QAAA,MAAC;QACA,OAAAL,sBAAmB,IAAA;QACb,aAAAA,sBAA0B,IAAA;QAEvC,UAAA;YAAA,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,oLAAC,OAAA,EAAA;gBAAWV,MAAAA;gBAAwB,cAAA;gBAAkB,QAAA;gBAAA,UAEtD;YAAA,CAAA;YACCU,uBACE,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAA,cAAA;gBAAmBT,MAAiBA;gBAAgB,cAAA;gBAAkB,QAAA;gBAAS,OAAI,CAAA;gBACjFS,UACH;YAAA,CAAA;SAAA;IAEJ,CAAA,GACD3F,CAAAA,CAAAA,GAAAA,GAAA2F,qBAAA3F,CAAAA,CAAAA,GAAAA,GAAAgG,MAAAhG,CAAAA,CAAAA,GAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,EAAA,CAAA;IAAAiB,IAAAA;IAAAjB,CAAAA,CAAAyF,EAAAA,CAAAA,KAAAA,aAAAzF,CAAAA,CAAAA,GAAAA,KAAA4F,aAAA5F,CAAAA,CAAA,EAAA,CAAA,KAAA+E,UAAAA,CACA9D,KAAAA,CAAC2E,aAAab,WAAWU,SAAAA,KACvB,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,OAAA,oLAAA,OAAA,EAAA;QAAW,OAAA;QAAc,KAAA;QAAe,YAAA;QACtCV,UAAAA;YAAAA,WAAY,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAA,SAAA;gBAAcA,MAAAA;gBAAgB,OAAA;oBAAAwB,WAAA,CAAA;oBAAAC,cAAA,CAAA;gBAAA;YAAA,CAAiC;YAE3EZ,aACC,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,oLAAC,QAAA,EAAgB;gBAAA,UAAC;gBAAS,OAAA;oBAAAW,WAAA,CAAA;oBAAAC,cAAA,CAAA;gBAAA;gBACxBZ,UACH;YAAA,CAAA;YAGDH,aACC,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,OAAA,oLAAC,OAAA,EAAWR;gBAAAA,MAAQA;gBACjBoB,UAAAA;sLAAAA,iBAAAA,EAAeZ,SAAS,KAAKA;0LAC7Ba,qBAAAA,EAAmBb,SAAS,KAAK,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAC,WAAS,CAAA,CAAA;iBAAA;YAC9C,CAAA;SAAA;IAAA,CAEJ,GACDzF,CAAAA,CAAAA,GAAAA,GAAAyF,WAAAzF,CAAAA,CAAAA,GAAAA,GAAA4F,WAAA5F,CAAAA,CAAAA,GAAAA,GAAA+E,SAAA/E,CAAAA,CAAAA,GAAAA,GAAAiB,EAAAA,IAAAA,KAAAjB,CAAAA,CAAA,EAAA,CAAA;IAAAmB,IAAAA;IAAAnB,CAAAA,CAAA,EAAA,CAAA,KAAAM,MAAAN,CAAAA,CAAAY,EAAAA,CAAAA,KAAAA,MAAAZ,CAAAA,CAAAgB,EAAAA,CAAAA,KAAAA,MAAAhB,CAAAA,CAAAA,GAAAA,KAAAiB,KAAAA,CApDHE,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,sKAAAA,CAAAA,OAAAA,mLAAC,QAAA,EAAW;QAAA,OAAA;QAAc,KAAA;QACvBb,UAAAA;YAAAA;YAUAM;YAQAI;YAgBAC;SAkBH;IAAA,CAAA,GAAOjB,CAAAA,CAAAA,GAAAA,GAAAM,IAAAN,CAAAA,CAAAA,GAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,GAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,GAAAA,GAAAiB,IAAAjB,CAAAA,CAAAA,GAAAA,GAAAmB,EAAAA,IAAAA,KAAAnB,CAAAA,CAAA,EAAA,CAAA,EAtDTK,KACEc;IAFJ,MAAAsF,kBAAwBpG;IAmEtBqG,IAAAA;IAAA1G,CAAAA,CAAAA,GAAAA,KAAAO,eAAAA,CAGAmG,KAAAxH,CAAAA,WAEK,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAA,SAAA;YAAiB,SAAAqB,cAAYM;YAAW,QAAA,CAAA;YAAM,GAAKN,YAAAA;YAElD,UAAqB,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAA,OAAA;gBAAR;YAAE,CAAA;QAAA,CACjB,GAEHP,CAAAA,CAAAA,GAAAA,GAAAO,cAAAP,CAAAA,CAAAA,GAAAA,GAAA0G,EAAAA,IAAAA,KAAA1G,CAAAA,CAAA,EAAA,CAAA;IARH,MAAAc,gBAAsB4F,IAaWC,KAAAA,CAAAA,CAAEpG,cAGhBqG,MAAAT,UAAe,IAAA,GAElBU,MAAAV,UAAe,IAAA;IAAAW,IAAAA;IAAA9G,CAAAA,CAAA6F,EAAAA,CAAAA,KAAAA,gBAAA7F,CAAAA,CAAAA,GAAAA,KAAAyG,mBAAAzG,CAAAA,CAAA,EAAA,CAAA,KAAA+F,iBAAAA,CAIxBe,MAAOjB,OAAAA,eAAiB,OAAe,OAAOE,kBAAmB,aAC9DA,eAAeU,eAAe,IAC9BA,iBAAezG,CAAAA,CAAAA,GAAAA,GAAA6F,cAAA7F,CAAAA,CAAAA,GAAAA,GAAAyG,iBAAAzG,CAAAA,CAAAA,GAAAA,GAAA+F,gBAAA/F,CAAAA,CAAAA,GAAAA,GAAA8G,GAAAA,IAAAA,MAAA9G,CAAAA,CAAA,EAAA,CAAA;IAAA+G,IAAAA;IAAA/G,CAAAA,CAAAA,GAAAA,KAAA8F,YAAA9F,CAAAA,CAAAD,EAAAA,CAAAA,KAAAA,OAAAC,CAAAA,CAAAG,EAAAA,CAAAA,KAAAA,QAAAH,CAAAA,CAAA,EAAA,CAAA,KAAA4G,OAAA5G,CAAAA,CAAAA,GAAAA,KAAA6G,OAAA7G,CAAAA,CAAA,EAAA,CAAA,KAAA8G,MAAAA,CAVrBC,MAAC,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,oLAAAC,WAAAA,EAAA;QACWlB;QACG,aAAAc;QACC,cAAC;QACL,UAAAC;QACL9G;QACDI,GAAAA,IAAAA;QAEH2G,UAAAA;IAAAA,CAGH,GAAa9G,CAAAA,CAAAA,GAAAA,GAAA8F,UAAA9F,CAAAA,CAAAA,GAAAA,GAAAD,KAAAC,CAAAA,CAAAA,GAAAA,GAAAG,MAAAH,CAAAA,CAAAA,GAAAA,GAAA4G,KAAA5G,CAAAA,CAAAA,GAAAA,GAAA6G,KAAA7G,CAAAA,CAAAA,GAAAA,GAAA8G,KAAA9G,CAAAA,CAAAA,GAAAA,GAAA+G,GAAAA,IAAAA,MAAA/G,CAAAA,CAAA,EAAA,CAAA;IAAAiH,IAAAA;IAAA,OAAAjH,CAAAA,CAAAc,EAAAA,CAAAA,KAAAA,iBAAAd,CAAAA,CAAAA,GAAAA,KAAA+G,OAAA/G,CAAAA,CAAA,EAAA,CAAA,KAAA2G,KAAAA,CAZfM,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,sKAAAA,CAAAA,MAAAA,EAAC,oBAAA;QAA8B,WAAAN;QAAyB7F,SAAAA;QACtDiG,UAAAA;IAAAA,CAYF,GAAqB/G,CAAAA,CAAAA,GAAAA,GAAAc,eAAAd,CAAAA,CAAAA,GAAAA,GAAA+G,KAAA/G,CAAAA,CAAAA,GAAAA,GAAA2G,IAAA3G,CAAAA,CAAAA,GAAAA,GAAAiH,GAAAA,IAAAA,MAAAjH,CAAAA,CAAA,EAAA,CAAA,EAbrBiH;AAaqB,CAExB,GC5LYC,WAAUrH,8KAAAA,EAAW,SAAA0B,KAAAA,EAAAxB,GAAAA,EAAA;IAAAC,MAAAA,KAAAC,wKAAAA,EAAA,CAAA;IAAAH,IAAAA;IAAA,OAAAE,CAAAA,CAAAuB,CAAAA,CAAAA,KAAAA,SAAAvB,CAAAA,CAAAA,EAAAA,KAAAD,MAAAA,CAIzBD,KAAC,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,oLAAAqH,UAAAA,EAAA;QAAc5F,GAAAA,KAAAA;QAAO,SAAM,CAAA;QAAOxB;IAAO,CAAA,GAAAC,CAAAA,CAAAA,EAAAA,GAAAuB,OAAAvB,CAAAA,CAAAA,EAAAA,GAAAD,KAAAC,CAAAA,CAAAA,EAAAA,GAAAF,EAAAA,IAAAA,KAAAE,CAAAA,CAAA,CAAA,CAAA,EAA1CF;AAA0C,CAClD,GCAYsH,MAAMvH,+KAAAA,EAAW,SAAAC,EAAAA,EAAAC,GAAAA,EAAA;IAAAC,MAAAA,QAAAC,qKAAAA,EAAA,CAAA;IAAA,IAAAsB,OAAAnB;IAAAJ,CAAAA,CAAAA,EAAAA,KAAAF,KAAAA,CAC5B,EAAAY,MAAAN,EAAAA,EAAA,GAAAmB,OAAAA,GAAAzB,IAA0FE,CAAAA,CAAAA,EAAAA,GAAAF,IAAAE,CAAAA,CAAAA,EAAAA,GAAAuB,OAAAvB,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,CAAAmB,QAAAvB,CAAAA,CAAA,CAAA,CAAA,EAAAI,KAAAJ,CAAAA,CAAA,CAAA,CAAA;IAAzFU,MAAAA,OAAAN,OAAgBO,KAAAA,IAAT,YAAPP;IAAgBC,IAAAA;IAAA,OAAAL,CAAAA,CAAAuB,CAAAA,CAAAA,KAAAA,SAAAvB,CAAAA,CAAAA,EAAAA,KAAAD,OAAAC,CAAAA,CAAA,CAAA,CAAA,KAAAU,OAAAA,CAGVL,KAAC,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,mLAAAgH,OAAAA,EAAA;QAAU9F,GAAAA,KAAAA;QAAO,OAAI,CAAA;QAAW,SAAC;QAAOxB;QAAWW;IAAQ,CAAA,GAAAV,CAAAA,CAAAA,EAAAA,GAAAuB,OAAAvB,CAAAA,CAAAA,EAAAA,GAAAD,KAAAC,CAAAA,CAAAA,EAAAA,GAAAU,MAAAV,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,KAAAL,CAAAA,CAAA,CAAA,CAAA,EAA5DK;AAA4D,CACpE,GCRYiH,4BAA4B/F,CAAA,UAAA;IAAAvB,MAAAA,6KAAAC,EAAA,CAAA;IAAAH,IAAAA;IAAAE,OAAAA,CAAAA,CAAA,CAAA,CAAA,KAAAuB,MAAArC,QAAAA,GAAAA,CAErCY,KAAC,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,oLAAAyH,4BAAAA,EAAA;QAAmClD,OAAkBA;QACnD9C,UAAKrC,MAAAA,QAAAA;IAAAA,CACR,GAA8Bc,CAAAA,CAAA,CAAA,CAAA,GAAAuB,MAAArC,QAAAA,EAAAc,CAAAA,CAAAA,EAAAA,GAAAF,EAAAA,IAAAA,KAAAE,CAAAA,CAAA,CAAA,CAAA,EAF9BF;AAE8B,GCpB5B0H,WAAW;AAEeC,SAAAA,gBAAAA,IAAAA,EAAsB;IAC7CD,OAAAA,WAAWC;AAAA","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12],"debugId":null}},
    {"offset": {"line": 424, "column": 0}, "map": {"version":3,"file":"MenuGroup.mjs","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/ui-components/menuGroup/MenuGroup.tsx"],"sourcesContent":["/* eslint-disable no-restricted-imports */\nimport {MenuGroup as UIMenuGroup, type MenuGroupProps as UIMenuGroupProps} from '@sanity/ui'\nimport {type HTMLProps, useCallback} from 'react'\n\nimport {\n  ConditionalWrapper,\n  type ConditionalWrapperRenderWrapperCallback,\n} from '../conditionalWrapper/ConditionalWrapper'\nimport {Tooltip, type TooltipProps} from '../tooltip/Tooltip'\n\n/** @internal */\nexport type MenuGroupProps = Pick<UIMenuGroupProps, 'icon' | 'popover' | 'text' | 'tone'>\n\n/**\n * Customized Sanity UI <MenuGroup> component with pre-defined layout options.\n *\n * @internal\n */\nexport const MenuGroup = (\n  props: MenuGroupProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'tabIndex' | 'popover'> & {\n      tooltipProps?: TooltipProps | null\n    },\n) => {\n  const {tooltipProps} = props\n\n  const renderWrapper = useCallback<ConditionalWrapperRenderWrapperCallback>(\n    (children) => {\n      return (\n        <Tooltip content={tooltipProps?.content} portal {...tooltipProps}>\n          {/* This div is needed to make the tooltip work in disabled menu items */}\n          <div>{children}</div>\n        </Tooltip>\n      )\n    },\n    [tooltipProps],\n  )\n\n  return (\n    <ConditionalWrapper condition={!!tooltipProps} wrapper={renderWrapper}>\n      <UIMenuGroup {...props} fontSize={1} padding={3} />\n    </ConditionalWrapper>\n  )\n}\n"],"names":["MenuGroup","props","$","_c","tooltipProps","t0","children","content","renderWrapper","t1","t2","UIMenuGroup","t3"],"mappings":";;;;;;;;;;;AAkBO,MAAMA,YAAYC,CAAA,UAAA;IAAAC,MAAAA,6KAAAC,EAAA,CAAA,GAMvB,EAAAC,YAAAA,EAAAA,GAAuBH;IAAKI,IAAAA;IAAAH,CAAAA,CAAAA,EAAAA,KAAAE,eAAAA,CAG1BC,KAAAC,CAAAA,WAEK,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,uLAAA,UAAA,EAAA;YAAiB,SAAAF,cAAYG;YAAW,QAAA,CAAA;YAAM,GAAKH,YAAAA;YAElD,UAAqB,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAA,OAAA;gBAAR;YAAE,CAAA;QAAA,CACjB,GAEHF,CAAAA,CAAAA,EAAAA,GAAAE,cAAAF,CAAAA,CAAAA,EAAAA,GAAAG,EAAAA,IAAAA,KAAAH,CAAAA,CAAA,CAAA,CAAA;IARH,MAAAM,gBAAsBH,IAaWI,KAAAA,CAAAA,CAAEL;IAAYM,IAAAA;IAAAR,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CAC3CS,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,sKAAAA,CAAAA,MAAAA,oLAACC,YAAAA,EAAgBV;QAAAA,GAAAA,KAAAA;QAAiB,UAAA;QAAY,SAAA;IAAK,CAAA,GAAAC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAQ,EAAAA,IAAAA,KAAAR,CAAAA,CAAA,CAAA,CAAA;IAAAU,IAAAA;IAAA,OAAAV,CAAAA,CAAAM,CAAAA,CAAAA,KAAAA,iBAAAN,CAAAA,CAAAA,EAAAA,KAAAO,MAAAP,CAAAA,CAAA,CAAA,CAAA,KAAAQ,KAAAA,CADrDE,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,sKAAAA,CAAAA,MAAAA,EAAC,0MAAA,EAAA;QAA8B,WAAAH;QAAyBD,SAAAA;QACtDE,UAAAA;IAAAA,CACF,GAAqBR,CAAAA,CAAAA,EAAAA,GAAAM,eAAAN,CAAAA,CAAAA,EAAAA,GAAAO,IAAAP,CAAAA,CAAAA,EAAAA,GAAAQ,IAAAR,CAAAA,CAAAA,EAAAA,GAAAU,EAAAA,IAAAA,KAAAV,CAAAA,CAAA,CAAA,CAAA,EAFrBU;AAEqB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 468, "column": 0}, "map": {"version":3,"file":"StructureToolProvider.mjs","sources":["file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/i18n/index.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/util/getExtendedProjection.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/SerializeError.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/Sort.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/MenuItem.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/MenuItemGroup.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/util/validateId.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/util/getStructureNodeId.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/Component.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/util/resolveTypeForDocument.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/views/View.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/views/ComponentView.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/views/FormView.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/views/index.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/Document.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/InitialValueTemplateItem.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/Intent.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/Layout.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/GenericList.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/DocumentList.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/List.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/ListItem.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/DocumentListItem.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/DocumentTypeList.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/documentTypeListItems.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/structureBuilder/createStructureBuilder.ts","file:///Users/keno/Documents/stickoscr.com/Sanity/Keno%20Projects/valentine-dev/node_modules/sanity/src/structure/StructureToolProvider.tsx"],"sourcesContent":["import {defineLocaleResourceBundle} from 'sanity'\n\n/**\n * The locale namespace for the structure tool\n *\n * @public\n */\nexport const structureLocaleNamespace = 'structure' as const\n\n/**\n * The default locale bundle for the structure tool, which is US English.\n *\n * @internal\n */\nexport const structureUsEnglishLocaleBundle = defineLocaleResourceBundle({\n  locale: 'en-US',\n  namespace: structureLocaleNamespace,\n  resources: () => import('./resources'),\n})\n\n/**\n * The locale resource keys for the structure tool.\n *\n * @alpha\n * @hidden\n */\nexport type {StructureLocaleResourceKeys} from './resources'\n","import {type SchemaType, type SortOrderingItem} from '@sanity/types'\n\nconst IMPLICIT_SCHEMA_TYPE_FIELDS = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']\n\n// Takes a path array and a schema type and builds a GROQ join every time it enters a reference field\nfunction joinReferences(schemaType: SchemaType, path: string[], strict: boolean = false): string {\n  const [head, ...tail] = path\n\n  if (!('fields' in schemaType)) {\n    return ''\n  }\n\n  const schemaField = schemaType.fields.find((field) => field.name === head)\n  if (!schemaField) {\n    if (!IMPLICIT_SCHEMA_TYPE_FIELDS.includes(head)) {\n      const errorMessage = `The current ordering config targeted the nonexistent field \"${head}\" on schema type \"${schemaType.name}\". It should be one of ${schemaType.fields.map((field) => field.name).join(', ')}`\n      if (strict) {\n        throw new Error(errorMessage)\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage)\n      }\n    }\n    return ''\n  }\n\n  if ('to' in schemaField.type && schemaField.type.name === 'reference') {\n    const refTypes = schemaField.type.to\n    return `${head}->{${refTypes.map((refType) => joinReferences(refType, tail)).join(',')}}`\n  }\n\n  const tailFields = tail.length > 0 && joinReferences(schemaField.type, tail)\n  const tailWrapper = tailFields ? `{${tailFields}}` : ''\n  return tail.length > 0 ? `${head}${tailWrapper}` : head\n}\n\nexport function getExtendedProjection(\n  schemaType: SchemaType,\n  orderBy: SortOrderingItem[],\n  strict: boolean = false,\n): string {\n  return orderBy\n    .map((ordering) => joinReferences(schemaType, ordering.field.split('.'), strict))\n    .join(', ')\n}\n","import {type SerializePath} from './StructureNodes'\n\n/** @internal */\nexport class SerializeError extends Error {\n  public readonly path: SerializePath\n  public helpId?: HELP_URL\n\n  constructor(\n    message: string,\n    parentPath: SerializePath,\n    pathSegment: string | number | undefined,\n    hint?: string,\n  ) {\n    super(message)\n    this.name = 'SerializeError'\n    const segment = typeof pathSegment === 'undefined' ? '<unknown>' : `${pathSegment}`\n    this.path = (parentPath || []).concat(hint ? `${segment} (${hint})` : segment)\n  }\n\n  withHelpUrl(id: HELP_URL): SerializeError {\n    this.helpId = id\n    return this\n  }\n}\n\n/** @internal */\nexport enum HELP_URL {\n  ID_REQUIRED = 'structure-node-id-required',\n  TITLE_REQUIRED = 'structure-title-required',\n  FILTER_REQUIRED = 'structure-filter-required',\n  INVALID_LIST_ITEM = 'structure-invalid-list-item',\n  COMPONENT_REQUIRED = 'structure-view-component-required',\n  DOCUMENT_ID_REQUIRED = 'structure-document-id-required',\n  DOCUMENT_TYPE_REQUIRED = 'structure-document-type-required',\n  SCHEMA_TYPE_REQUIRED = 'structure-schema-type-required',\n  SCHEMA_TYPE_NOT_FOUND = 'structure-schema-type-not-found',\n  LIST_ITEMS_MUST_BE_ARRAY = 'structure-list-items-must-be-array',\n  QUERY_PROVIDED_FOR_FILTER = 'structure-query-provided-for-filter',\n  ACTION_OR_INTENT_REQUIRED = 'structure-action-or-intent-required',\n  LIST_ITEM_IDS_MUST_BE_UNIQUE = 'structure-list-item-ids-must-be-unique',\n  ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE = 'structure-action-and-intent-mutually-exclusive',\n  API_VERSION_REQUIRED_FOR_CUSTOM_FILTER = 'structure-api-version-required-for-custom-filter',\n}\n","import {type SortOrdering} from '@sanity/types'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport const ORDER_BY_UPDATED_AT: SortOrdering = {\n  title: 'Last edited',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.last-edited',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastEditedDesc',\n  by: [{field: '_updatedAt', direction: 'desc'}],\n}\n\nexport const ORDER_BY_CREATED_AT: SortOrdering = {\n  title: 'Created',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.created',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastCreatedDesc',\n  by: [{field: '_createdAt', direction: 'desc'}],\n}\n\nexport const DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT\n\nexport const DEFAULT_ORDERING_OPTIONS: SortOrdering[] = [\n  ORDER_BY_UPDATED_AT, // _updatedAt\n  ORDER_BY_CREATED_AT, // _createdAt\n]\n","import {SortIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrdering, type SortOrderingItem} from '@sanity/types'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type Intent} from './Intent'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {DEFAULT_ORDERING_OPTIONS} from './Sort'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getExtendedProjection} from './util/getExtendedProjection'\n\n/** @internal */\nexport function maybeSerializeMenuItem(\n  item: MenuItem | MenuItemBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItem {\n  return item instanceof MenuItemBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Menu item action type\n * @public */\nexport type MenuItemActionType =\n  | string\n  | ((params: Record<string, string> | undefined, scope?: any) => void)\n\n/**\n * Menu items parameters\n *\n * @public */\nexport type MenuItemParamsType = Record<string, string | unknown | undefined>\n\n/**\n * Interface for menu items\n *\n * @public */\nexport interface MenuItem {\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /**\n   * Menu Item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here as a fallback if no i18n key is\n   * provided and compatibility with older plugins\n   */\n  title: string\n  /** Menu Item action */\n  action?: MenuItemActionType\n  /** Menu Item intent */\n  intent?: Intent\n  /** Menu Item group */\n  group?: string\n  // TODO: align these with TemplateItem['icon']\n  /** Menu Item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** Menu Item parameters. See {@link MenuItemParamsType} */\n  params?: MenuItemParamsType\n  /** Determine if it will show the MenuItem as action */\n  showAsAction?: boolean\n}\n\n/**\n * Partial menu items\n * @public\n */\nexport type PartialMenuItem = Partial<MenuItem>\n\n/**\n * Class for building menu items.\n *\n * @public */\nexport class MenuItemBuilder implements Serializable<MenuItem> {\n  /** menu item option object. See {@link PartialMenuItem} */\n  protected spec: PartialMenuItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItem,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set menu item action\n   * @param action - menu item action. See {@link MenuItemActionType}\n   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}\n   */\n  action(action: MenuItemActionType): MenuItemBuilder {\n    return this.clone({action})\n  }\n\n  /**\n   * Get menu item action\n   * @returns menu item builder action. See {@link PartialMenuItem}\n   */\n  getAction(): PartialMenuItem['action'] {\n    return this.spec.action\n  }\n\n  /**\n   * Set menu item intent\n   * @param intent - menu item intent. See {@link Intent}\n   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}\n   */\n  intent(intent: Intent): MenuItemBuilder {\n    return this.clone({intent})\n  }\n\n  /**\n   * Get menu item intent\n   * @returns menu item intent. See {@link PartialMenuItem}\n   */\n  getIntent(): PartialMenuItem['intent'] {\n    return this.spec.intent\n  }\n\n  /**\n   * Set menu item title\n   * @param title - menu item title\n   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}\n   */\n  title(title: string): MenuItemBuilder {\n    return this.clone({title})\n  }\n\n  /**\n   * Get menu item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here for compatibility.\n   * @returns menu item title\n   */\n  getTitle(): string | undefined {\n    return this.spec.title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item builder based on i18n config provided. See {@link MenuItemBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set menu item group\n   * @param group - menu item group\n   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}\n   */\n  group(group: string): MenuItemBuilder {\n    return this.clone({group})\n  }\n\n  /**\n   * Get menu item group\n   * @returns menu item group. See {@link PartialMenuItem}\n   */\n  getGroup(): PartialMenuItem['group'] {\n    return this.spec.group\n  }\n\n  /**\n   * Set menu item icon\n   * @param icon - menu item icon\n   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): MenuItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Get menu item icon\n   * @returns menu item icon. See {@link PartialMenuItem}\n   */\n  getIcon(): PartialMenuItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set menu item parameters\n   * @param params - menu item parameters. See {@link MenuItemParamsType}\n   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}\n   */\n  params(params: MenuItemParamsType): MenuItemBuilder {\n    return this.clone({params})\n  }\n\n  /**\n   * Get meny item parameters\n   * @returns menu item parameters. See {@link PartialMenuItem}\n   */\n  getParams(): PartialMenuItem['params'] {\n    return this.spec.params\n  }\n\n  /**\n   * Set menu item to show as action\n   * @param showAsAction - determine if menu item should show as action\n   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}\n   */\n  showAsAction(showAsAction = true): MenuItemBuilder {\n    return this.clone({showAsAction: Boolean(showAsAction)})\n  }\n\n  /**\n   * Check if menu item should show as action\n   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}\n   */\n  getShowAsAction(): PartialMenuItem['showAsAction'] {\n    return this.spec.showAsAction\n  }\n\n  /** Serialize menu item builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns menu item node based on path provided in options. See {@link MenuItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItem {\n    const {title, action, intent} = this.spec\n    if (!title) {\n      const hint = typeof action === 'string' ? `action: \"${action}\"` : undefined\n      throw new SerializeError(\n        '`title` is required for menu item',\n        options.path,\n        options.index,\n        hint,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    if (!action && !intent) {\n      throw new SerializeError(\n        `\\`action\\` or \\`intent\\` required for menu item with title ${this.spec.title}`,\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_OR_INTENT_REQUIRED)\n    }\n\n    if (intent && action) {\n      throw new SerializeError(\n        'cannot set both `action` AND `intent`',\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE)\n    }\n\n    return {...this.spec, title}\n  }\n\n  /** Clone menu item builder\n   * @param withSpec - menu item options. See {@link PartialMenuItem}\n   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}\n   */\n  clone(withSpec?: PartialMenuItem): MenuItemBuilder {\n    const builder = new MenuItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport interface SortMenuItem extends MenuItem {\n  params: {\n    by: SortOrderingItem[]\n  }\n}\n\n/** @internal */\nexport function getOrderingMenuItem(\n  context: StructureContext,\n  {by, title, i18n}: SortOrdering,\n  extendedProjection?: string,\n): MenuItemBuilder {\n  let builder = new MenuItemBuilder(context)\n    .group('sorting')\n    .title(\n      context.i18n.t('default-menu-item.fallback-title', {\n        // note this lives in the `studio` bundle because that one is loaded by default\n        ns: 'studio',\n        replace: {title}, // replaces the `{{title}}` option\n      }),\n    ) // fallback title\n    .icon(SortIcon)\n    .action('setSortOrder')\n    .params({by, extendedProjection})\n\n  if (i18n) {\n    builder = builder.i18n(i18n)\n  }\n\n  return builder\n}\n\n/** @internal */\nexport function getOrderingMenuItemsForSchemaType(\n  context: StructureContext,\n  typeName: SchemaType | string,\n): MenuItemBuilder[] {\n  const {schema} = context\n  const type = typeof typeName === 'string' ? schema.get(typeName) : typeName\n  if (!type || !('orderings' in type)) {\n    return []\n  }\n\n  return (\n    type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS\n  ).map((ordering: SortOrdering) =>\n    getOrderingMenuItem(context, ordering, getExtendedProjection(type, ordering.by)),\n  )\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/** @internal */\nexport function maybeSerializeMenuItemGroup(\n  item: MenuItemGroup | MenuItemGroupBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItemGroup {\n  return item instanceof MenuItemGroupBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Interface for menu item groups\n * @public\n */\nexport interface MenuItemGroup {\n  /** Menu group Id */\n  id: string\n  /** Menu group title */\n  title: string\n  i18n?: I18nTextRecord<'title'>\n}\n\n/**\n * Class for building menu item groups.\n *\n * @public\n */\nexport class MenuItemGroupBuilder implements Serializable<MenuItemGroup> {\n  /** Menu item group ID */\n  protected _id: string\n  /** Menu item group title */\n  protected _title: string\n\n  protected _i18n?: I18nTextRecord<'title'>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItemGroup,\n  ) {\n    this._id = spec ? spec.id : ''\n    this._title = spec ? spec.title : ''\n    this._i18n = spec ? spec.i18n : undefined\n  }\n\n  /**\n   * Set menu item group ID\n   * @param id - menu item group ID\n   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}\n   */\n  id(id: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {id, title: this._title, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group ID\n   * @returns menu item group ID\n   */\n  getId(): string {\n    return this._id\n  }\n\n  /**\n   * Set menu item group title\n   * @param title - menu item group title\n   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}\n   */\n  title(title: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {title, id: this._id, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group title\n   * @returns menu item group title\n   */\n  getTitle(): string {\n    return this._title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item group builder based on i18n info provided. See {@link MenuItemGroupBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {i18n, id: this._id, title: this._title})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this._i18n\n  }\n\n  /**\n   * Serialize menu item group builder\n   * @param options - serialization options (path). See {@link SerializeOptions}\n   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItemGroup {\n    const {_id, _title, _i18n} = this\n    if (!_id) {\n      throw new SerializeError(\n        '`id` is required for a menu item group',\n        options.path,\n        options.index,\n        _title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!_title) {\n      throw new SerializeError(\n        '`title` is required for a menu item group',\n        options.path,\n        _id,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: _id,\n      title: _title,\n      i18n: _i18n,\n    }\n  }\n}\n","import {SerializeError} from '../SerializeError'\nimport {type SerializePath} from '../StructureNodes'\n\nexport const disallowedPattern = /([^A-Za-z0-9-_.])/\n\nexport function validateId(\n  id: string,\n  parentPath: SerializePath,\n  pathSegment: string | number | undefined,\n): string {\n  if (typeof id !== 'string') {\n    throw new SerializeError(\n      `Structure node id must be of type string, got ${typeof id}`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  const [disallowedChar] = id.match(disallowedPattern) || []\n  if (disallowedChar) {\n    throw new SerializeError(\n      `Structure node id cannot contain character \"${disallowedChar}\"`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  if (id.startsWith('__edit__')) {\n    throw new SerializeError(\n      `Structure node id cannot start with __edit__`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  return id\n}\n","import {camelCase} from 'lodash'\nimport getSlug from 'speakingurl'\n\nimport {disallowedPattern} from './validateId'\n\nexport function getStructureNodeId(title: string, id?: string): string {\n  if (id) {\n    return id\n  }\n\n  const camelCased = camelCase(title)\n\n  return disallowedPattern.test(camelCased) ? camelCase(getSlug(title)) : camelCased\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {type IntentChecker} from './Intent'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {type UserComponent} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Interface for component\n *\n * @public\n */\n// TODO: rename to `StructureComponent` since it clashes with React?\nexport interface Component extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component menu items, array of type {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** Component menu item group, array of type {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n  /** Component options */\n  options: {[key: string]: unknown}\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Interface for component input\n *\n * @public\n */\nexport interface ComponentInput extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for buildable component\n *\n * @public\n */\nexport interface BuildableComponent extends Partial<StructureNode> {\n  /** Component of type {@link UserComponent} */\n  component?: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Class for building components\n *\n * @public\n */\nexport class ComponentBuilder implements Serializable<Component> {\n  /** component builder option object */\n  protected spec: BuildableComponent\n\n  constructor(spec?: ComponentInput) {\n    this.spec = {options: {}, ...(spec ? spec : {})}\n  }\n\n  /** Set Component ID\n   * @param id - component ID\n   * @returns component builder based on ID provided\n   */\n  id(id: string): ComponentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get ID\n   * @returns ID\n   */\n  getId(): BuildableComponent['id'] {\n    return this.spec.id\n  }\n\n  /** Set Component title\n   * @param title - component title\n   * @returns component builder based on title provided (and ID)\n   */\n  title(title: string): ComponentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Component title\n   * @returns title\n   */\n  getTitle(): BuildableComponent['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ComponentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Component child\n   * @param child - child component\n   * @returns component builder based on child component provided\n   */\n  child(child: Child): ComponentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Component child\n   * @returns child component\n   */\n  getChild(): BuildableComponent['child'] {\n    return this.spec.child\n  }\n\n  /** Set component\n   * @param component - user built component\n   * @returns component builder based on component provided\n   */\n  component(component: UserComponent): ComponentBuilder {\n    return this.clone({component})\n  }\n\n  /** Get Component\n   * @returns component\n   */\n  getComponent(): BuildableComponent['component'] {\n    return this.spec.component\n  }\n\n  /** Set Component options\n   * @param options - component options\n   * @returns component builder based on options provided\n   */\n  options(options: {[key: string]: unknown}): ComponentBuilder {\n    return this.clone({options})\n  }\n\n  /** Get Component options\n   * @returns component options\n   */\n  getOptions(): NonNullable<BuildableComponent['options']> {\n    return this.spec.options || {}\n  }\n\n  /** Set Component menu items\n   * @param menuItems - component menu items\n   * @returns component builder based on menuItems provided\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[]): ComponentBuilder {\n    return this.clone({menuItems})\n  }\n\n  /** Get Component menu items\n   * @returns menu items\n   */\n  getMenuItems(): BuildableComponent['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set Component menu item groups\n   * @param menuItemGroups - component menu item groups\n   * @returns component builder based on menuItemGroups provided\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ComponentBuilder {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get Component menu item groups\n   * @returns menu item groups\n   */\n  getMenuItemGroups(): BuildableComponent['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  canHandleIntent(canHandleIntent: IntentChecker): ComponentBuilder {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Serialize component\n   * @param options - serialization options\n   * @returns component object based on path provided in options\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): Component {\n    const {id, title, child, options: componentOptions, component} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!component) {\n      throw new SerializeError(\n        '`component` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      type: 'component',\n      child,\n      component,\n      canHandleIntent: this.spec.canHandleIntent,\n      options: componentOptions || {},\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, options.path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, options.path),\n      ),\n    }\n  }\n\n  /** Clone component builder (allows for options overriding)\n   * @param withSpec - component builder options\n   * @returns cloned builder\n   */\n  clone(withSpec?: BuildableComponent): ComponentBuilder {\n    const builder = new ComponentBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SanityClient} from '@sanity/client'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, getPublishedId, type SourceClientOptions} from 'sanity'\n\nexport async function resolveTypeForDocument(\n  getClient: (options: SourceClientOptions) => SanityClient,\n  id: string,\n): Promise<string | undefined> {\n  const query = '*[sanity::versionOf($publishedId)][0]._type'\n\n  const type = await getClient(DEFAULT_STUDIO_CLIENT_OPTIONS).fetch(\n    query,\n    {publishedId: getPublishedId(id)},\n    {tag: 'structure.resolve-type'},\n  )\n\n  return type\n}\n","import {kebabCase} from 'lodash'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from '../StructureNodes'\nimport {type View} from '../types'\nimport {validateId} from '../util/validateId'\nimport {type ComponentViewBuilder} from './ComponentView'\nimport {type FormViewBuilder} from './FormView'\n\n/**\n * Interface for base view\n *\n * @public */\nexport interface BaseView {\n  /** View id */\n  id: string\n  /** View Title */\n  title: string\n  /** View Icon */\n  icon?: React.ComponentType | React.ReactNode\n}\n\n/**\n * Class for building generic views.\n *\n * @public\n */\nexport abstract class GenericViewBuilder<TView extends Partial<BaseView>, ConcreteImpl>\n  implements Serializable<BaseView>\n{\n  /** Generic view option object */\n  protected spec: TView = {} as TView\n\n  /** Set generic view ID\n   * @param id - generic view ID\n   * @returns generic view builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n  /** Get generic view ID\n   * @returns generic view ID\n   */\n  getId(): TView['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic view title\n   * @param title - generic view title\n   * @returns generic view builder based on title provided and (if provided) its ID.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: this.spec.id || kebabCase(title)})\n  }\n\n  /** Get generic view title\n   * @returns generic view title\n   */\n  getTitle(): TView['title'] {\n    return this.spec.title\n  }\n\n  /** Set generic view icon\n   * @param icon - generic view icon\n   * @returns generic view builder based on icon provided.\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ConcreteImpl {\n    return this.clone({icon})\n  }\n\n  /** Get generic view icon\n   * @returns generic view icon\n   */\n  getIcon(): TView['icon'] {\n    return this.spec.icon\n  }\n\n  /** Serialize generic view\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic view object based on path provided in options. See {@link BaseView}\n   */\n  serialize(options: SerializeOptions = {path: []}): BaseView {\n    const {id, title, icon} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!title) {\n      throw new SerializeError(\n        '`title` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      icon,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - Partial generic view builder options. See {@link BaseView}\n   * @returns Generic view builder.\n   */\n  abstract clone(withSpec?: Partial<BaseView>): ConcreteImpl\n}\n\nfunction isSerializable(view: BaseView | Serializable<BaseView>): view is Serializable<BaseView> {\n  return typeof (view as Serializable<BaseView>).serialize === 'function'\n}\n\n/** @internal */\nexport function maybeSerializeView(\n  item: View | Serializable<View>,\n  index: number,\n  path: SerializePath,\n): View {\n  return isSerializable(item) ? item.serialize({path, index}) : item\n}\n\n/**\n * View builder. See {@link ComponentViewBuilder} and {@link FormViewBuilder}\n *\n * @public\n */\nexport type ViewBuilder = ComponentViewBuilder | FormViewBuilder\n","import {isRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type SerializeOptions} from '../StructureNodes'\nimport {type UserViewComponent} from '../types'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for component views.\n *\n * @public */\nexport interface ComponentView<TOptions = Record<string, any>> extends BaseView {\n  type: 'component'\n  /** Component view components. See {@link UserViewComponent} */\n  component: UserViewComponent\n  /** Component view options */\n  options: TOptions\n}\n\nconst isComponentSpec = (spec: unknown): spec is ComponentView =>\n  isRecord(spec) && spec.type === 'component'\n\n/**\n * Class for building a component view.\n *\n * @public */\nexport class ComponentViewBuilder extends GenericViewBuilder<\n  Partial<ComponentView>,\n  ComponentViewBuilder\n> {\n  /** Partial Component view option object. See {@link ComponentView} */\n  protected spec: Partial<ComponentView>\n\n  constructor(\n    /**\n     * Component view component or spec\n     * @param componentOrSpec - user view component or partial component view. See {@link UserViewComponent} and {@link ComponentView}\n     */\n    componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n  ) {\n    const spec = isComponentSpec(componentOrSpec) ? {...componentOrSpec} : {options: {}}\n\n    super()\n    this.spec = spec\n\n    const userComponent =\n      typeof componentOrSpec === 'function' ? componentOrSpec : this.spec.component\n\n    if (userComponent) {\n      // Because we're cloning, this'll return a new instance, so grab the spec from it\n      this.spec = this.component(userComponent).spec\n    }\n  }\n\n  /** Set view Component\n   * @param component - component view component. See {@link UserViewComponent}\n   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}\n   */\n  component(component: UserViewComponent): ComponentViewBuilder {\n    return this.clone({component})\n  }\n\n  /** Get view Component\n   * @returns Partial component view. See {@link ComponentView}\n   */\n  getComponent(): Partial<ComponentView>['component'] {\n    return this.spec.component\n  }\n\n  /** Set view Component options\n   * @param options - component view options\n   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}\n   */\n  options(options: {[key: string]: any}): ComponentViewBuilder {\n    return this.clone({options})\n  }\n\n  /** Get view Component options\n   * @returns component view options. See {@link ComponentView}\n   */\n  getOptions(): ComponentView['options'] {\n    return this.spec.options || {}\n  }\n\n  /** Serialize view Component\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns component view based on path provided in options. See {@link ComponentView}\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): ComponentView {\n    const base = super.serialize(options)\n\n    const component = this.spec.component\n    if (typeof component !== 'function') {\n      throw new SerializeError(\n        '`component` is required and must be a function for `component()` view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.COMPONENT_REQUIRED)\n    }\n\n    return {\n      ...base,\n      component,\n      options: this.spec.options || {},\n      type: 'component',\n    }\n  }\n\n  /** Clone Component view builder (allows for options overriding)\n   * @param withSpec - partial for component view option. See {@link ComponentView}\n   * @returns component view builder. See {@link ComponentViewBuilder}\n   */\n  clone(withSpec?: Partial<ComponentView>): ComponentViewBuilder {\n    const builder = new ComponentViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SerializeOptions} from '../StructureNodes'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for form views.\n *\n * @public */\nexport interface FormView extends BaseView {\n  type: 'form'\n}\n\n/**\n * Class for building a form view.\n *\n * @public */\nexport class FormViewBuilder extends GenericViewBuilder<Partial<BaseView>, FormViewBuilder> {\n  /** Document list options. See {@link FormView} */\n  protected spec: Partial<FormView>\n\n  constructor(spec?: Partial<FormView>) {\n    super()\n    this.spec = {id: 'editor', title: 'Editor', ...(spec ? spec : {})}\n  }\n\n  /**\n   * Serialize Form view builder\n   * @param options - Serialize options. See {@link SerializeOptions}\n   * @returns form view builder based on path provided in options. See {@link FormView}\n   */\n  serialize(options: SerializeOptions = {path: []}): FormView {\n    return {\n      ...super.serialize(options),\n      type: 'form',\n    }\n  }\n\n  /**\n   * Clone Form view builder (allows for options overriding)\n   * @param withSpec - Partial form view builder options. See {@link FormView}\n   * @returns form view builder. See {@link FormViewBuilder}\n   */\n  clone(withSpec?: Partial<FormView>): FormViewBuilder {\n    const builder = new FormViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type UserViewComponent} from '../types'\nimport {type ComponentView, ComponentViewBuilder} from './ComponentView'\nimport {type FormView, FormViewBuilder} from './FormView'\n\nexport * from './ComponentView'\nexport * from './FormView'\nexport * from './View'\n\n/** @internal */\nexport const form = (spec?: Partial<FormView>): FormViewBuilder => new FormViewBuilder(spec)\n\n/** @internal */\nexport const component = (\n  componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n): ComponentViewBuilder => new ComponentViewBuilder(componentOrSpec)\n","import {type SchemaType} from '@sanity/types'\nimport {uniq} from 'lodash'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver} from './ChildResolver'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type DocumentNode,\n  type EditorNode,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext, type View} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\nimport {validateId} from './util/validateId'\nimport {form} from './views'\nimport {maybeSerializeView, type ViewBuilder} from './views/View'\n\nconst createDocumentChildResolver =\n  ({resolveDocumentNode, getClient}: StructureContext): ChildResolver =>\n  async (itemId, {params, path}) => {\n    let type = params.type\n\n    const parentPath = path.slice(0, path.length - 1)\n    const currentSegment = path[path.length - 1]\n\n    if (!type) {\n      type = await resolveTypeForDocument(getClient, itemId)\n    }\n\n    if (!type) {\n      throw new SerializeError(\n        `Failed to resolve document, and no type provided in parameters.`,\n        parentPath,\n        currentSegment,\n      )\n    }\n\n    return resolveDocumentNode({documentId: itemId, schemaType: type})\n  }\n\n/**\n * Interface for options of Partial Documents. See {@link PartialDocumentNode}\n *\n * @public */\nexport interface DocumentOptions {\n  /** Document Id */\n  id: string\n  /** Document Type */\n  type: string\n  /** Document Template */\n  template?: string\n  /** Template parameters */\n  templateParameters?: Record<string, unknown>\n}\n\n/**\n * Interface for partial document (focused on the document pane)\n *\n * @public */\nexport interface PartialDocumentNode {\n  /** Document Id */\n  id?: string\n  /** Document title */\n  title?: string\n  /** I18n key and namespace used to populate the localized title */\n  i18n?: I18nTextRecord<'title'>\n  /** Document children of type {@link Child} */\n  child?: Child\n  /**\n   * Views for the document pane. See {@link ViewBuilder} and {@link View}\n   */\n  views?: (View | ViewBuilder)[]\n  /**\n   * Document options. See {@link DocumentOptions}\n   */\n  options?: Partial<DocumentOptions>\n}\n\n/**\n * A `DocumentBuilder` is used to build a document node.\n *\n * @public */\nexport class DocumentBuilder implements Serializable<DocumentNode> {\n  /** Component builder option object See {@link PartialDocumentNode} */\n  protected spec: PartialDocumentNode\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: PartialDocumentNode,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set Document Builder ID\n   * @param id - document builder ID\n   * @returns document builder based on ID provided. See {@link DocumentBuilder}\n   */\n  id(id: string): DocumentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get Document Builder ID\n   * @returns document ID. See {@link PartialDocumentNode}\n   */\n  getId(): PartialDocumentNode['id'] {\n    return this.spec.id\n  }\n\n  /** Set Document title\n   * @param title - document title\n   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}\n   */\n  title(title: string): DocumentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Document title\n   * @returns document title. See {@link PartialDocumentNode}\n   */\n  getTitle(): PartialDocumentNode['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): DocumentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Document child\n   * @param child - document child\n   * @returns document builder based on child provided. See {@link DocumentBuilder}\n   */\n  child(child: Child): DocumentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Document child\n   * @returns document child. See {@link PartialDocumentNode}\n   */\n  getChild(): PartialDocumentNode['child'] {\n    return this.spec.child\n  }\n\n  /** Set Document ID\n   * @param documentId - document ID\n   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}\n   */\n  documentId(documentId: string): DocumentBuilder {\n    // Let's try to be a bit helpful and assign an ID from document ID if none is specified\n    const paneId = this.spec.id || documentId\n    return this.clone({\n      id: paneId,\n      options: {\n        ...(this.spec.options || {}),\n        id: documentId,\n      },\n    })\n  }\n\n  /** Get Document ID\n   * @returns document ID. See {@link DocumentOptions}\n   */\n  getDocumentId(): Partial<DocumentOptions>['id'] {\n    return this.spec.options?.id\n  }\n\n  /** Set Document Type\n   * @param documentType - document type\n   * @returns document builder with document based on type provided. See {@link DocumentBuilder}\n   */\n  schemaType(documentType: SchemaType | string): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        type: typeof documentType === 'string' ? documentType : documentType.name,\n      },\n    })\n  }\n\n  /** Get Document Type\n   * @returns document type. See {@link DocumentOptions}\n   */\n  getSchemaType(): Partial<DocumentOptions>['type'] {\n    return this.spec.options?.type\n  }\n\n  /** Set Document Template\n   * @param templateId - document template ID\n   * @param parameters - document template parameters\n   * @returns document builder with document based on template provided. See {@link DocumentBuilder}\n   */\n  initialValueTemplate(templateId: string, parameters?: Record<string, unknown>): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        template: templateId,\n        templateParameters: parameters,\n      },\n    })\n  }\n\n  /** Get Document Template\n   * @returns document template. See {@link DocumentOptions}\n   */\n  getInitialValueTemplate(): Partial<DocumentOptions>['template'] {\n    return this.spec.options?.template\n  }\n\n  /** Get Document's initial value Template parameters\n   * @returns document template parameters. See {@link DocumentOptions}\n   */\n  getInitialValueTemplateParameters(): Partial<DocumentOptions>['templateParameters'] {\n    return this.spec.options?.templateParameters\n  }\n\n  /** Set Document views\n   * @param views - document views. See {@link ViewBuilder} and {@link View}\n   * @returns document builder with document based on views provided. See {@link DocumentBuilder}\n   */\n  views(views: (View | ViewBuilder)[]): DocumentBuilder {\n    return this.clone({views})\n  }\n\n  /** Get Document views\n   * @returns document views. See {@link ViewBuilder} and {@link View}\n   */\n  getViews(): (View | ViewBuilder)[] {\n    return this.spec.views || []\n  }\n\n  /** Serialize Document builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): DocumentNode {\n    const urlId = path[index || path.length - 1]\n\n    // Try to grab document ID / editor ID from URL if not defined\n    const id = this.spec.id || (urlId && `${urlId}`) || ''\n    const options: Partial<DocumentOptions> = {\n      id,\n      type: undefined,\n      template: undefined,\n      templateParameters: undefined,\n      ...this.spec.options,\n    }\n\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for document nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options || !options.id) {\n      throw new SerializeError(\n        'document id (`id`) is required for document nodes',\n        path,\n        id,\n        hint,\n      ).withHelpUrl(HELP_URL.DOCUMENT_ID_REQUIRED)\n    }\n\n    if (!options || !options.type) {\n      throw new SerializeError(\n        'document type (`schemaType`) is required for document nodes',\n        path,\n        id,\n        hint,\n      )\n    }\n\n    const views = (this.spec.views && this.spec.views.length > 0 ? this.spec.views : [form()]).map(\n      (item, i) => maybeSerializeView(item, i, path),\n    )\n\n    const viewIds = views.map((view) => view.id)\n    const dupes = uniq(viewIds.filter((viewId, i) => viewIds.includes(viewId, i + 1)))\n    if (dupes.length > 0) {\n      throw new SerializeError(\n        `document node has views with duplicate IDs: ${dupes.join(',  ')}`,\n        path,\n        id,\n        hint,\n      )\n    }\n\n    return {\n      ...this.spec,\n      child: this.spec.child || createDocumentChildResolver(this._context),\n      id: validateId(id, path, index),\n      type: 'document',\n      options: getDocumentOptions(options),\n      views,\n    }\n  }\n\n  /** Clone Document builder\n   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}\n   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}\n   */\n  clone(withSpec: PartialDocumentNode = {}): DocumentBuilder {\n    const builder = new DocumentBuilder(this._context)\n    const options = {...(this.spec.options || {}), ...(withSpec.options || {})}\n    builder.spec = {...this.spec, ...withSpec, options}\n    return builder\n  }\n}\n\nfunction getDocumentOptions(spec: Partial<DocumentOptions>): DocumentOptions {\n  const opts: DocumentOptions = {\n    id: spec.id || '',\n    type: spec.type || '*',\n  }\n\n  if (spec.template) {\n    opts.template = spec.template\n  }\n\n  if (spec.templateParameters) {\n    opts.templateParameters = spec.templateParameters\n  }\n\n  return opts\n}\n\n/** @internal */\nexport function documentFromEditor(context: StructureContext, spec?: EditorNode): DocumentBuilder {\n  let doc = spec?.type\n    ? // Use user-defined document fragment as base if possible\n      context.resolveDocumentNode({schemaType: spec.type})\n    : // Fall back to plain old document builder\n      new DocumentBuilder(context)\n\n  if (!spec) return doc\n\n  const {id, type, template, templateParameters} = spec.options\n  doc = doc.id(spec.id).documentId(id)\n\n  if (type) {\n    doc = doc.schemaType(type)\n  }\n  if (template) {\n    doc = doc.initialValueTemplate(template, templateParameters)\n  }\n  if (spec.child) {\n    doc = doc.child(spec.child)\n  }\n\n  return doc\n}\n\n/** @internal */\nexport function documentFromEditorWithInitialValue(\n  {resolveDocumentNode, templates}: StructureContext,\n  templateId: string,\n  parameters?: Record<string, unknown>,\n): DocumentBuilder {\n  const template = templates.find((t) => t.id === templateId)\n\n  if (!template) {\n    throw new Error(`Template with ID \"${templateId}\" not defined`)\n  }\n\n  return resolveDocumentNode({schemaType: template.schemaType}).initialValueTemplate(\n    templateId,\n    parameters,\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type InitialValueTemplateItem} from 'sanity'\n\nimport {type BaseIntentParams, type IntentParams} from './Intent'\nimport {type MenuItem, MenuItemBuilder} from './MenuItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * A `InitialValueTemplateItemBuilder` is used to build a document node with an initial value set.\n *\n * @public\n */\nexport class InitialValueTemplateItemBuilder implements Serializable<InitialValueTemplateItem> {\n  /** Initial Value template item option object. See {@link InitialValueTemplateItem} */\n  protected spec: Partial<InitialValueTemplateItem>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: Partial<InitialValueTemplateItem>,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set initial value template item builder ID\n   * @param id - initial value template item ID\n   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  id(id: string): InitialValueTemplateItemBuilder {\n    return this.clone({id})\n  }\n\n  /** Get initial value template item builder ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getId(): Partial<InitialValueTemplateItem>['id'] {\n    return this.spec.id\n  }\n\n  /** Set initial value template item title\n   * @param title - initial value template item title\n   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  title(title: string): InitialValueTemplateItemBuilder {\n    return this.clone({title})\n  }\n\n  /** Get initial value template item title\n   * @returns initial value template item title. See {@link InitialValueTemplateItem}\n   */\n  getTitle(): Partial<InitialValueTemplateItem>['title'] {\n    return this.spec.title\n  }\n\n  /** Set initial value template item description\n   * @param description - initial value template item description\n   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  description(description: string): InitialValueTemplateItemBuilder {\n    return this.clone({description})\n  }\n\n  /** Get initial value template item description\n   * @returns initial value template item description. See {@link InitialValueTemplateItem}\n   */\n  getDescription(): Partial<InitialValueTemplateItem>['description'] {\n    return this.spec.description\n  }\n\n  /** Set initial value template ID\n   * @param templateId - initial value template item template ID\n   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  templateId(templateId: string): InitialValueTemplateItemBuilder {\n    // Let's try to be a bit helpful and assign an ID from template ID if none is specified\n    const paneId = this.spec.id || templateId\n    return this.clone({\n      id: paneId,\n      templateId,\n    })\n  }\n\n  /** Get initial value template item template ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getTemplateId(): Partial<InitialValueTemplateItem>['templateId'] {\n    return this.spec.templateId\n  }\n\n  /** Get initial value template item template parameters\n   * @param parameters - initial value template item parameters\n   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  parameters(parameters: {[key: string]: any}): InitialValueTemplateItemBuilder {\n    return this.clone({parameters})\n  }\n\n  /** Get initial value template item template parameters\n   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}\n   */\n  getParameters(): Partial<InitialValueTemplateItem>['parameters'] {\n    return this.spec.parameters\n  }\n\n  /** Serialize initial value template item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): InitialValueTemplateItem {\n    const {spec, _context} = this\n    const {templates} = _context\n\n    if (typeof spec.id !== 'string' || !spec.id) {\n      throw new SerializeError(\n        '`id` is required for initial value template item nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!spec.templateId) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const template = templates.find((t) => t.id === spec.templateId)\n\n    if (!template) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: spec.id,\n      templateId: spec.id,\n      schemaType: template.schemaType,\n      type: 'initialValueTemplateItem',\n      description: spec.description || template.description,\n      title: spec.title || template.title,\n      subtitle: spec.subtitle,\n      icon: spec.icon || template.icon,\n      initialDocumentId: spec.initialDocumentId,\n      parameters: spec.parameters,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}\n   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  clone(withSpec: Partial<InitialValueTemplateItem> = {}): InitialValueTemplateItemBuilder {\n    const builder = new InitialValueTemplateItemBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n\n/** @internal */\nexport function defaultInitialValueTemplateItems(\n  context: StructureContext,\n): InitialValueTemplateItemBuilder[] {\n  const {schema, getStructureBuilder, templates} = context\n\n  // Sort templates by their schema type, in order or definition\n  const typeNames = schema.getTypeNames()\n  const ordered = templates\n    // Don't list templates that require parameters\n    // TODO: this should use the new-document template items instead maybe?\n    .filter((tpl) => !tpl.parameters?.length)\n    .sort((a, b) => typeNames.indexOf(a.schemaType) - typeNames.indexOf(b.schemaType))\n\n  // Create actual template items out of the templates\n  return ordered.map((tpl) => getStructureBuilder().initialValueTemplateItem(tpl.id))\n}\n\n/** @internal */\nexport function maybeSerializeInitialValueTemplateItem(\n  item: InitialValueTemplateItem | InitialValueTemplateItemBuilder,\n  index: number,\n  path: SerializePath,\n): InitialValueTemplateItem {\n  return item instanceof InitialValueTemplateItemBuilder ? item.serialize({path, index}) : item\n}\n\n/** @internal */\nexport function menuItemsFromInitialValueTemplateItems(\n  context: StructureContext,\n  templateItems: InitialValueTemplateItem[],\n): MenuItem[] {\n  const {schema, templates} = context\n  return templateItems.map((item) => {\n    const template = templates.find((t) => t.id === item.templateId)\n    const title = item.title || template?.title || 'Create'\n\n    const params: BaseIntentParams = {}\n    if (template && template.schemaType) {\n      params.type = template.schemaType\n    }\n\n    if (item.templateId) {\n      params.template = item.templateId\n    }\n\n    const intentParams: IntentParams = item.parameters ? [params, item.parameters] : params\n    const schemaType = template && schema.get(template.schemaType)\n\n    const i18n = item.i18n || template?.i18n\n\n    let builder = new MenuItemBuilder(context)\n      .title(title)\n      .icon((template && template.icon) || schemaType?.icon || AddIcon)\n      .intent({type: 'create', params: intentParams})\n\n    if (i18n) {\n      builder = builder.i18n(i18n)\n    }\n\n    return builder.serialize()\n  })\n}\n","import {type SearchParam} from 'sanity/router'\n\nimport {getTypeNamesFromFilter, type PartialDocumentList} from './DocumentList'\nimport {type StructureNode} from './StructureNodes'\n\n/**\n * Intent parameters (json)\n *\n * @public\n */\nexport type IntentJsonParams = {[key: string]: any}\n\n/**\n * Base intent parameters\n *\n * @public\n * @todo dedupe with core\n */\nexport interface BaseIntentParams {\n  /**\n   * Document schema type name to create/edit.\n   * Required for `create` intents, optional for `edit` (but encouraged, safer and faster)\n   */\n  type?: string\n\n  /**\n   * ID of the document to create/edit.\n   * Required for `edit` intents, optional for `create`.\n   */\n  id?: string\n\n  /**\n   * Name (ID) of initial value template to use for `create` intent. Optional.\n   */\n  template?: string\n\n  /**\n   * Experimental field path\n   *\n   * @beta\n   * @experimental\n   * @hidden\n   */\n  path?: string\n\n  /**\n   * Optional \"mode\" to use for edit intent.\n   * Known modes are `structure` and `presentation`.\n   */\n  mode?: string\n\n  /**\n   * Arbitrary/custom parameters are generally discouraged - try to keep them to a minimum,\n   * or use `payload` (arbitrary JSON-serializable object) instead.\n   */\n  [key: string]: string | undefined\n}\n\n/** @internal */\nexport const DEFAULT_INTENT_HANDLER = Symbol('Document type list canHandleIntent')\n\n/**\n * Intent parameters\n * See {@link structure.BaseIntentParams} and {@link structure.IntentJsonParams}\n *\n * @public\n */\nexport type IntentParams = BaseIntentParams | [BaseIntentParams, IntentJsonParams]\n\n/**\n * Interface for intents\n * @public */\n// TODO: intents should be unified somewhere\nexport interface Intent {\n  /** Intent type */\n  type: string\n  /** Intent parameters. See {@link IntentParams}\n   */\n  params?: IntentParams\n\n  searchParams?: SearchParam[]\n}\n\n/**\n * Interface for intent checker\n *\n * @public\n */\nexport interface IntentChecker {\n  (\n    /** Intent name */\n    intentName: string,\n    /** Intent checker parameter */\n    params: {[key: string]: any},\n    /** Structure context. See {@link StructureNode} */\n    context: {pane: StructureNode; index: number},\n  ): boolean\n  /** intent checker identify */\n  identity?: symbol\n}\n\n/** @internal */\nexport const defaultIntentChecker: IntentChecker = (intentName, params, {pane}): boolean => {\n  const isEdit = intentName === 'edit'\n  const isCreate = intentName === 'create'\n  const typedSpec = pane as PartialDocumentList\n  const paneFilter = typedSpec.options?.filter || ''\n  const paneParams = typedSpec.options?.params || {}\n  const typeNames = typedSpec.schemaTypeName\n    ? [typedSpec.schemaTypeName]\n    : getTypeNamesFromFilter(paneFilter, paneParams)\n\n  const initialValueTemplates = typedSpec.initialValueTemplates || []\n\n  if (isCreate && params.template) {\n    return initialValueTemplates.some((tpl) => tpl.templateId === params.template)\n  }\n\n  return (\n    (isEdit && params.id && typeNames.includes(params.type)) ||\n    (isCreate && typeNames.includes(params.type))\n  )\n}\n\ndefaultIntentChecker.identity = DEFAULT_INTENT_HANDLER\n","export const layoutOptions = ['default', 'card', 'media', 'detail', 'block']\n","import {type I18nTextRecord, type InitialValueTemplateItem, type PreviewLayoutKey} from 'sanity'\n\nimport {\n  type InitialValueTemplateItemBuilder,\n  maybeSerializeInitialValueTemplateItem,\n} from './InitialValueTemplateItem'\nimport {defaultIntentChecker, type IntentChecker} from './Intent'\nimport {layoutOptions} from './Layout'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\nfunction noChildResolver() {\n  return undefined\n}\n\n/** @internal */\nexport const shallowIntentChecker: IntentChecker = (intentName, params, {pane, index}): boolean => {\n  return index <= 1 && defaultIntentChecker(intentName, params, {pane, index})\n}\n\n/**\n * Interface for list display options\n *\n * @public */\nexport interface ListDisplayOptions {\n  /** Check if list display should show icons */\n  showIcons?: boolean\n}\n\n/**\n * Interface for base generic list\n *\n * @public\n */\nexport interface BaseGenericList extends StructureNode {\n  /** List layout key. */\n  defaultLayout?: PreviewLayoutKey\n  /** Can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** List display options. See {@link ListDisplayOptions} */\n  displayOptions?: ListDisplayOptions\n  /** List child. See {@link Child} */\n  child: Child\n  /** List initial values array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n}\n\n/**\n * Interface for generic list\n *\n * @public\n */\n// \"POJO\"/verbatim-version - end result\nexport interface GenericList extends BaseGenericList {\n  /** List type */\n  type: string\n  /** List menu items array. See {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** List menu item groups array. See {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n}\n\n/**\n * Interface for buildable generic list\n *\n * @public\n */\n// Used internally in builder classes to make everything optional\nexport interface BuildableGenericList extends Partial<BaseGenericList> {\n  /** List menu items array. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** List menu items groups array. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for generic list input\n * Allows builders and only requires things not inferrable\n *\n * @public */\n// Input version, allows builders and only requires things not inferrable\nexport interface GenericListInput extends StructureNode {\n  /** Input id */\n  id: string\n  /** Input title */\n  title: string\n  /** Input menu items groups. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Input menu items groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  /** Input initial value array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n  /** Input default layout. */\n  defaultLayout?: PreviewLayoutKey\n  /** If input can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** Input child of type {@link Child} */\n  child?: Child\n}\n\n/**\n * Class for building generic lists\n *\n * @public\n */\nexport abstract class GenericListBuilder<TList extends BuildableGenericList, ConcreteImpl>\n  implements Serializable<GenericList>\n{\n  /** Check if initial value templates are set */\n  protected initialValueTemplatesSpecified = false\n  /** Generic list option object */\n  protected spec: TList = {} as TList\n\n  /** Set generic list ID\n   * @param id - generic list ID\n   * @returns generic list builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n\n  /** Get generic list ID\n   * @returns generic list ID\n   */\n  getId(): TList['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic list title\n   * @param title - generic list title\n   * @returns generic list builder based on title and ID provided.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get generic list title\n   * @returns generic list title\n   */\n  getTitle(): TList['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ConcreteImpl {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): TList['i18n'] {\n    return this.spec.i18n\n  }\n\n  /** Set generic list layout\n   * @param defaultLayout - generic list layout key.\n   * @returns generic list builder based on layout provided.\n   */\n  defaultLayout(defaultLayout: PreviewLayoutKey): ConcreteImpl {\n    return this.clone({defaultLayout})\n  }\n\n  /** Get generic list layout\n   * @returns generic list layout\n   */\n  getDefaultLayout(): TList['defaultLayout'] {\n    return this.spec.defaultLayout\n  }\n\n  /** Set generic list menu items\n   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}\n   * @returns generic list builder based on menu items provided.\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[] | undefined): ConcreteImpl {\n    return this.clone({menuItems})\n  }\n\n  /** Get generic list menu items\n   * @returns generic list menu items\n   */\n  getMenuItems(): TList['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set generic list menu item groups\n   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}\n   * @returns generic list builder based on menu item groups provided.\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ConcreteImpl {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get generic list menu item groups\n   * @returns generic list menu item groups\n   */\n  getMenuItemGroups(): TList['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  /** Set generic list child\n   * @param child - generic list child. See {@link Child}\n   * @returns generic list builder based on child provided (clone).\n   */\n  child(child: Child): ConcreteImpl {\n    return this.clone({child})\n  }\n\n  /** Get generic list child\n   * @returns generic list child\n   */\n  getChild(): TList['child'] {\n    return this.spec.child\n  }\n\n  /** Set generic list can handle intent\n   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}\n   * @returns generic list builder based on can handle intent provided.\n   */\n  canHandleIntent(canHandleIntent?: IntentChecker): ConcreteImpl {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Get generic list can handle intent\n   * @returns generic list can handle intent\n   */\n  getCanHandleIntent(): TList['canHandleIntent'] {\n    return this.spec.canHandleIntent\n  }\n\n  /** Set generic list display options\n   * @param enabled - allow / disallow for showing icons\n   * @returns generic list builder based on display options (showIcons) provided.\n   */\n  showIcons(enabled = true): ConcreteImpl {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcons: enabled},\n    })\n  }\n\n  /** Get generic list display options\n   * @returns generic list display options (specifically showIcons)\n   */\n  getShowIcons(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcons : undefined\n  }\n\n  /** Set generic list initial value templates\n   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}\n   * @returns generic list builder based on templates provided.\n   */\n  initialValueTemplates(\n    templates:\n      | InitialValueTemplateItem\n      | InitialValueTemplateItemBuilder\n      | Array<InitialValueTemplateItem | InitialValueTemplateItemBuilder>,\n  ): ConcreteImpl {\n    this.initialValueTemplatesSpecified = true\n    return this.clone({initialValueTemplates: Array.isArray(templates) ? templates : [templates]})\n  }\n\n  /** Get generic list initial value templates\n   * @returns generic list initial value templates\n   */\n  getInitialValueTemplates(): TList['initialValueTemplates'] {\n    return this.spec.initialValueTemplates\n  }\n\n  /** Serialize generic list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic list object based on path provided in options. See {@link GenericList}\n   */\n  serialize(options: SerializeOptions = {path: []}): GenericList {\n    const id = this.spec.id || ''\n    const path = options.path\n\n    const defaultLayout = this.spec.defaultLayout\n    if (defaultLayout && !layoutOptions.includes(defaultLayout)) {\n      throw new SerializeError(\n        `\\`layout\\` must be one of ${layoutOptions.map((item) => `\"${item}\"`).join(', ')}`,\n        path,\n        id || options.index,\n        this.spec.title,\n      )\n    }\n\n    const initialValueTemplates = (this.spec.initialValueTemplates || []).map((item, i) =>\n      maybeSerializeInitialValueTemplateItem(item, i, path),\n    )\n\n    return {\n      id: validateId(id, options.path, id || options.index),\n      title: this.spec.title,\n      i18n: this.spec.i18n,\n      type: 'genericList',\n      defaultLayout,\n      child: this.spec.child || noChildResolver,\n      canHandleIntent: this.spec.canHandleIntent || shallowIntentChecker,\n      displayOptions: this.spec.displayOptions,\n      initialValueTemplates,\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, path),\n      ),\n    }\n  }\n\n  /** Clone generic list builder (allows for options overriding)\n   * @param _withSpec - generic list options.\n   * @returns generic list builder.\n   */\n  abstract clone(_withSpec?: object): ConcreteImpl\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {AddIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrderingItem} from '@sanity/types'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, type InitialValueTemplateItem} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions, type ItemChild} from './ChildResolver'\nimport {DocumentBuilder} from './Document'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n} from './GenericList'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Child, type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\n\nconst validateFilter = (spec: PartialDocumentList, options: SerializeOptions) => {\n  const filter = spec.options?.filter.trim() || ''\n\n  if (['*', '{'].includes(filter[0])) {\n    throw new SerializeError(\n      `\\`filter\\` cannot start with \\`${filter[0]}\\` - looks like you are providing a query, not a filter`,\n      options.path,\n      spec.id,\n      spec.title,\n    ).withHelpUrl(HELP_URL.QUERY_PROVIDED_FOR_FILTER)\n  }\n\n  return filter\n}\n\nconst createDocumentChildResolverForItem =\n  (context: StructureContext): ChildResolver =>\n  (itemId: string, options: ChildResolverOptions): ItemChild | Promise<ItemChild> | undefined => {\n    const parentItem = options.parent as DocumentList\n    const template = options.params?.template\n      ? context.templates.find((tpl) => tpl.id === options.params.template)\n      : undefined\n    const type = template\n      ? template.schemaType\n      : parentItem.schemaTypeName || resolveTypeForDocument(context.getClient, itemId)\n\n    return Promise.resolve(type).then((schemaType) =>\n      schemaType\n        ? context.resolveDocumentNode({schemaType, documentId: itemId})\n        : new DocumentBuilder(context).id('editor').documentId(itemId).schemaType(''),\n    )\n  }\n\n/**\n * Partial document list\n *\n * @public\n */\nexport interface PartialDocumentList extends BuildableGenericList {\n  /** Document list options. See {@link DocumentListOptions} */\n  options?: DocumentListOptions\n  /** Schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document list input\n *\n * @public\n */\nexport interface DocumentListInput extends GenericListInput {\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n}\n\n/**\n * Interface for document list\n *\n * @public\n */\nexport interface DocumentList extends GenericList {\n  type: 'documentList'\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n  /** Document list child. See {@link Child} */\n  child: Child\n  /** Document schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document List options\n *\n * @public\n */\nexport interface DocumentListOptions {\n  /** Document list filter */\n  filter: string\n  /** Document list parameters */\n  params?: Record<string, unknown>\n  /** Document list API version */\n  apiVersion?: string\n  /** Document list API default ordering array. */\n  defaultOrdering?: SortOrderingItem[]\n}\n\n/**\n * Class for building document list\n *\n * @public\n */\nexport class DocumentListBuilder extends GenericListBuilder<\n  PartialDocumentList,\n  DocumentListBuilder\n> {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super()\n    this.spec = spec || {}\n    this.initialValueTemplatesSpecified = Boolean(spec?.initialValueTemplates)\n  }\n\n  /** Set API version\n   * @param apiVersion - API version\n   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}\n   */\n  apiVersion(apiVersion: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {filter: ''}), apiVersion}})\n  }\n\n  /** Get API version\n   * @returns API version\n   */\n  getApiVersion(): string | undefined {\n    return this.spec.options?.apiVersion\n  }\n\n  /** Set Document list filter\n   * @param filter - GROQ-filter used to determine which documents to display. Do not support joins, since they operate on individual documents, and will ignore order-clauses and projections. See {@link https://www.sanity.io/docs/realtime-updates}\n   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}\n   */\n  filter(filter: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {}), filter}})\n  }\n\n  /** Get Document list filter\n   * @returns filter\n   */\n  getFilter(): string | undefined {\n    return this.spec.options?.filter\n  }\n\n  /** Set Document list schema type name\n   * @param type - schema type name.\n   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}\n   */\n  schemaType(type: SchemaType | string): DocumentListBuilder {\n    const schemaTypeName = typeof type === 'string' ? type : type.name\n    return this.clone({schemaTypeName})\n  }\n\n  /** Get Document list schema type name\n   * @returns schema type name\n   */\n  getSchemaType(): string | undefined {\n    return this.spec.schemaTypeName\n  }\n\n  /** Set Document list options' parameters\n   * @param params - parameters\n   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}\n   */\n  params(params: Record<string, unknown>): DocumentListBuilder {\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), params},\n    })\n  }\n\n  /** Get Document list options' parameters\n   * @returns options\n   */\n  getParams(): Record<string, unknown> | undefined {\n    return this.spec.options?.params\n  }\n\n  /** Set Document list default ordering\n   * @param ordering - default sort ordering array. See {@link SortOrderingItem}\n   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}\n   */\n  defaultOrdering(ordering: SortOrderingItem[]): DocumentListBuilder {\n    if (!Array.isArray(ordering)) {\n      throw new Error('`defaultOrdering` must be an array of order clauses')\n    }\n\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), defaultOrdering: ordering},\n    })\n  }\n\n  /** Get Document list default ordering\n   * @returns default ordering. See {@link SortOrderingItem}\n   */\n  getDefaultOrdering(): SortOrderingItem[] | undefined {\n    return this.spec.options?.defaultOrdering\n  }\n\n  /** Serialize Document list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list object based on path provided in options. See {@link DocumentList}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentList {\n    if (typeof this.spec.id !== 'string' || !this.spec.id) {\n      throw new SerializeError(\n        '`id` is required for document lists',\n        options.path,\n        options.index,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!this.spec.options || !this.spec.options.filter) {\n      throw new SerializeError(\n        '`filter` is required for document lists',\n        options.path,\n        this.spec.id,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.FILTER_REQUIRED)\n    }\n\n    const hasSimpleFilter = this.spec.options?.filter === '_type == $type'\n    if (!hasSimpleFilter && this.spec.options.filter && !this.spec.options.apiVersion) {\n      console.warn(\n        `No apiVersion specified for document type list with custom filter: \\`${this.spec.options.filter}\\`. This will be required in the future. See %s for more info.`,\n        generateHelpUrl(HELP_URL.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER),\n      )\n    }\n    return {\n      ...super.serialize(options),\n      type: 'documentList',\n      schemaTypeName: this.spec.schemaTypeName,\n      child: this.spec.child || createDocumentChildResolverForItem(this._context),\n      options: {\n        ...this.spec.options,\n        // @todo: make specifying .apiVersion required when using custom (non-simple) filters in v4\n        apiVersion: this.spec.options.apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n        filter: validateFilter(this.spec, options),\n      },\n    }\n  }\n\n  /** Clone Document list builder (allows for options overriding)\n   * @param withSpec - override document list spec. See {@link PartialDocumentList}\n   * @returns document list builder. See {@link DocumentListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentListBuilder {\n    const builder = new DocumentListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n\n    if (!this.initialValueTemplatesSpecified) {\n      builder.spec.initialValueTemplates = inferInitialValueTemplates(this._context, builder.spec)\n    }\n\n    if (!builder.spec.schemaTypeName) {\n      builder.spec.schemaTypeName = inferTypeName(builder.spec)\n    }\n\n    return builder\n  }\n\n  /** Get Document list spec\n   * @returns document list spec. See {@link PartialDocumentList}\n   */\n  getSpec(): PartialDocumentList {\n    return this.spec\n  }\n}\n\nfunction inferInitialValueTemplates(\n  context: StructureContext,\n  spec: PartialDocumentList,\n): InitialValueTemplateItem[] | undefined {\n  const {document} = context\n  const {schemaTypeName, options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = schemaTypeName\n    ? [schemaTypeName]\n    : Array.from(new Set(getTypeNamesFromFilter(filter, params)))\n\n  if (typeNames.length === 0) {\n    return undefined\n  }\n\n  return typeNames\n    .flatMap((schemaType) =>\n      document.resolveNewDocumentOptions({\n        type: 'structure',\n        schemaType,\n      }),\n    )\n    .map((option) => ({...option, icon: AddIcon}))\n}\n\nfunction inferTypeName(spec: PartialDocumentList): string | undefined {\n  const {options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = getTypeNamesFromFilter(filter, params)\n  return typeNames.length === 1 ? typeNames[0] : undefined\n}\n\n/** @internal */\nexport function getTypeNamesFromFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  let typeNames = getTypeNamesFromEqualityFilter(filter, params)\n\n  if (typeNames.length === 0) {\n    typeNames = getTypeNamesFromInTypesFilter(filter, params)\n  }\n\n  return typeNames\n}\n\n// From _type == \"movie\" || _type == $otherType\nfunction getTypeNamesFromEqualityFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern =\n    /\\b_type\\s*==\\s*(['\"].*?['\"]|\\$.*?(?:\\s|$))|\\B(['\"].*?['\"]|\\$.*?(?:\\s|$))\\s*==\\s*_type/g\n  const matches: string[] = []\n  let match\n  while ((match = pattern.exec(filter)) !== null) {\n    matches.push(match[1] || match[2])\n  }\n\n  return matches\n    .map((candidate) => {\n      const typeName = candidate[0] === '$' ? params[candidate.slice(1)] : candidate\n      const normalized = ((typeName as string) || '').trim().replace(/^[\"']|[\"']$/g, '')\n      return normalized\n    })\n    .filter(Boolean)\n}\n\n// From _type in [\"dog\", \"cat\", $otherSpecies]\nfunction getTypeNamesFromInTypesFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern = /\\b_type\\s+in\\s+\\[(.*?)\\]/\n  const matches = filter.match(pattern)\n  if (!matches) {\n    return []\n  }\n\n  return matches[1]\n    .split(/,\\s*/)\n    .map((match) => match.trim().replace(/^[\"']+|[\"']+$/g, ''))\n    .map((item) => (item[0] === '$' ? params[item.slice(1)] : item))\n    .filter(Boolean) as string[]\n}\n","import {find} from 'lodash'\nimport {isRecord} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions} from './ChildResolver'\nimport {isDocumentListItem} from './DocumentListItem'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n  shallowIntentChecker,\n} from './GenericList'\nimport {type IntentChecker} from './Intent'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Divider, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst getArgType = (thing: ListItem) => {\n  if (thing instanceof ListBuilder) {\n    return 'ListBuilder'\n  }\n\n  if (isPromise<ListItem>(thing)) {\n    return 'Promise'\n  }\n\n  return Array.isArray(thing) ? 'array' : typeof thing\n}\n\nconst isListItem = (item: ListItem | Divider): item is ListItem => {\n  return item.type === 'listItem'\n}\n\nconst defaultCanHandleIntent: IntentChecker = (intentName: string, params, context) => {\n  const pane = context.pane as List\n  const items = pane.items || []\n  return (\n    items\n      .filter(isDocumentListItem)\n      .some((item) => item.schemaType.name === params.type && item._id === params.id) ||\n    shallowIntentChecker(intentName, params, context)\n  )\n}\n\nconst resolveChildForItem: ChildResolver = (itemId: string, options: ChildResolverOptions) => {\n  const parentItem = options.parent as List\n  const items = parentItem.items.filter(isListItem)\n  const target = (items.find((item) => item.id === itemId) || {child: undefined}).child\n\n  if (!target || typeof target !== 'function') {\n    return target\n  }\n\n  return typeof target === 'function' ? target(itemId, options) : target\n}\n\nfunction maybeSerializeListItem(\n  item: ListItem | ListItemBuilder | Divider,\n  index: number,\n  path: SerializePath,\n): ListItem | Divider {\n  if (item instanceof ListItemBuilder) {\n    return item.serialize({path, index})\n  }\n\n  const listItem = item as ListItem\n  if (listItem && listItem.type === 'divider') {\n    return item as Divider\n  }\n\n  if (!listItem || listItem.type !== 'listItem') {\n    const gotWhat = (listItem && listItem.type) || getArgType(listItem)\n    const helpText = gotWhat === 'array' ? ' - did you forget to spread (...moreItems)?' : ''\n    throw new SerializeError(\n      `List items must be of type \"listItem\", got \"${gotWhat}\"${helpText}`,\n      path,\n      index,\n    ).withHelpUrl(HELP_URL.INVALID_LIST_ITEM)\n  }\n\n  return item\n}\n\nfunction isPromise<T>(thing: unknown): thing is PromiseLike<T> {\n  return isRecord(thing) && typeof thing.then === 'function'\n}\n\n/**\n * Interface for List\n *\n * @public\n */\nexport interface List extends GenericList {\n  type: 'list'\n  /** List items. See {@link ListItem} and {@link Divider} */\n  items: (ListItem | Divider)[]\n}\n\n/**\n * Interface for list input\n *\n * @public\n */\nexport interface ListInput extends GenericListInput {\n  /** List input items array. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * Interface for buildable list\n *\n * @public\n */\nexport interface BuildableList extends BuildableGenericList {\n  /** List items. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * A `ListBuilder` is used to build a list of items in the structure tool.\n *\n * @public */\nexport class ListBuilder extends GenericListBuilder<BuildableList, ListBuilder> {\n  /** buildable list option object. See {@link BuildableList} */\n  protected spec: BuildableList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListInput,\n  ) {\n    super()\n    this.spec = spec ? spec : {}\n    this.initialValueTemplatesSpecified = Boolean(spec && spec.initialValueTemplates)\n  }\n\n  /**\n   * Set list builder based on items provided\n   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}\n   * @returns list builder based on items provided. See {@link ListBuilder}\n   */\n  items(items: (ListItemBuilder | ListItem | Divider)[]): ListBuilder {\n    return this.clone({items})\n  }\n\n  /** Get list builder items\n   * @returns list items. See {@link BuildableList}\n   */\n  getItems(): BuildableList['items'] {\n    return this.spec.items\n  }\n\n  /** Serialize list builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns list based on path in options. See {@link List}\n   */\n  serialize(options: SerializeOptions = {path: []}): List {\n    const id = this.spec.id\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for lists',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const items = typeof this.spec.items === 'undefined' ? [] : this.spec.items\n    if (!Array.isArray(items)) {\n      throw new SerializeError(\n        '`items` must be an array of items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY)\n    }\n\n    const path = (options.path || []).concat(id)\n    const serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path))\n    const dupes = serializedItems.filter((val, i) => find(serializedItems, {id: val.id}, i + 1))\n\n    if (dupes.length > 0) {\n      const dupeIds = dupes.map((item) => item.id).slice(0, 5)\n      const dupeDesc = dupes.length > 5 ? `${dupeIds.join(', ')}...` : dupeIds.join(', ')\n      throw new SerializeError(\n        `List items with same ID found (${dupeDesc})`,\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE)\n    }\n\n    return {\n      ...super.serialize(options),\n      type: 'list',\n      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,\n      child: this.spec.child || resolveChildForItem,\n      items: serializedItems,\n    }\n  }\n\n  /**\n   * Clone list builder and return new list builder based on context and spec provided\n   * @param withSpec - list options. See {@link BuildableList}\n   * @returns new list builder based on context and spec provided. See {@link ListBuilder}\n   */\n  clone(withSpec?: BuildableList): ListBuilder {\n    const builder = new ListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {type Observable} from 'rxjs'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver, type ItemChild} from './ChildResolver'\nimport {ComponentBuilder} from './Component'\nimport {DocumentBuilder} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {ListBuilder} from './List'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Collection,\n  type CollectionBuilder,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Unserialized list item child.\n * See {@link Collection}, {@link CollectionBuilder}, {@link ChildResolver} and {@link ItemChild}\n *\n * @public\n */\nexport type UnserializedListItemChild =\n  | Collection\n  | CollectionBuilder\n  | ChildResolver\n  | Observable<ItemChild>\n\n/**\n * Child of List Item\n * See {@link Collection}, {@link ChildResolver}, {@link ItemChild}\n * @public\n */\nexport type ListItemChild = Collection | ChildResolver | Observable<ItemChild> | undefined\n\n/**\n * Interface for serialize list item options\n *\n * @public\n */\nexport interface ListItemSerializeOptions extends SerializeOptions {\n  /** Check if list item title is optional */\n  titleIsOptional?: boolean\n}\n\n/**\n * Interface for ist item display options\n *\n * @public */\nexport interface ListItemDisplayOptions {\n  /** Check if list item display should show icon */\n  showIcon?: boolean\n}\n\n/**\n * interface for list item input\n *\n * @public */\nexport interface ListItemInput {\n  /** List item id */\n  id: string\n  /** List item title */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Interface for List Item\n *\n * @public */\nexport interface ListItem {\n  /** List item id */\n  id: string\n  /** List item type */\n  type: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item title. Note that the `i18n` key and namespace will take precedence. */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType\n}\n\n/**\n * Interface for unserialized list items.\n *\n * @public\n */\nexport interface UnserializedListItem {\n  /** List item ID */\n  id: string\n  /** List item title */\n  title: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link UnserializedListItemChild} */\n  child?: UnserializedListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Partial list item. See {@link UnserializedListItem}\n *\n * @public */\nexport type PartialListItem = Partial<UnserializedListItem>\n\n/**\n * Class for building list items\n *\n * @public */\nexport class ListItemBuilder implements Serializable<ListItem> {\n  /** List item option object. See {@link PartialListItem} */\n  protected spec: PartialListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListItemInput,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set list item ID\n   * @returns list item builder based on ID provided. See {@link ListItemBuilder}\n   */\n  id(id: string): ListItemBuilder {\n    return this.clone({id})\n  }\n\n  /**\n   * Get list item ID\n   * @returns list item ID. See {@link PartialListItem}\n   */\n  getId(): PartialListItem['id'] {\n    return this.spec.id\n  }\n\n  /**\n   * Set list item title\n   * @returns list item builder based on title provided. See {@link ListItemBuilder}\n   */\n  title(title: string): ListItemBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /**\n   * Get list item title\n   * @returns list item title. See {@link PartialListItem}\n   */\n  getTitle(): PartialListItem['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ListItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set list item icon\n   * @returns list item builder based on icon provided. See {@link ListItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ListItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Set if list item should show icon\n   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}\n   */\n  showIcon(enabled = true): ListItemBuilder {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcon: enabled},\n    })\n  }\n\n  /**\n   * Check if list item should show icon\n   * @returns true if it should show the icon, false if not, undefined if not set\n   */\n  getShowIcon(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : undefined\n  }\n\n  /**\n   *Get list item icon\n   * @returns list item icon. See {@link PartialListItem}\n   */\n  getIcon(): PartialListItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set list item child\n   * @param child - list item child. See {@link UnserializedListItemChild}\n   * @returns list item builder based on child provided. See {@link ListItemBuilder}\n   */\n  child(child: UnserializedListItemChild): ListItemBuilder {\n    return this.clone({child})\n  }\n\n  /**\n   * Get list item child\n   * @returns list item child. See {@link PartialListItem}\n   */\n  getChild(): PartialListItem['child'] {\n    return this.spec.child\n  }\n\n  /**\n   * Set list item schema type\n   * @param schemaType - list item schema type. See {@link SchemaType}\n   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}\n   */\n  schemaType(schemaType: SchemaType | string): ListItemBuilder {\n    return this.clone({schemaType})\n  }\n\n  /**\n   * Get list item schema type\n   * @returns list item schema type. See {@link PartialListItem}\n   */\n  getSchemaType(): PartialListItem['schemaType'] {\n    const schemaType = this.spec.schemaType\n\n    if (typeof schemaType === 'string') {\n      return this._context.schema.get(schemaType)\n    }\n\n    return this.spec.schemaType\n  }\n\n  /** Serialize list item builder\n   * @param options - serialization options. See {@link ListItemSerializeOptions}\n   * @returns list item node based on path provided in options. See {@link ListItem}\n   */\n  serialize(options: ListItemSerializeOptions = {path: []}): ListItem {\n    const {id, title, child} = this.spec\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options.titleIsOptional && (typeof title !== 'string' || !title)) {\n      throw new SerializeError('`title` is required for list items', options.path, id).withHelpUrl(\n        HELP_URL.TITLE_REQUIRED,\n      )\n    }\n\n    let schemaType = this.spec.schemaType\n    if (typeof schemaType === 'string') {\n      const type = this._context.schema.get(schemaType)\n      if (!type) {\n        throw new SerializeError(\n          `Could not find type \"${schemaType}\" in schema`,\n          options.path,\n          id,\n        ).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND)\n      }\n\n      schemaType = type\n    }\n\n    const serializeOptions = {path: options.path.concat(id), hint: 'child'}\n    let listChild =\n      child instanceof ComponentBuilder ||\n      child instanceof DocumentListBuilder ||\n      child instanceof DocumentBuilder ||\n      child instanceof ListBuilder\n        ? child.serialize(serializeOptions)\n        : child\n\n    // In the case of a function, create a bound version that will pass the correct serialize\n    // context, so we may lazily resolve it at some point in the future without losing context\n    if (typeof listChild === 'function') {\n      const originalChild = listChild\n      listChild = (itemId, childOptions) => {\n        return originalChild(itemId, {...childOptions, serializeOptions})\n      }\n    }\n\n    return {\n      ...this.spec,\n      id: validateId(id, options.path, options.index),\n      schemaType,\n      child: listChild,\n      title,\n      type: 'listItem',\n    }\n  }\n\n  /** Clone list item builder\n   * @param withSpec - partial list item options. See {@link PartialListItem}\n   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}\n   */\n  clone(withSpec?: PartialListItem): ListItemBuilder {\n    const builder = new ListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {isRecord} from 'sanity'\n\nimport {DocumentBuilder} from './Document'\nimport {\n  type ListItem,\n  ListItemBuilder,\n  type ListItemInput,\n  type UnserializedListItem,\n} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document list item input\n *\n * @public\n */\nexport interface DocumentListItemInput extends ListItemInput {\n  /** Document list item input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Interface for document list item\n *\n * @public\n */\nexport interface DocumentListItem extends ListItem {\n  /** Document schema type. See {@link SchemaType} */\n  schemaType: SchemaType\n  /** Document ID */\n  _id: string\n}\n\n/**\n * Partial document list item\n *\n * @public\n */\nexport type PartialDocumentListItem = Partial<UnserializedListItem>\n\nconst createDefaultChildResolver =\n  (context: StructureContext, spec: PartialDocumentListItem) => (documentId: string) => {\n    const schemaType =\n      spec.schemaType &&\n      (typeof spec.schemaType === 'string' ? spec.schemaType : spec.schemaType.name)\n\n    return schemaType\n      ? context.resolveDocumentNode({schemaType, documentId})\n      : new DocumentBuilder(context).id('documentEditor').documentId(documentId)\n  }\n\n/**\n * Class for building a document list item\n *\n * @public\n */\nexport class DocumentListItemBuilder extends ListItemBuilder {\n  /** Document list options. See {@link PartialDocumentListItem} */\n  protected spec: PartialDocumentListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListItemInput,\n  ) {\n    super(_context, spec)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Serialize document list item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list item object based on path provided in options. See {@link DocumentListItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentListItem {\n    const spec = super.serialize({...options, titleIsOptional: true})\n\n    if (!spec.schemaType) {\n      throw new SerializeError(\n        '`schemaType` is required for document list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED)\n    }\n\n    const child = spec.child || createDefaultChildResolver(this._context, spec)\n    return {...spec, child, schemaType: spec.schemaType, _id: spec.id}\n  }\n\n  /** Clone Document list item builder (allows for options overriding)\n   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}\n   * @returns document list item builder. See {@link DocumentListItemBuilder}\n   */\n  clone(withSpec?: PartialDocumentListItem): DocumentListItemBuilder {\n    const builder = new DocumentListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport function isDocumentListItem(item: unknown): item is DocumentListItem {\n  return isRecord(item) && typeof item.schemaType !== 'undefined' && typeof item._id === 'string'\n}\n","import {type SchemaType} from '@sanity/types'\n\nimport {DocumentListBuilder, type DocumentListInput, type PartialDocumentList} from './DocumentList'\nimport {type GenericListInput} from './GenericList'\nimport {DEFAULT_INTENT_HANDLER} from './Intent'\nimport {type Child} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document type list input\n *\n * @public\n */\nexport interface DocumentTypeListInput extends Partial<GenericListInput> {\n  /** Document type list input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Class for building a document type list\n *\n * @public\n */\nexport class DocumentTypeListBuilder extends DocumentListBuilder {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super(_context)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set Document type list child\n   * @param child - Child component. See {@link Child}\n   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  child(child: Child): DocumentTypeListBuilder {\n    return this.cloneWithoutDefaultIntentHandler({child})\n  }\n\n  /** Clone Document type list builder (allows for options overriding)\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder. See {@link DocumentTypeListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    builder.spec = {...this.spec, ...parent.getSpec(), ...(withSpec || {})}\n    return builder\n  }\n\n  /** Clone Document type list builder (allows for options overriding) and remove default intent handler\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  cloneWithoutDefaultIntentHandler(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    const canHandleIntent = this.spec.canHandleIntent\n    const shouldOverride = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER\n    const override = shouldOverride ? {canHandleIntent: undefined} : {}\n    builder.spec = {\n      ...parent.getSpec(),\n      ...this.spec,\n      ...(withSpec || {}),\n      ...override,\n    }\n    return builder\n  }\n}\n","import {StackCompactIcon, StackIcon} from '@sanity/icons'\nimport {type SchemaType} from '@sanity/types'\nimport {startCase} from 'lodash'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {type DocumentListBuilder} from './DocumentList'\nimport {DocumentTypeListBuilder, type DocumentTypeListInput} from './DocumentTypeList'\nimport {defaultIntentChecker} from './Intent'\nimport {type List} from './List'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {DEFAULT_SELECTED_ORDERING_OPTION} from './Sort'\nimport {type Collection} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst BUNDLED_DOC_TYPES = ['sanity.imageAsset', 'sanity.fileAsset']\n\nfunction isBundledDocType(typeName: string) {\n  return BUNDLED_DOC_TYPES.includes(typeName)\n}\n\nfunction isDocumentType(schemaType: SchemaType) {\n  return schemaType.type?.name === 'document'\n}\n\nfunction isList(collection: Collection): collection is List {\n  return collection.type === 'list'\n}\n\nexport function getDocumentTypes({schema}: StructureContext): string[] {\n  return schema\n    .getTypeNames()\n    .filter((n) => {\n      const schemaType = schema.get(n)\n      return schemaType && isDocumentType(schemaType)\n    })\n    .filter((n) => !isBundledDocType(n))\n}\n\nexport function getDocumentTypeListItems(context: StructureContext): ListItemBuilder[] {\n  const types = getDocumentTypes(context)\n  return types.map((typeName) => getDocumentTypeListItem(context, typeName))\n}\n\nexport function getDocumentTypeListItem(\n  context: StructureContext,\n  typeName: string,\n): ListItemBuilder {\n  const {schema} = context\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new ListItemBuilder(context)\n    .id(typeName)\n    .title(title)\n    .schemaType(type)\n    .child((id, childContext) => {\n      const parent = childContext.parent as Collection\n      const parentItem = isList(parent)\n        ? (parent.items.find((item) => item.id === id) as ListItem)\n        : null\n\n      let list = getDocumentTypeList(context, typeName)\n      if (parentItem && parentItem.title) {\n        list = list.title(parentItem.title)\n      }\n\n      return list\n    })\n}\n\nexport function getDocumentTypeList(\n  context: StructureContext,\n  typeNameOrSpec: string | DocumentTypeListInput,\n): DocumentListBuilder {\n  const {schema, resolveDocumentNode} = context\n\n  const schemaType = typeof typeNameOrSpec === 'string' ? typeNameOrSpec : typeNameOrSpec.schemaType\n  const typeName = typeof schemaType === 'string' ? schemaType : schemaType.name\n  const spec: DocumentTypeListInput =\n    typeof typeNameOrSpec === 'string' ? {schemaType} : typeNameOrSpec\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new DocumentTypeListBuilder(context)\n    .id(spec.id || typeName)\n    .title(spec.title || title)\n    .filter('_type == $type')\n    .params({type: typeName})\n    .schemaType(type)\n    .defaultOrdering(DEFAULT_SELECTED_ORDERING_OPTION.by)\n    .menuItemGroups(\n      spec.menuItemGroups || [\n        {\n          id: 'sorting',\n          title: 'Sort',\n          i18n: {title: {key: 'menu-item-groups.actions-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'layout',\n          title: 'Layout',\n          i18n: {title: {key: 'menu-item-groups.layout-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'actions',\n          title: 'Actions',\n          i18n: {title: {key: 'menu-item-groups.sorting-group', ns: structureLocaleNamespace}},\n        },\n      ],\n    )\n    .child(\n      spec.child ||\n        ((documentId: string) => resolveDocumentNode({schemaType: typeName, documentId})),\n    )\n    .canHandleIntent(spec.canHandleIntent || defaultIntentChecker)\n    .menuItems(\n      spec.menuItems || [\n        // Create new (from action button) will be added in serialization step of GenericList\n\n        // Sort by <Y>\n        ...getOrderingMenuItemsForSchemaType(context, type),\n\n        // Display as <Z>\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.compact-view', ns: structureLocaleNamespace}})\n          .title('Compact view') // fallback title\n          .icon(StackCompactIcon)\n          .action('setLayout')\n          .params({layout: 'default'}),\n\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.detailed-view', ns: structureLocaleNamespace}})\n          .title('Detailed view') // fallback title\n          .icon(StackIcon)\n          .action('setLayout')\n          .params({layout: 'detail'}),\n\n        // Create new (from menu) will be added in serialization step of GenericList\n      ],\n    )\n}\n","import {type SchemaType} from '@sanity/types'\nimport {uniqueId} from 'lodash'\nimport {isValidElementType} from 'react-is'\nimport {getConfigContextFromSource, getPublishedId, type Source} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {ComponentBuilder, type ComponentInput} from './Component'\nimport {DocumentBuilder, documentFromEditor, documentFromEditorWithInitialValue} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {DocumentListItemBuilder} from './DocumentListItem'\nimport {\n  getDocumentTypeList,\n  getDocumentTypeListItem,\n  getDocumentTypeListItems,\n} from './documentTypeListItems'\nimport {\n  defaultInitialValueTemplateItems,\n  InitialValueTemplateItemBuilder,\n  menuItemsFromInitialValueTemplateItems,\n} from './InitialValueTemplateItem'\nimport {ListBuilder} from './List'\nimport {ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItem, getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {MenuItemGroupBuilder} from './MenuItemGroup'\nimport {type Divider} from './StructureNodes'\nimport {\n  type DefaultDocumentNodeResolver,\n  type StructureBuilder,\n  type StructureContext,\n  type UserComponent,\n} from './types'\nimport * as views from './views'\n\n/** @internal */\nexport interface StructureBuilderOptions {\n  source: Source\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n}\n\nfunction hasIcon(schemaType?: SchemaType | string): boolean {\n  if (!schemaType || typeof schemaType === 'string') {\n    return false\n  }\n\n  return Boolean(schemaType.icon)\n}\n\nfunction getDefaultStructure(context: StructureContext): ListBuilder {\n  const items = getDocumentTypeListItems(context)\n  return new ListBuilder(context)\n    .id('__root__')\n    .title('Content')\n    .i18n({title: {key: 'default-definition.content-title', ns: structureLocaleNamespace}})\n    .items(items)\n    .showIcons(items.some((item) => hasIcon(item.getSchemaType())))\n}\n\n/** @internal */\nexport function createStructureBuilder({\n  defaultDocumentNode,\n  source,\n}: StructureBuilderOptions): StructureBuilder {\n  const configContext = getConfigContextFromSource(source)\n  const context: StructureContext = {\n    ...source,\n    getStructureBuilder: () => structureBuilder,\n    resolveDocumentNode: (options) => {\n      let builder =\n        defaultDocumentNode?.(structureBuilder, {...options, ...configContext}) ||\n        new DocumentBuilder(context)\n\n      if (!builder.getId()) {\n        builder = builder.id('documentEditor')\n      }\n\n      if (options.documentId) {\n        builder = builder.documentId(getPublishedId(options.documentId))\n      }\n\n      return builder.schemaType(options.schemaType)\n    },\n  }\n\n  const structureBuilder: StructureBuilder = {\n    defaults: () => getDefaultStructure(context),\n    documentTypeList: (...args) => getDocumentTypeList(context, ...args),\n    documentTypeListItem: (...args) => getDocumentTypeListItem(context, ...args),\n    documentTypeListItems: (...args) => getDocumentTypeListItems(context, ...args),\n    document: (...args) => new DocumentBuilder(context, ...args),\n    documentWithInitialValueTemplate: (...args) =>\n      documentFromEditorWithInitialValue(context, ...args),\n    defaultDocument: context.resolveDocumentNode,\n\n    list: (...args) => new ListBuilder(context, ...args),\n    listItem: (...args) => new ListItemBuilder(context, ...args),\n\n    menuItem: (...args) => new MenuItemBuilder(context, ...args),\n    menuItemGroup: (...args) => new MenuItemGroupBuilder(context, ...args),\n    menuItemsFromInitialValueTemplateItems: (...args) =>\n      menuItemsFromInitialValueTemplateItems(context, ...args),\n\n    documentList: (...args) => new DocumentListBuilder(context, ...args),\n    documentListItem: (...args) => new DocumentListItemBuilder(context, ...args),\n\n    orderingMenuItem: (...args) => getOrderingMenuItem(context, ...args),\n    orderingMenuItemsForType: (...args) => getOrderingMenuItemsForSchemaType(context, ...args),\n\n    editor: (...args) => documentFromEditor(context, ...args),\n\n    defaultInitialValueTemplateItems: (...args) =>\n      defaultInitialValueTemplateItems(context, ...args),\n\n    initialValueTemplateItem: (\n      templateId: string,\n      parameters?: Record<string, unknown>,\n    ): InitialValueTemplateItemBuilder =>\n      new InitialValueTemplateItemBuilder(context, {\n        id: templateId,\n        parameters,\n        templateId,\n      }),\n\n    component: (spec?: ComponentInput | UserComponent) => {\n      return isValidElementType(spec)\n        ? new ComponentBuilder().component(spec as UserComponent)\n        : new ComponentBuilder(spec as ComponentInput)\n    },\n\n    divider: (): Divider => ({id: uniqueId('__divider__'), type: 'divider'}),\n\n    view: views,\n    context,\n  }\n\n  return structureBuilder\n}\n","import {type ReactNode, useMemo, useState} from 'react'\nimport {useConfigContextFromSource, useDocumentStore, useSource} from 'sanity'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {createStructureBuilder, type DefaultDocumentNodeResolver} from './structureBuilder'\nimport {\n  type StructureResolver,\n  type StructureToolContextValue,\n  type UnresolvedPaneNode,\n} from './types'\n\n/** @internal */\nexport interface StructureToolProviderProps {\n  structure?: StructureResolver\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n  children: ReactNode\n}\n\n/** @internal */\nexport function StructureToolProvider({\n  defaultDocumentNode,\n  structure: resolveStructure,\n  children,\n}: StructureToolProviderProps): React.JSX.Element {\n  const [layoutCollapsed, setLayoutCollapsed] = useState(false)\n  const source = useSource()\n  const configContext = useConfigContextFromSource(source)\n  const documentStore = useDocumentStore()\n\n  const S = useMemo(() => {\n    return createStructureBuilder({\n      defaultDocumentNode,\n      source,\n    })\n  }, [defaultDocumentNode, source])\n\n  const rootPaneNode = useMemo(() => {\n    // TODO: unify types and remove cast\n    if (resolveStructure)\n      return resolveStructure(S, {\n        ...configContext,\n        documentStore,\n      }) as UnresolvedPaneNode\n    return S.defaults() as UnresolvedPaneNode\n  }, [S, resolveStructure, configContext, documentStore])\n\n  const features: StructureToolContextValue['features'] = useMemo(\n    () => ({\n      backButton: layoutCollapsed,\n      resizablePanes: !layoutCollapsed,\n      reviewChanges: !layoutCollapsed,\n      splitPanes: !layoutCollapsed,\n      splitViews: !layoutCollapsed,\n    }),\n    [layoutCollapsed],\n  )\n\n  const structureTool: StructureToolContextValue = useMemo(() => {\n    return {\n      features,\n      layoutCollapsed,\n      setLayoutCollapsed,\n      rootPaneNode,\n      structureContext: S.context,\n    }\n  }, [features, layoutCollapsed, rootPaneNode, S.context])\n\n  return (\n    <StructureToolContext.Provider value={structureTool}>{children}</StructureToolContext.Provider>\n  )\n}\n"],"names":["structureLocaleNamespace","structureUsEnglishLocaleBundle","defineLocaleResourceBundle","locale","namespace","resources","IMPLICIT_SCHEMA_TYPE_FIELDS","joinReferences","schemaType","path","strict","head","tail","schemaField","fields","find","field","name","includes","errorMessage","map","join","Error","console","warn","type","refTypes","to","refType","tailFields","length","tailWrapper","getExtendedProjection","orderBy","ordering","split","SerializeError","constructor","message","parentPath","pathSegment","hint","segment","concat","withHelpUrl","id","helpId","HELP_URL","ORDER_BY_UPDATED_AT","title","i18n","key","ns","by","direction","ORDER_BY_CREATED_AT","DEFAULT_SELECTED_ORDERING_OPTION","DEFAULT_ORDERING_OPTIONS","maybeSerializeMenuItem","item","index","MenuItemBuilder","serialize","_context","spec","action","clone","getAction","intent","getIntent","getTitle","getI18n","group","getGroup","icon","getIcon","params","getParams","showAsAction","Boolean","getShowAsAction","options","undefined","TITLE_REQUIRED","ACTION_OR_INTENT_REQUIRED","ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE","withSpec","builder","getOrderingMenuItem","context","extendedProjection","t","replace","SortIcon","getOrderingMenuItemsForSchemaType","typeName","schema","get","orderings","maybeSerializeMenuItemGroup","MenuItemGroupBuilder","_id","_title","_i18n","getId","ID_REQUIRED","disallowedPattern","validateId","disallowedChar","match","startsWith","getStructureNodeId","camelCased","camelCase","test","getSlug","ComponentBuilder","child","getChild","component","getComponent","getOptions","menuItems","getMenuItems","menuItemGroups","getMenuItemGroups","canHandleIntent","componentOptions","i","resolveTypeForDocument","getClient","DEFAULT_STUDIO_CLIENT_OPTIONS","fetch","publishedId","getPublishedId","tag","GenericViewBuilder","kebabCase","isSerializable","view","maybeSerializeView","isComponentSpec","isRecord","ComponentViewBuilder","componentOrSpec","userComponent","base","COMPONENT_REQUIRED","FormViewBuilder","form","createDocumentChildResolver","resolveDocumentNode","itemId","slice","currentSegment","documentId","DocumentBuilder","paneId","getDocumentId","documentType","getSchemaType","initialValueTemplate","templateId","parameters","template","templateParameters","getInitialValueTemplate","getInitialValueTemplateParameters","views","getViews","urlId","DOCUMENT_ID_REQUIRED","viewIds","dupes","uniq","filter","viewId","getDocumentOptions","opts","documentFromEditor","doc","documentFromEditorWithInitialValue","templates","InitialValueTemplateItemBuilder","description","getDescription","getTemplateId","getParameters","subtitle","initialDocumentId","defaultInitialValueTemplateItems","getStructureBuilder","typeNames","getTypeNames","tpl","sort","a","b","indexOf","initialValueTemplateItem","maybeSerializeInitialValueTemplateItem","menuItemsFromInitialValueTemplateItems","templateItems","intentParams","AddIcon","DEFAULT_INTENT_HANDLER","Symbol","defaultIntentChecker","intentName","pane","isEdit","isCreate","typedSpec","paneFilter","paneParams","schemaTypeName","getTypeNamesFromFilter","initialValueTemplates","some","identity","layoutOptions","noChildResolver","shallowIntentChecker","GenericListBuilder","initialValueTemplatesSpecified","defaultLayout","getDefaultLayout","getCanHandleIntent","showIcons","enabled","displayOptions","getShowIcons","Array","isArray","getInitialValueTemplates","validateFilter","trim","QUERY_PROVIDED_FOR_FILTER","createDocumentChildResolverForItem","parentItem","parent","Promise","resolve","then","DocumentListBuilder","apiVersion","getApiVersion","getFilter","defaultOrdering","getDefaultOrdering","FILTER_REQUIRED","generateHelpUrl","API_VERSION_REQUIRED_FOR_CUSTOM_FILTER","inferInitialValueTemplates","inferTypeName","getSpec","document","from","Set","flatMap","resolveNewDocumentOptions","option","getTypeNamesFromEqualityFilter","getTypeNamesFromInTypesFilter","pattern","matches","exec","push","candidate","getArgType","thing","ListBuilder","isPromise","isListItem","defaultCanHandleIntent","items","isDocumentListItem","resolveChildForItem","target","maybeSerializeListItem","ListItemBuilder","listItem","gotWhat","helpText","INVALID_LIST_ITEM","getItems","LIST_ITEMS_MUST_BE_ARRAY","serializedItems","val","dupeIds","dupeDesc","LIST_ITEM_IDS_MUST_BE_UNIQUE","showIcon","getShowIcon","titleIsOptional","SCHEMA_TYPE_NOT_FOUND","serializeOptions","listChild","originalChild","childOptions","createDefaultChildResolver","DocumentListItemBuilder","SCHEMA_TYPE_REQUIRED","DocumentTypeListBuilder","cloneWithoutDefaultIntentHandler","override","BUNDLED_DOC_TYPES","isBundledDocType","isDocumentType","isList","collection","getDocumentTypes","n","getDocumentTypeListItems","getDocumentTypeListItem","startCase","childContext","list","getDocumentTypeList","typeNameOrSpec","StackCompactIcon","layout","StackIcon","hasIcon","getDefaultStructure","createStructureBuilder","defaultDocumentNode","source","configContext","getConfigContextFromSource","structureBuilder","defaults","documentTypeList","args","documentTypeListItem","documentTypeListItems","documentWithInitialValueTemplate","defaultDocument","menuItem","menuItemGroup","documentList","documentListItem","orderingMenuItem","orderingMenuItemsForType","editor","isValidElementType","divider","uniqueId","StructureToolProvider","structure","resolveStructure","children","layoutCollapsed","setLayoutCollapsed","useState","useSource","useConfigContextFromSource","documentStore","useDocumentStore","S","useMemo","rootPaneNode","features","backButton","resizablePanes","reviewChanges","splitPanes","splitViews","structureTool","structureContext"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"debugId":null}}]
}